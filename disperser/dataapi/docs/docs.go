// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/feed/batches/{batch_header_hash}/blobs": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Fetch blob metadata by batch header hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Batch Header Hash",
                        "name": "batch_header_hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit [default: 10]",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Next page token",
                        "name": "next_token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.BlobsResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/feed/blobs": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Fetch blobs metadata list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit [default: 10]",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.BlobsResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/feed/blobs/{blob_key}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Fetch blob metadata by blob key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob Key",
                        "name": "blob_key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.BlobMetadataResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Fetch metrics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start unix timestamp [default: 1 hour ago]",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End unix timestamp [default: unix time now]",
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit [default: 10]",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.Metric"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/batcher-service-availability": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batcher Availability"
                ],
                "summary": "Get status of EigenDA batcher.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ServiceAvailabilityResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/churner-service-availability": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Churner ServiceAvailability"
                ],
                "summary": "Get status of EigenDA churner service.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ServiceAvailabilityResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/disperser-service-availability": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceAvailability"
                ],
                "summary": "Get status of EigenDA Disperser service.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ServiceAvailabilityResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/non-signers": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Fetch non signers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interval to query for non signers in seconds [default: 3600]",
                        "name": "interval",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dataapi.NonSigner"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/operator-nonsigning-percentage": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Fetch operators non signing percentage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interval to query for operators nonsigning percentage [default: 3600]",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (2006-01-02T15:04:05Z) to query for operators nonsigning percentage [default: now]",
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Whether return only live nonsigners [default: true]",
                        "name": "live_only",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.OperatorsNonsigningPercentage"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/throughput": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Fetch throughput time series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start unix timestamp [default: 1 hour ago]",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End unix timestamp [default: unix time now]",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dataapi.Throughput"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators-info/deregistered-operators": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OperatorsInfo"
                ],
                "summary": "Fetch list of operators that have been deregistered for days. Days is a query parameter with a default value of 14 and max value of 30.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.QueriedStateOperatorsResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators-info/port-check": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OperatorsInfo"
                ],
                "summary": "Operator node reachability port check",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Operator ID",
                        "name": "operator_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.OperatorPortCheckResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators-info/registered-operators": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OperatorsInfo"
                ],
                "summary": "Fetch list of operators that have been registered for days. Days is a query parameter with a default value of 14 and max value of 30.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dataapi.QueriedStateOperatorsResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/dataapi.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "big.Int": {
            "type": "object"
        },
        "core.SecurityParam": {
            "type": "object",
            "properties": {
                "adversaryThreshold": {
                    "description": "AdversaryThreshold is the maximum amount of stake that can be controlled by an adversary in the quorum as a percentage of the total stake in the quorum",
                    "type": "integer"
                },
                "confirmationThreshold": {
                    "description": "ConfirmationThreshold is the amount of stake that must sign a message for it to be considered valid as a percentage of the total stake in the quorum",
                    "type": "integer"
                },
                "quorumID": {
                    "type": "integer"
                },
                "quorumRate": {
                    "description": "Rate Limit. This is a temporary measure until the node can derive rates on its own using rollup authentication. This is used\nfor restricting the rate at which retrievers are able to download data from the DA node to a multiple of the rate at which the\ndata was posted to the DA node.",
                    "type": "integer"
                }
            }
        },
        "dataapi.BlobMetadataResponse": {
            "type": "object",
            "properties": {
                "batch_header_hash": {
                    "type": "string"
                },
                "batch_id": {
                    "type": "integer"
                },
                "batch_root": {
                    "type": "string"
                },
                "blob_commitment": {
                    "$ref": "#/definitions/encoding.BlobCommitments"
                },
                "blob_inclusion_proof": {
                    "type": "string"
                },
                "blob_index": {
                    "type": "integer"
                },
                "blob_key": {
                    "type": "string"
                },
                "blob_status": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_disperser.BlobStatus"
                },
                "confirmation_block_number": {
                    "type": "integer"
                },
                "confirmation_txn_hash": {
                    "type": "string"
                },
                "fee": {
                    "type": "string"
                },
                "reference_block_number": {
                    "type": "integer"
                },
                "requested_at": {
                    "type": "integer"
                },
                "security_params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.SecurityParam"
                    }
                },
                "signatory_record_hash": {
                    "type": "string"
                }
            }
        },
        "dataapi.BlobsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataapi.BlobMetadataResponse"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/dataapi.Meta"
                }
            }
        },
        "dataapi.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dataapi.Meta": {
            "type": "object",
            "properties": {
                "next_token": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "dataapi.Metric": {
            "type": "object",
            "properties": {
                "cost_in_gas": {
                    "type": "number"
                },
                "throughput": {
                    "type": "number"
                },
                "total_stake": {
                    "description": "deprecated: use TotalStakePerQuorum instead. Remove when the frontend is updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/big.Int"
                        }
                    ]
                },
                "total_stake_per_quorum": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/big.Int"
                    }
                }
            }
        },
        "dataapi.NonSigner": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "operatorId": {
                    "type": "string"
                }
            }
        },
        "dataapi.OperatorNonsigningPercentageMetrics": {
            "type": "object",
            "properties": {
                "operator_address": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "string"
                },
                "percentage": {
                    "type": "number"
                },
                "quorum_id": {
                    "type": "integer"
                },
                "stake_percentage": {
                    "type": "number"
                },
                "total_batches": {
                    "type": "integer"
                },
                "total_unsigned_batches": {
                    "type": "integer"
                }
            }
        },
        "dataapi.OperatorPortCheckResponse": {
            "type": "object",
            "properties": {
                "dispersal_online": {
                    "type": "boolean"
                },
                "dispersal_socket": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "string"
                },
                "retrieval_online": {
                    "type": "boolean"
                },
                "retrieval_socket": {
                    "type": "string"
                }
            }
        },
        "dataapi.OperatorsNonsigningPercentage": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataapi.OperatorNonsigningPercentageMetrics"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/dataapi.Meta"
                }
            }
        },
        "dataapi.QueriedStateOperatorMetadata": {
            "type": "object",
            "properties": {
                "block_number": {
                    "type": "integer"
                },
                "is_online": {
                    "type": "boolean"
                },
                "operator_id": {
                    "type": "string"
                },
                "operator_process_error": {
                    "type": "string"
                },
                "socket": {
                    "type": "string"
                }
            }
        },
        "dataapi.QueriedStateOperatorsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataapi.QueriedStateOperatorMetadata"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/dataapi.Meta"
                }
            }
        },
        "dataapi.ServiceAvailability": {
            "type": "object",
            "properties": {
                "service_name": {
                    "type": "string"
                },
                "service_status": {
                    "type": "string"
                }
            }
        },
        "dataapi.ServiceAvailabilityResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dataapi.ServiceAvailability"
                    }
                },
                "meta": {
                    "$ref": "#/definitions/dataapi.Meta"
                }
            }
        },
        "dataapi.Throughput": {
            "type": "object",
            "properties": {
                "throughput": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "encoding.BlobCommitments": {
            "type": "object",
            "properties": {
                "commitment": {
                    "$ref": "#/definitions/encoding.G1Commitment"
                },
                "length": {
                    "type": "integer"
                },
                "length_commitment": {
                    "$ref": "#/definitions/encoding.G2Commitment"
                },
                "length_proof": {
                    "$ref": "#/definitions/encoding.LengthProof"
                }
            }
        },
        "encoding.G1Commitment": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "encoding.G2Commitment": {
            "type": "object",
            "properties": {
                "x": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                }
            }
        },
        "encoding.LengthProof": {
            "type": "object",
            "properties": {
                "x": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                }
            }
        },
        "github_com_Layr-Labs_eigenda_disperser.BlobStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-varnames": [
                "Processing",
                "Confirmed",
                "Failed",
                "Finalized",
                "InsufficientSignatures",
                "Dispersing"
            ]
        },
        "github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2": {
            "type": "object",
            "properties": {
                "a0": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{"https", "http"},
	Title:            "EigenDA Data Access API",
	Description:      "This is the EigenDA Data Access API server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
