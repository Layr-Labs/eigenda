// Package v2 Code generated by swaggo/swag. DO NOT EDIT
package v2

import "github.com/swaggo/swag"

const docTemplateV2 = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/batches/feed": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Fetch batch feed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Fetch batches up to the end time (ISO 8601 format: 2006-01-02T15:04:05Z) [default: now]",
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Fetch batches starting from an interval (in seconds) before the end time [default: 3600]",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The maximum number of batches to fetch. System max (1000) if limit \u003c= 0 [default: 20; max: 1000]",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.BatchFeedResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/batches/{batch_header_hash}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Fetch batch by the batch header hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Batch header hash in hex string",
                        "name": "batch_header_hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.BatchResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blobs/feed": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "Fetch blob feed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Fetch blobs up to the end time (ISO 8601 format: 2006-01-02T15:04:05Z) [default: now]",
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Fetch blobs starting from an interval (in seconds) before the end time [default: 3600]",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Fetch blobs starting from the pagination token (exclusively). Overrides the interval param if specified [default: empty]",
                        "name": "pagination_token",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The maximum number of blobs to fetch. System max (1000) if limit \u003c= 0 [default: 20; max: 1000]",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.BlobFeedResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blobs/{blob_key}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "Fetch blob metadata by blob key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob key in hex string",
                        "name": "blob_key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.BlobResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blobs/{blob_key}/certificate": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "Fetch blob certificate by blob key v2",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob key in hex string",
                        "name": "blob_key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.BlobCertificateResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blobs/{blob_key}/inclusion-info": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blob"
                ],
                "summary": "Fetch blob inclusion info by blob key and batch header hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob key in hex string",
                        "name": "blob_key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Batch header hash in hex string",
                        "name": "batch_header_hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.BlobInclusionInfoResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/summary": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Fetch metrics summary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start unix timestamp [default: 1 hour ago]",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End unix timestamp [default: unix time now]",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.Metric"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics/timeseries/throughput": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Fetch throughput time series",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start unix timestamp [default: 1 hour ago]",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End unix timestamp [default: unix time now]",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v2.Throughput"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators/nodeinfo": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operators"
                ],
                "summary": "Active operator semver",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.SemverReportResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators/reachability": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operators"
                ],
                "summary": "Operator node reachability check",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Operator ID in hex string [default: all operators if unspecified]",
                        "name": "operator_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.OperatorPortCheckResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators/stake": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operators"
                ],
                "summary": "Operator stake distribution query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Operator ID in hex string [default: all operators if unspecified]",
                        "name": "operator_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.OperatorsStakeResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators/{batch_header_hash}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operators"
                ],
                "summary": "Fetch operator attestation response for a batch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Batch header hash in hex string",
                        "name": "batch_header_hash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Operator ID in hex string [default: all operators if unspecified]",
                        "name": "operator_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.OperatorDispersalResponses"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "big.Int": {
            "type": "object"
        },
        "core.BlobHeader": {
            "type": "object",
            "properties": {
                "accountID": {
                    "description": "AccountID is the account that is paying for the blob to be stored",
                    "type": "string"
                },
                "commitment": {
                    "$ref": "#/definitions/encoding.G1Commitment"
                },
                "length": {
                    "type": "integer"
                },
                "length_commitment": {
                    "$ref": "#/definitions/encoding.G2Commitment"
                },
                "length_proof": {
                    "$ref": "#/definitions/encoding.LengthProof"
                },
                "quorumInfos": {
                    "description": "QuorumInfos contains the quorum specific parameters for the blob",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.BlobQuorumInfo"
                    }
                }
            }
        },
        "core.BlobQuorumInfo": {
            "type": "object",
            "properties": {
                "adversaryThreshold": {
                    "description": "AdversaryThreshold is the maximum amount of stake that can be controlled by an adversary in the quorum as a percentage of the total stake in the quorum",
                    "type": "integer"
                },
                "chunkLength": {
                    "description": "ChunkLength is the number of symbols in a chunk",
                    "type": "integer"
                },
                "confirmationThreshold": {
                    "description": "ConfirmationThreshold is the amount of stake that must sign a message for it to be considered valid as a percentage of the total stake in the quorum",
                    "type": "integer"
                },
                "quorumID": {
                    "type": "integer"
                },
                "quorumRate": {
                    "description": "Rate Limit. This is a temporary measure until the node can derive rates on its own using rollup authentication. This is used\nfor restricting the rate at which retrievers are able to download data from the DA node to a multiple of the rate at which the\ndata was posted to the DA node.",
                    "type": "integer"
                }
            }
        },
        "core.G1Point": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "y": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "core.G2Point": {
            "type": "object",
            "properties": {
                "x": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                },
                "y": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                }
            }
        },
        "core.PaymentMetadata": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "AccountID is the ETH account address for the payer",
                    "type": "string"
                },
                "cumulative_payment": {
                    "description": "CumulativePayment represents the total amount of payment (in wei) made by the user up to this point",
                    "allOf": [
                        {
                            "$ref": "#/definitions/big.Int"
                        }
                    ]
                },
                "reservation_period": {
                    "description": "ReservationPeriod represents the range of time at which the dispersal is made",
                    "type": "integer"
                }
            }
        },
        "core.Signature": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "y": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "encoding.BlobCommitments": {
            "type": "object",
            "properties": {
                "commitment": {
                    "$ref": "#/definitions/encoding.G1Commitment"
                },
                "length": {
                    "type": "integer"
                },
                "length_commitment": {
                    "$ref": "#/definitions/encoding.G2Commitment"
                },
                "length_proof": {
                    "$ref": "#/definitions/encoding.LengthProof"
                }
            }
        },
        "encoding.G1Commitment": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "y": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "encoding.G2Commitment": {
            "type": "object",
            "properties": {
                "x": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                },
                "y": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                }
            }
        },
        "encoding.LengthProof": {
            "type": "object",
            "properties": {
                "x": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                },
                "y": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                }
            }
        },
        "github_com_Layr-Labs_eigenda_core_v2.Attestation": {
            "type": "object",
            "properties": {
                "apkg2": {
                    "description": "APKG2 is the aggregate public key of all signers",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.G2Point"
                        }
                    ]
                },
                "attestedAt": {
                    "description": "AttestedAt is the time the attestation was made",
                    "type": "integer"
                },
                "batchRoot": {
                    "description": "BatchRoot is the root of a Merkle tree whose leaves are the keys of the blobs in the batch",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "nonSignerPubKeys": {
                    "description": "NonSignerPubKeys are the public keys of the operators that did not sign the blob",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.G1Point"
                    }
                },
                "quorumAPKs": {
                    "description": "QuorumAPKs is the aggregate public keys of all operators in each quorum",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/core.G1Point"
                    }
                },
                "quorumNumbers": {
                    "description": "QuorumNumbers contains the quorums relevant for the attestation",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "quorumResults": {
                    "description": "QuorumResults contains the results of the quorum verification",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "referenceBlockNumber": {
                    "description": "ReferenceBlockNumber is the block number at which all operator information (stakes, indexes, etc.) is taken from",
                    "type": "integer"
                },
                "sigma": {
                    "description": "Sigma is the aggregate signature of all signers",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.Signature"
                        }
                    ]
                }
            }
        },
        "github_com_Layr-Labs_eigenda_core_v2.BatchHeader": {
            "type": "object",
            "properties": {
                "batchRoot": {
                    "description": "BatchRoot is the root of a Merkle tree whose leaves are the keys of the blobs in the batch",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "referenceBlockNumber": {
                    "description": "ReferenceBlockNumber is the block number at which all operator information (stakes, indexes, etc.) is taken from",
                    "type": "integer"
                }
            }
        },
        "github_com_Layr-Labs_eigenda_core_v2.BlobCertificate": {
            "type": "object",
            "properties": {
                "blobHeader": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobHeader"
                },
                "relayKeys": {
                    "description": "RelayKeys",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signature": {
                    "description": "Signature is an ECDSA signature signed by the blob request signer's account ID over the blob key,\nwhich is a keccak hash of the serialized BlobHeader, and used to verify against blob dispersal request's account ID",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "github_com_Layr-Labs_eigenda_core_v2.BlobHeader": {
            "type": "object",
            "properties": {
                "blobCommitments": {
                    "$ref": "#/definitions/encoding.BlobCommitments"
                },
                "blobVersion": {
                    "type": "integer"
                },
                "paymentMetadata": {
                    "description": "PaymentMetadata contains the payment information for the blob",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.PaymentMetadata"
                        }
                    ]
                },
                "quorumNumbers": {
                    "description": "QuorumNumbers contains the quorums the blob is dispersed to",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "salt": {
                    "description": "Salt is used to make blob intentionally unique when everything else is the same",
                    "type": "integer"
                }
            }
        },
        "github_com_Layr-Labs_eigenda_core_v2.BlobInclusionInfo": {
            "type": "object",
            "properties": {
                "BlobKey": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "batchRoot": {
                    "description": "BatchRoot is the root of a Merkle tree whose leaves are the keys of the blobs in the batch",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "blobIndex": {
                    "type": "integer"
                },
                "inclusionProof": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "referenceBlockNumber": {
                    "description": "ReferenceBlockNumber is the block number at which all operator information (stakes, indexes, etc.) is taken from",
                    "type": "integer"
                }
            }
        },
        "github_com_Layr-Labs_eigenda_disperser_common_v2.BlobStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-varnames": [
                "Queued",
                "Encoded",
                "Certified",
                "Failed",
                "InsufficientSignatures"
            ]
        },
        "github_com_Layr-Labs_eigenda_disperser_dataapi_v2.SignedBatch": {
            "type": "object",
            "properties": {
                "attestation": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.Attestation"
                },
                "batch_header": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.BatchHeader"
                }
            }
        },
        "github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2": {
            "type": "object",
            "properties": {
                "a0": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "a1": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "semver.SemverMetrics": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "semver": {
                    "type": "string"
                },
                "stake_percentage": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "v2.BatchFeedResponse": {
            "type": "object",
            "properties": {
                "batches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.BatchInfo"
                    }
                }
            }
        },
        "v2.BatchInfo": {
            "type": "object",
            "properties": {
                "aggregated_signature": {
                    "$ref": "#/definitions/core.Signature"
                },
                "attested_at": {
                    "type": "integer"
                },
                "batch_header": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.BatchHeader"
                },
                "batch_header_hash": {
                    "type": "string"
                },
                "quorum_numbers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "quorum_signed_percentages": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        },
        "v2.BatchResponse": {
            "type": "object",
            "properties": {
                "batch_header_hash": {
                    "type": "string"
                },
                "blob_inclusion_infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobInclusionInfo"
                    }
                },
                "signed_batch": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_disperser_dataapi_v2.SignedBatch"
                }
            }
        },
        "v2.BlobCertificateResponse": {
            "type": "object",
            "properties": {
                "blob_certificate": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobCertificate"
                }
            }
        },
        "v2.BlobFeedResponse": {
            "type": "object",
            "properties": {
                "blobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.BlobInfo"
                    }
                },
                "pagination_token": {
                    "type": "string"
                }
            }
        },
        "v2.BlobInclusionInfoResponse": {
            "type": "object",
            "properties": {
                "blob_inclusion_info": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobInclusionInfo"
                }
            }
        },
        "v2.BlobInfo": {
            "type": "object",
            "properties": {
                "blob_key": {
                    "type": "string"
                },
                "blob_metadata": {
                    "$ref": "#/definitions/v2.BlobMetadata"
                }
            }
        },
        "v2.BlobMetadata": {
            "type": "object",
            "properties": {
                "blobHeader": {
                    "$ref": "#/definitions/core.BlobHeader"
                },
                "blobSize": {
                    "description": "BlobSize is the size of the blob in bytes",
                    "type": "integer"
                },
                "blobStatus": {
                    "description": "BlobStatus indicates the current status of the blob",
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_Layr-Labs_eigenda_disperser_common_v2.BlobStatus"
                        }
                    ]
                },
                "expiry": {
                    "description": "Expiry is Unix timestamp of the blob expiry in seconds from epoch",
                    "type": "integer"
                },
                "fragmentSizeBytes": {
                    "description": "FragmentSizeBytes is the maximum fragment size used to store the chunk coefficients.",
                    "type": "integer"
                },
                "numRetries": {
                    "description": "NumRetries is the number of times the blob has been retried",
                    "type": "integer"
                },
                "requestedAt": {
                    "description": "RequestedAt is the Unix timestamp of when the blob was requested in seconds",
                    "type": "integer"
                },
                "signature": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "totalChunkSizeBytes": {
                    "description": "TotalChunkSizeBytes is the total size of the file containing all chunk coefficients for the blob.",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "UpdatedAt is the Unix timestamp of when the blob was last updated in _nanoseconds_",
                    "type": "integer"
                }
            }
        },
        "v2.BlobResponse": {
            "type": "object",
            "properties": {
                "blob_header": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobHeader"
                },
                "blob_key": {
                    "type": "string"
                },
                "blob_size_bytes": {
                    "type": "integer"
                },
                "dispersed_at": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "v2.DispersalResponse": {
            "type": "object",
            "properties": {
                "batchRoot": {
                    "description": "BatchRoot is the root of a Merkle tree whose leaves are the keys of the blobs in the batch",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "core.OperatorID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "dispersedAt": {
                    "type": "integer"
                },
                "error": {
                    "description": "Error is the error message if the dispersal failed",
                    "type": "string"
                },
                "operatorAddress": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "referenceBlockNumber": {
                    "description": "ReferenceBlockNumber is the block number at which all operator information (stakes, indexes, etc.) is taken from",
                    "type": "integer"
                },
                "respondedAt": {
                    "type": "integer"
                },
                "signature": {
                    "description": "Signature is the signature of the response by the operator",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "socket": {
                    "type": "string"
                }
            }
        },
        "v2.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "v2.Metric": {
            "type": "object",
            "properties": {
                "cost_in_gas": {
                    "type": "number"
                },
                "throughput": {
                    "type": "number"
                },
                "total_stake": {
                    "description": "deprecated: use TotalStakePerQuorum instead. Remove when the frontend is updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/big.Int"
                        }
                    ]
                },
                "total_stake_per_quorum": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/big.Int"
                    }
                }
            }
        },
        "v2.OperatorDispersalResponses": {
            "type": "object",
            "properties": {
                "operator_dispersal_responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.DispersalResponse"
                    }
                }
            }
        },
        "v2.OperatorPortCheckResponse": {
            "type": "object",
            "properties": {
                "dispersal_online": {
                    "type": "boolean"
                },
                "dispersal_socket": {
                    "type": "string"
                },
                "dispersal_status": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "string"
                },
                "retrieval_online": {
                    "type": "boolean"
                },
                "retrieval_socket": {
                    "type": "string"
                },
                "retrieval_status": {
                    "type": "string"
                },
                "v2_dispersal_online": {
                    "type": "boolean"
                },
                "v2_dispersal_socket": {
                    "type": "string"
                },
                "v2_dispersal_status": {
                    "type": "string"
                }
            }
        },
        "v2.OperatorStake": {
            "type": "object",
            "properties": {
                "operator_id": {
                    "type": "string"
                },
                "quorum_id": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer"
                },
                "stake_percentage": {
                    "type": "number"
                }
            }
        },
        "v2.OperatorsStakeResponse": {
            "type": "object",
            "properties": {
                "stake_ranked_operators": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/v2.OperatorStake"
                        }
                    }
                }
            }
        },
        "v2.SemverReportResponse": {
            "type": "object",
            "properties": {
                "semver": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/semver.SemverMetrics"
                    }
                }
            }
        },
        "v2.Throughput": {
            "type": "object",
            "properties": {
                "throughput": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfoV2 holds exported Swagger Info so clients can modify it
var SwaggerInfoV2 = &swag.Spec{
	Version:          "2.0",
	Host:             "",
	BasePath:         "/api/v2",
	Schemes:          []string{"https", "http"},
	Title:            "EigenDA Data Access API V2",
	Description:      "This is the EigenDA Data Access API V2 server.",
	InfoInstanceName: "V2",
	SwaggerTemplate:  docTemplateV2,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfoV2.InstanceName(), SwaggerInfoV2)
}
