basePath: /api/v2
definitions:
  big.Int:
    type: object
  core.BlobHeader:
    properties:
      accountID:
        description: AccountID is the account that is paying for the blob to be stored
        type: string
      commitment:
        $ref: '#/definitions/encoding.G1Commitment'
      length:
        type: integer
      length_commitment:
        $ref: '#/definitions/encoding.G2Commitment'
      length_proof:
        $ref: '#/definitions/encoding.LengthProof'
      quorumInfos:
        description: QuorumInfos contains the quorum specific parameters for the blob
        items:
          $ref: '#/definitions/core.BlobQuorumInfo'
        type: array
    type: object
  core.BlobQuorumInfo:
    properties:
      adversaryThreshold:
        description: AdversaryThreshold is the maximum amount of stake that can be
          controlled by an adversary in the quorum as a percentage of the total stake
          in the quorum
        type: integer
      chunkLength:
        description: ChunkLength is the number of symbols in a chunk
        type: integer
      confirmationThreshold:
        description: ConfirmationThreshold is the amount of stake that must sign a
          message for it to be considered valid as a percentage of the total stake
          in the quorum
        type: integer
      quorumID:
        type: integer
      quorumRate:
        description: |-
          Rate Limit. This is a temporary measure until the node can derive rates on its own using rollup authentication. This is used
          for restricting the rate at which retrievers are able to download data from the DA node to a multiple of the rate at which the
          data was posted to the DA node.
        type: integer
    type: object
  core.G1Point:
    properties:
      x:
        items:
          type: integer
        type: array
      "y":
        items:
          type: integer
        type: array
    type: object
  core.G2Point:
    properties:
      x:
        $ref: '#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2'
      "y":
        $ref: '#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2'
    type: object
  core.PaymentMetadata:
    properties:
      account_id:
        description: AccountID is the ETH account address for the payer
        type: string
      cumulative_payment:
        allOf:
        - $ref: '#/definitions/big.Int'
        description: CumulativePayment represents the total amount of payment (in
          wei) made by the user up to this point
      reservation_period:
        description: ReservationPeriod represents the range of time at which the dispersal
          is made
        type: integer
    type: object
  core.Signature:
    properties:
      x:
        items:
          type: integer
        type: array
      "y":
        items:
          type: integer
        type: array
    type: object
  encoding.BlobCommitments:
    properties:
      commitment:
        $ref: '#/definitions/encoding.G1Commitment'
      length:
        type: integer
      length_commitment:
        $ref: '#/definitions/encoding.G2Commitment'
      length_proof:
        $ref: '#/definitions/encoding.LengthProof'
    type: object
  encoding.G1Commitment:
    properties:
      x:
        items:
          type: integer
        type: array
      "y":
        items:
          type: integer
        type: array
    type: object
  encoding.G2Commitment:
    properties:
      x:
        $ref: '#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2'
      "y":
        $ref: '#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2'
    type: object
  encoding.LengthProof:
    properties:
      x:
        $ref: '#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2'
      "y":
        $ref: '#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2'
    type: object
  github_com_Layr-Labs_eigenda_core_v2.Attestation:
    properties:
      apkg2:
        allOf:
        - $ref: '#/definitions/core.G2Point'
        description: APKG2 is the aggregate public key of all signers
      attestedAt:
        description: AttestedAt is the time the attestation was made
        type: integer
      batchRoot:
        description: BatchRoot is the root of a Merkle tree whose leaves are the keys
          of the blobs in the batch
        items:
          type: integer
        type: array
      nonSignerPubKeys:
        description: NonSignerPubKeys are the public keys of the operators that did
          not sign the blob
        items:
          $ref: '#/definitions/core.G1Point'
        type: array
      quorumAPKs:
        additionalProperties:
          $ref: '#/definitions/core.G1Point'
        description: QuorumAPKs is the aggregate public keys of all operators in each
          quorum
        type: object
      quorumNumbers:
        description: QuorumNumbers contains the quorums relevant for the attestation
        items:
          type: integer
        type: array
      quorumResults:
        additionalProperties:
          type: integer
        description: QuorumResults contains the results of the quorum verification
        type: object
      referenceBlockNumber:
        description: ReferenceBlockNumber is the block number at which all operator
          information (stakes, indexes, etc.) is taken from
        type: integer
      sigma:
        allOf:
        - $ref: '#/definitions/core.Signature'
        description: Sigma is the aggregate signature of all signers
    type: object
  github_com_Layr-Labs_eigenda_core_v2.BatchHeader:
    properties:
      batchRoot:
        description: BatchRoot is the root of a Merkle tree whose leaves are the keys
          of the blobs in the batch
        items:
          type: integer
        type: array
      referenceBlockNumber:
        description: ReferenceBlockNumber is the block number at which all operator
          information (stakes, indexes, etc.) is taken from
        type: integer
    type: object
  github_com_Layr-Labs_eigenda_core_v2.BlobCertificate:
    properties:
      blobHeader:
        $ref: '#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobHeader'
      relayKeys:
        description: RelayKeys
        items:
          type: integer
        type: array
    type: object
  github_com_Layr-Labs_eigenda_core_v2.BlobHeader:
    properties:
      blobCommitments:
        $ref: '#/definitions/encoding.BlobCommitments'
      blobVersion:
        type: integer
      paymentMetadata:
        allOf:
        - $ref: '#/definitions/core.PaymentMetadata'
        description: PaymentMetadata contains the payment information for the blob
      quorumNumbers:
        description: QuorumNumbers contains the quorums the blob is dispersed to
        items:
          type: integer
        type: array
      salt:
        description: Salt is used to make blob intentionally unique when everything
          else is the same
        type: integer
      signature:
        description: |-
          Signature is an ECDSA signature signed by the blob request signer's account ID over the BlobHeader's blobKey,
          which is a keccak hash of the serialized BlobHeader, and used to verify against blob dispersal request's account ID
        items:
          type: integer
        type: array
    type: object
  github_com_Layr-Labs_eigenda_core_v2.BlobVerificationInfo:
    properties:
      BlobKey:
        items:
          type: integer
        type: array
      batchRoot:
        description: BatchRoot is the root of a Merkle tree whose leaves are the keys
          of the blobs in the batch
        items:
          type: integer
        type: array
      blobIndex:
        type: integer
      inclusionProof:
        items:
          type: integer
        type: array
      referenceBlockNumber:
        description: ReferenceBlockNumber is the block number at which all operator
          information (stakes, indexes, etc.) is taken from
        type: integer
    type: object
  github_com_Layr-Labs_eigenda_disperser_common_v2.BlobStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - Queued
    - Encoded
    - Certified
    - Failed
    - InsufficientSignatures
  github_com_Layr-Labs_eigenda_disperser_dataapi_v2.SignedBatch:
    properties:
      attestation:
        $ref: '#/definitions/github_com_Layr-Labs_eigenda_core_v2.Attestation'
      batch_header:
        $ref: '#/definitions/github_com_Layr-Labs_eigenda_core_v2.BatchHeader'
    type: object
  github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2:
    properties:
      a0:
        items:
          type: integer
        type: array
      a1:
        items:
          type: integer
        type: array
    type: object
  semver.SemverMetrics:
    properties:
      count:
        type: integer
      operators:
        items:
          type: string
        type: array
      semver:
        type: string
      stake_percentage:
        additionalProperties:
          type: number
        type: object
    type: object
  v2.BatchFeedResponse:
    properties:
      batches:
        items:
          $ref: '#/definitions/v2.BatchInfo'
        type: array
    type: object
  v2.BatchInfo:
    properties:
      aggregated_signature:
        $ref: '#/definitions/core.Signature'
      attested_at:
        type: integer
      batch_header:
        $ref: '#/definitions/github_com_Layr-Labs_eigenda_core_v2.BatchHeader'
      batch_header_hash:
        type: string
      quorum_numbers:
        items:
          type: integer
        type: array
      quorum_signed_percentages:
        additionalProperties:
          type: integer
        type: object
    type: object
  v2.BatchResponse:
    properties:
      batch_header_hash:
        type: string
      blob_verification_infos:
        items:
          $ref: '#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobVerificationInfo'
        type: array
      signed_batch:
        $ref: '#/definitions/github_com_Layr-Labs_eigenda_disperser_dataapi_v2.SignedBatch'
    type: object
  v2.BlobCertificateResponse:
    properties:
      blob_certificate:
        $ref: '#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobCertificate'
    type: object
  v2.BlobFeedResponse:
    properties:
      blobs:
        items:
          $ref: '#/definitions/v2.BlobMetadata'
        type: array
      pagination_token:
        type: string
    type: object
  v2.BlobMetadata:
    properties:
      blobHeader:
        $ref: '#/definitions/core.BlobHeader'
      blobSize:
        description: BlobSize is the size of the blob in bytes
        type: integer
      blobStatus:
        allOf:
        - $ref: '#/definitions/github_com_Layr-Labs_eigenda_disperser_common_v2.BlobStatus'
        description: BlobStatus indicates the current status of the blob
      expiry:
        description: Expiry is Unix timestamp of the blob expiry in seconds from epoch
        type: integer
      fragmentSizeBytes:
        description: FragmentSizeBytes is the maximum fragment size used to store
          the chunk coefficients.
        type: integer
      numRetries:
        description: NumRetries is the number of times the blob has been retried
        type: integer
      requestedAt:
        description: RequestedAt is the Unix timestamp of when the blob was requested
          in seconds
        type: integer
      totalChunkSizeBytes:
        description: TotalChunkSizeBytes is the total size of the file containing
          all chunk coefficients for the blob.
        type: integer
      updatedAt:
        description: UpdatedAt is the Unix timestamp of when the blob was last updated
          in _nanoseconds_
        type: integer
    type: object
  v2.BlobResponse:
    properties:
      blob_header:
        $ref: '#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobHeader'
      blob_key:
        type: string
      blob_size_bytes:
        type: integer
      dispersed_at:
        type: integer
      status:
        type: string
    type: object
  v2.BlobVerificationInfoResponse:
    properties:
      blob_verification_info:
        $ref: '#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobVerificationInfo'
    type: object
  v2.DispersalResponse:
    properties:
      batchRoot:
        description: BatchRoot is the root of a Merkle tree whose leaves are the keys
          of the blobs in the batch
        items:
          type: integer
        type: array
      core.OperatorID:
        items:
          type: integer
        type: array
      dispersedAt:
        type: integer
      error:
        description: Error is the error message if the dispersal failed
        type: string
      operatorAddress:
        items:
          type: integer
        type: array
      referenceBlockNumber:
        description: ReferenceBlockNumber is the block number at which all operator
          information (stakes, indexes, etc.) is taken from
        type: integer
      respondedAt:
        type: integer
      signature:
        description: Signature is the signature of the response by the operator
        items:
          type: integer
        type: array
      socket:
        type: string
    type: object
  v2.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  v2.Metric:
    properties:
      cost_in_gas:
        type: number
      throughput:
        type: number
      total_stake:
        allOf:
        - $ref: '#/definitions/big.Int'
        description: 'deprecated: use TotalStakePerQuorum instead. Remove when the
          frontend is updated.'
      total_stake_per_quorum:
        additionalProperties:
          $ref: '#/definitions/big.Int'
        type: object
    type: object
  v2.OperatorDispersalResponses:
    properties:
      operator_dispersal_responses:
        items:
          $ref: '#/definitions/v2.DispersalResponse'
        type: array
    type: object
  v2.OperatorPortCheckResponse:
    properties:
      dispersal_online:
        type: boolean
      dispersal_socket:
        type: string
      dispersal_status:
        type: string
      operator_id:
        type: string
      retrieval_online:
        type: boolean
      retrieval_socket:
        type: string
      retrieval_status:
        type: string
      v2_dispersal_online:
        type: boolean
      v2_dispersal_socket:
        type: string
      v2_dispersal_status:
        type: string
    type: object
  v2.OperatorStake:
    properties:
      operator_id:
        type: string
      quorum_id:
        type: string
      rank:
        type: integer
      stake_percentage:
        type: number
    type: object
  v2.OperatorsStakeResponse:
    properties:
      stake_ranked_operators:
        additionalProperties:
          items:
            $ref: '#/definitions/v2.OperatorStake'
          type: array
        type: object
    type: object
  v2.SemverReportResponse:
    properties:
      semver:
        additionalProperties:
          $ref: '#/definitions/semver.SemverMetrics'
        type: object
    type: object
  v2.Throughput:
    properties:
      throughput:
        type: number
      timestamp:
        type: integer
    type: object
info:
  contact: {}
  description: This is the EigenDA Data Access API V2 server.
  title: EigenDA Data Access API V2
  version: "2.0"
paths:
  /batches/{batch_header_hash}:
    get:
      parameters:
      - description: Batch header hash in hex string
        in: path
        name: batch_header_hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.BatchResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch batch by the batch header hash
      tags:
      - Batch
  /batches/feed:
    get:
      parameters:
      - description: 'Fetch batches up to the end time (ISO 8601 format: 2006-01-02T15:04:05Z)
          [default: now]'
        in: query
        name: end
        type: string
      - description: 'Fetch batches starting from an interval (in seconds) before
          the end time [default: 3600]'
        in: query
        name: interval
        type: integer
      - description: 'The maximum number of batches to fetch. System max (1000) if
          limit <= 0 [default: 20; max: 1000]'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.BatchFeedResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch batch feed
      tags:
      - Blob
  /blobs/{blob_key}:
    get:
      parameters:
      - description: Blob key in hex string
        in: path
        name: blob_key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.BlobResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch blob metadata by blob key
      tags:
      - Blob
  /blobs/{blob_key}/certificate:
    get:
      parameters:
      - description: Blob key in hex string
        in: path
        name: blob_key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.BlobCertificateResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch blob certificate by blob key v2
      tags:
      - Blob
  /blobs/{blob_key}/verification-info:
    get:
      parameters:
      - description: Blob key in hex string
        in: path
        name: blob_key
        required: true
        type: string
      - description: Batch header hash in hex string
        in: path
        name: batch_header_hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.BlobVerificationInfoResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch blob verification info by blob key and batch header hash
      tags:
      - Blob
  /blobs/feed:
    get:
      parameters:
      - description: 'Fetch blobs up to the end time (ISO 8601 format: 2006-01-02T15:04:05Z)
          [default: now]'
        in: query
        name: end
        type: string
      - description: 'Fetch blobs starting from an interval (in seconds) before the
          end time [default: 3600]'
        in: query
        name: interval
        type: integer
      - description: 'Fetch blobs starting from the pagination token (exclusively).
          Overrides the interval param if specified [default: empty]'
        in: query
        name: pagination_token
        type: string
      - description: 'The maximum number of blobs to fetch. System max (1000) if limit
          <= 0 [default: 20; max: 1000]'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.BlobFeedResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch blob feed
      tags:
      - Blob
  /metrics/summary:
    get:
      parameters:
      - description: 'Start unix timestamp [default: 1 hour ago]'
        in: query
        name: start
        type: integer
      - description: 'End unix timestamp [default: unix time now]'
        in: query
        name: end
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Metric'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch metrics summary
      tags:
      - Metrics
  /metrics/timeseries/throughput:
    get:
      parameters:
      - description: 'Start unix timestamp [default: 1 hour ago]'
        in: query
        name: start
        type: integer
      - description: 'End unix timestamp [default: unix time now]'
        in: query
        name: end
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Throughput'
            type: array
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch throughput time series
      tags:
      - Metrics
  /operators/{batch_header_hash}:
    get:
      parameters:
      - description: Batch header hash in hex string
        in: path
        name: batch_header_hash
        required: true
        type: string
      - description: 'Operator ID in hex string [default: all operators if unspecified]'
        in: query
        name: operator_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.OperatorDispersalResponses'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Fetch operator attestation response for a batch
      tags:
      - Operators
  /operators/nodeinfo:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.SemverReportResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Active operator semver
      tags:
      - Operators
  /operators/reachability:
    get:
      parameters:
      - description: 'Operator ID in hex string [default: all operators if unspecified]'
        in: query
        name: operator_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.OperatorPortCheckResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Operator node reachability check
      tags:
      - Operators
  /operators/stake:
    get:
      parameters:
      - description: 'Operator ID in hex string [default: all operators if unspecified]'
        in: query
        name: operator_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.OperatorsStakeResponse'
        "400":
          description: 'error: Bad request'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: 'error: Not found'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: 'error: Server error'
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Operator stake distribution query
      tags:
      - Operators
schemes:
- https
- http
swagger: "2.0"
