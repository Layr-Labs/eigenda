{
    "schemes": [
        "https",
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the EigenDA Data Access API V2 server.",
        "title": "EigenDA Data Access API V2",
        "contact": {},
        "version": "2.0"
    },
    "basePath": "/api/v2",
    "paths": {
        "/batch/{batch_header_hash}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Fetch batch by the batch header hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Batch header hash in hex string",
                        "name": "batch_header_hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.BlobResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/blob/{blob_key}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feed"
                ],
                "summary": "Fetch blob metadata by blob key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blob key in hex string",
                        "name": "blob_key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.BlobResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators/nodeinfo": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operators"
                ],
                "summary": "Active operator semver",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.SemverReportResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators/reachability": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operators"
                ],
                "summary": "Operator node reachability check",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Operator ID in hex string [default: all operators if unspecified]",
                        "name": "operator_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.OperatorPortCheckResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/operators/stake": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operators"
                ],
                "summary": "Operator stake distribution query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Operator ID in hex string [default: all operators if unspecified]",
                        "name": "operator_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.OperatorsStakeResponse"
                        }
                    },
                    "400": {
                        "description": "error: Bad request",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "error: Not found",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "error: Server error",
                        "schema": {
                            "$ref": "#/definitions/v2.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "big.Int": {
            "type": "object"
        },
        "core.PaymentMetadata": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "AccountID is the ETH account address for the payer",
                    "type": "string"
                },
                "cumulative_payment": {
                    "description": "TODO: we are thinking the contract can use uint128 for cumulative payment,\nbut the definition on v2 uses uint64. Double check with team.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/big.Int"
                        }
                    ]
                },
                "reservation_period": {
                    "description": "ReservationPeriod represents the range of time at which the dispersal is made",
                    "type": "integer"
                },
                "salt": {
                    "description": "Allow same blob to be dispersed multiple times within the same reservation period",
                    "type": "integer"
                }
            }
        },
        "encoding.BlobCommitments": {
            "type": "object",
            "properties": {
                "commitment": {
                    "$ref": "#/definitions/encoding.G1Commitment"
                },
                "length": {
                    "type": "integer"
                },
                "length_commitment": {
                    "$ref": "#/definitions/encoding.G2Commitment"
                },
                "length_proof": {
                    "$ref": "#/definitions/encoding.LengthProof"
                }
            }
        },
        "encoding.G1Commitment": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "y": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "encoding.G2Commitment": {
            "type": "object",
            "properties": {
                "x": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                },
                "y": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                }
            }
        },
        "encoding.LengthProof": {
            "type": "object",
            "properties": {
                "x": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                },
                "y": {
                    "$ref": "#/definitions/github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2"
                }
            }
        },
        "github_com_Layr-Labs_eigenda_core_v2.BlobHeader": {
            "type": "object",
            "properties": {
                "blobCommitments": {
                    "$ref": "#/definitions/encoding.BlobCommitments"
                },
                "blobVersion": {
                    "type": "integer"
                },
                "paymentMetadata": {
                    "description": "PaymentMetadata contains the payment information for the blob",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.PaymentMetadata"
                        }
                    ]
                },
                "quorumNumbers": {
                    "description": "QuorumNumbers contains the quorums the blob is dispersed to",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signature": {
                    "description": "Signature is the signature of the blob header by the account ID",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "github_com_consensys_gnark-crypto_ecc_bn254_internal_fptower.E2": {
            "type": "object",
            "properties": {
                "a0": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "a1": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "semver.SemverMetrics": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "semver": {
                    "type": "string"
                },
                "stake_percentage": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "v2.BlobResponse": {
            "type": "object",
            "properties": {
                "blob_header": {
                    "$ref": "#/definitions/github_com_Layr-Labs_eigenda_core_v2.BlobHeader"
                },
                "blob_size_bytes": {
                    "type": "integer"
                },
                "dispersed_at": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "v2.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "v2.OperatorPortCheckResponse": {
            "type": "object",
            "properties": {
                "dispersal_online": {
                    "type": "boolean"
                },
                "dispersal_socket": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "string"
                },
                "retrieval_online": {
                    "type": "boolean"
                },
                "retrieval_socket": {
                    "type": "string"
                }
            }
        },
        "v2.OperatorStake": {
            "type": "object",
            "properties": {
                "operator_id": {
                    "type": "string"
                },
                "quorum_id": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer"
                },
                "stake_percentage": {
                    "type": "number"
                }
            }
        },
        "v2.OperatorsStakeResponse": {
            "type": "object",
            "properties": {
                "stake_ranked_operators": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/v2.OperatorStake"
                        }
                    }
                }
            }
        },
        "v2.SemverReportResponse": {
            "type": "object",
            "properties": {
                "semver": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/semver.SemverMetrics"
                    }
                }
            }
        }
    }
}