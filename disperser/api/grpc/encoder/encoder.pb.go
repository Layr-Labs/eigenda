// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: encoder/encoder.proto

package encoder

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChunkEncodingFormat int32

const (
	ChunkEncodingFormat_UNKNOWN ChunkEncodingFormat = 0
	ChunkEncodingFormat_GNARK   ChunkEncodingFormat = 1
	ChunkEncodingFormat_GOB     ChunkEncodingFormat = 2
)

// Enum value maps for ChunkEncodingFormat.
var (
	ChunkEncodingFormat_name = map[int32]string{
		0: "UNKNOWN",
		1: "GNARK",
		2: "GOB",
	}
	ChunkEncodingFormat_value = map[string]int32{
		"UNKNOWN": 0,
		"GNARK":   1,
		"GOB":     2,
	}
)

func (x ChunkEncodingFormat) Enum() *ChunkEncodingFormat {
	p := new(ChunkEncodingFormat)
	*p = x
	return p
}

func (x ChunkEncodingFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkEncodingFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_encoder_encoder_proto_enumTypes[0].Descriptor()
}

func (ChunkEncodingFormat) Type() protoreflect.EnumType {
	return &file_encoder_encoder_proto_enumTypes[0]
}

func (x ChunkEncodingFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkEncodingFormat.Descriptor instead.
func (ChunkEncodingFormat) EnumDescriptor() ([]byte, []int) {
	return file_encoder_encoder_proto_rawDescGZIP(), []int{0}
}

// BlobCommitments contains the blob's commitment, degree proof, and the actual degree
// DEPRECATED: use common.BlobCommitment instead
type BlobCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitment       []byte `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	LengthCommitment []byte `protobuf:"bytes,2,opt,name=length_commitment,json=lengthCommitment,proto3" json:"length_commitment,omitempty"`
	LengthProof      []byte `protobuf:"bytes,3,opt,name=length_proof,json=lengthProof,proto3" json:"length_proof,omitempty"`
	Length           uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *BlobCommitment) Reset() {
	*x = BlobCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoder_encoder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobCommitment) ProtoMessage() {}

func (x *BlobCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_encoder_encoder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobCommitment.ProtoReflect.Descriptor instead.
func (*BlobCommitment) Descriptor() ([]byte, []int) {
	return file_encoder_encoder_proto_rawDescGZIP(), []int{0}
}

func (x *BlobCommitment) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *BlobCommitment) GetLengthCommitment() []byte {
	if x != nil {
		return x.LengthCommitment
	}
	return nil
}

func (x *BlobCommitment) GetLengthProof() []byte {
	if x != nil {
		return x.LengthProof
	}
	return nil
}

func (x *BlobCommitment) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// Parameters needed by Encoder for encoding
type EncodingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkLength uint32 `protobuf:"varint,1,opt,name=chunk_length,json=chunkLength,proto3" json:"chunk_length,omitempty"`
	NumChunks   uint32 `protobuf:"varint,2,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
}

func (x *EncodingParams) Reset() {
	*x = EncodingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoder_encoder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodingParams) ProtoMessage() {}

func (x *EncodingParams) ProtoReflect() protoreflect.Message {
	mi := &file_encoder_encoder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodingParams.ProtoReflect.Descriptor instead.
func (*EncodingParams) Descriptor() ([]byte, []int) {
	return file_encoder_encoder_proto_rawDescGZIP(), []int{1}
}

func (x *EncodingParams) GetChunkLength() uint32 {
	if x != nil {
		return x.ChunkLength
	}
	return 0
}

func (x *EncodingParams) GetNumChunks() uint32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

// EncodeBlobRequest contains data and pre-computed encoding params provided to Encoder
type EncodeBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           []byte          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	EncodingParams *EncodingParams `protobuf:"bytes,2,opt,name=encoding_params,json=encodingParams,proto3" json:"encoding_params,omitempty"`
}

func (x *EncodeBlobRequest) Reset() {
	*x = EncodeBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoder_encoder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeBlobRequest) ProtoMessage() {}

func (x *EncodeBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encoder_encoder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeBlobRequest.ProtoReflect.Descriptor instead.
func (*EncodeBlobRequest) Descriptor() ([]byte, []int) {
	return file_encoder_encoder_proto_rawDescGZIP(), []int{2}
}

func (x *EncodeBlobRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EncodeBlobRequest) GetEncodingParams() *EncodingParams {
	if x != nil {
		return x.EncodingParams
	}
	return nil
}

// EncodeBlobReply returns all encoded chunks along with BlobCommitment for the same,
// where Chunk is the smallest unit that is distributed to DA nodes
type EncodeBlobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitment *BlobCommitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	Chunks     [][]byte        `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	// How the above chunks are encoded.
	ChunkEncodingFormat ChunkEncodingFormat `protobuf:"varint,3,opt,name=chunk_encoding_format,json=chunkEncodingFormat,proto3,enum=encoder.ChunkEncodingFormat" json:"chunk_encoding_format,omitempty"`
}

func (x *EncodeBlobReply) Reset() {
	*x = EncodeBlobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoder_encoder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeBlobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeBlobReply) ProtoMessage() {}

func (x *EncodeBlobReply) ProtoReflect() protoreflect.Message {
	mi := &file_encoder_encoder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeBlobReply.ProtoReflect.Descriptor instead.
func (*EncodeBlobReply) Descriptor() ([]byte, []int) {
	return file_encoder_encoder_proto_rawDescGZIP(), []int{3}
}

func (x *EncodeBlobReply) GetCommitment() *BlobCommitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *EncodeBlobReply) GetChunks() [][]byte {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *EncodeBlobReply) GetChunkEncodingFormat() ChunkEncodingFormat {
	if x != nil {
		return x.ChunkEncodingFormat
	}
	return ChunkEncodingFormat_UNKNOWN
}

var File_encoder_encoder_proto protoreflect.FileDescriptor

var file_encoder_encoder_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x22, 0x98, 0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x52, 0x0a, 0x0e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22,
	0x69, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0f, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12,
	0x50, 0x0a, 0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x13, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2a, 0x36, 0x0a, 0x13, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x4e, 0x41, 0x52, 0x4b, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x4f, 0x42, 0x10, 0x02, 0x32, 0x4f, 0x0a, 0x07, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x12, 0x1a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61,
	0x62, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_encoder_encoder_proto_rawDescOnce sync.Once
	file_encoder_encoder_proto_rawDescData = file_encoder_encoder_proto_rawDesc
)

func file_encoder_encoder_proto_rawDescGZIP() []byte {
	file_encoder_encoder_proto_rawDescOnce.Do(func() {
		file_encoder_encoder_proto_rawDescData = protoimpl.X.CompressGZIP(file_encoder_encoder_proto_rawDescData)
	})
	return file_encoder_encoder_proto_rawDescData
}

var file_encoder_encoder_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_encoder_encoder_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_encoder_encoder_proto_goTypes = []interface{}{
	(ChunkEncodingFormat)(0),  // 0: encoder.ChunkEncodingFormat
	(*BlobCommitment)(nil),    // 1: encoder.BlobCommitment
	(*EncodingParams)(nil),    // 2: encoder.EncodingParams
	(*EncodeBlobRequest)(nil), // 3: encoder.EncodeBlobRequest
	(*EncodeBlobReply)(nil),   // 4: encoder.EncodeBlobReply
}
var file_encoder_encoder_proto_depIdxs = []int32{
	2, // 0: encoder.EncodeBlobRequest.encoding_params:type_name -> encoder.EncodingParams
	1, // 1: encoder.EncodeBlobReply.commitment:type_name -> encoder.BlobCommitment
	0, // 2: encoder.EncodeBlobReply.chunk_encoding_format:type_name -> encoder.ChunkEncodingFormat
	3, // 3: encoder.Encoder.EncodeBlob:input_type -> encoder.EncodeBlobRequest
	4, // 4: encoder.Encoder.EncodeBlob:output_type -> encoder.EncodeBlobReply
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_encoder_encoder_proto_init() }
func file_encoder_encoder_proto_init() {
	if File_encoder_encoder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_encoder_encoder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoder_encoder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoder_encoder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoder_encoder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeBlobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_encoder_encoder_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_encoder_encoder_proto_goTypes,
		DependencyIndexes: file_encoder_encoder_proto_depIdxs,
		EnumInfos:         file_encoder_encoder_proto_enumTypes,
		MessageInfos:      file_encoder_encoder_proto_msgTypes,
	}.Build()
	File_encoder_encoder_proto = out.File
	file_encoder_encoder_proto_rawDesc = nil
	file_encoder_encoder_proto_goTypes = nil
	file_encoder_encoder_proto_depIdxs = nil
}
