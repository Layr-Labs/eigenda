// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: encoder/v2/encoder.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EncodeBlobRequest contains the reference to the blob to be encoded and the encoding parameters
// determined by the control plane.
type EncodeBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobKey        []byte          `protobuf:"bytes,1,opt,name=blob_key,json=blobKey,proto3" json:"blob_key,omitempty"`
	EncodingParams *EncodingParams `protobuf:"bytes,2,opt,name=encoding_params,json=encodingParams,proto3" json:"encoding_params,omitempty"`
}

func (x *EncodeBlobRequest) Reset() {
	*x = EncodeBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoder_v2_encoder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeBlobRequest) ProtoMessage() {}

func (x *EncodeBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encoder_v2_encoder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeBlobRequest.ProtoReflect.Descriptor instead.
func (*EncodeBlobRequest) Descriptor() ([]byte, []int) {
	return file_encoder_v2_encoder_proto_rawDescGZIP(), []int{0}
}

func (x *EncodeBlobRequest) GetBlobKey() []byte {
	if x != nil {
		return x.BlobKey
	}
	return nil
}

func (x *EncodeBlobRequest) GetEncodingParams() *EncodingParams {
	if x != nil {
		return x.EncodingParams
	}
	return nil
}

// EncodingParams specifies how the blob should be encoded into chunks
type EncodingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkLength uint64 `protobuf:"varint,1,opt,name=chunk_length,json=chunkLength,proto3" json:"chunk_length,omitempty"`
	NumChunks   uint64 `protobuf:"varint,2,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
}

func (x *EncodingParams) Reset() {
	*x = EncodingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoder_v2_encoder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodingParams) ProtoMessage() {}

func (x *EncodingParams) ProtoReflect() protoreflect.Message {
	mi := &file_encoder_v2_encoder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodingParams.ProtoReflect.Descriptor instead.
func (*EncodingParams) Descriptor() ([]byte, []int) {
	return file_encoder_v2_encoder_proto_rawDescGZIP(), []int{1}
}

func (x *EncodingParams) GetChunkLength() uint64 {
	if x != nil {
		return x.ChunkLength
	}
	return 0
}

func (x *EncodingParams) GetNumChunks() uint64 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

// FragmentInfo contains metadata about the encoded fragments
type FragmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalChunkSizeBytes uint32 `protobuf:"varint,1,opt,name=total_chunk_size_bytes,json=totalChunkSizeBytes,proto3" json:"total_chunk_size_bytes,omitempty"`
	FragmentSizeBytes   uint32 `protobuf:"varint,2,opt,name=fragment_size_bytes,json=fragmentSizeBytes,proto3" json:"fragment_size_bytes,omitempty"`
}

func (x *FragmentInfo) Reset() {
	*x = FragmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoder_v2_encoder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentInfo) ProtoMessage() {}

func (x *FragmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_encoder_v2_encoder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentInfo.ProtoReflect.Descriptor instead.
func (*FragmentInfo) Descriptor() ([]byte, []int) {
	return file_encoder_v2_encoder_proto_rawDescGZIP(), []int{2}
}

func (x *FragmentInfo) GetTotalChunkSizeBytes() uint32 {
	if x != nil {
		return x.TotalChunkSizeBytes
	}
	return 0
}

func (x *FragmentInfo) GetFragmentSizeBytes() uint32 {
	if x != nil {
		return x.FragmentSizeBytes
	}
	return 0
}

// EncodeBlobReply contains metadata about the encoded chunks
type EncodeBlobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FragmentInfo *FragmentInfo `protobuf:"bytes,1,opt,name=fragment_info,json=fragmentInfo,proto3" json:"fragment_info,omitempty"`
}

func (x *EncodeBlobReply) Reset() {
	*x = EncodeBlobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encoder_v2_encoder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeBlobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeBlobReply) ProtoMessage() {}

func (x *EncodeBlobReply) ProtoReflect() protoreflect.Message {
	mi := &file_encoder_v2_encoder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeBlobReply.ProtoReflect.Descriptor instead.
func (*EncodeBlobReply) Descriptor() ([]byte, []int) {
	return file_encoder_v2_encoder_proto_rawDescGZIP(), []int{3}
}

func (x *EncodeBlobReply) GetFragmentInfo() *FragmentInfo {
	if x != nil {
		return x.FragmentInfo
	}
	return nil
}

var File_encoder_v2_encoder_proto protoreflect.FileDescriptor

var file_encoder_v2_encoder_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x22, 0x73, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x52, 0x0a, 0x0e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22,
	0x73, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x55, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x12,
	0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x32, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72,
	0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x76,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_encoder_v2_encoder_proto_rawDescOnce sync.Once
	file_encoder_v2_encoder_proto_rawDescData = file_encoder_v2_encoder_proto_rawDesc
)

func file_encoder_v2_encoder_proto_rawDescGZIP() []byte {
	file_encoder_v2_encoder_proto_rawDescOnce.Do(func() {
		file_encoder_v2_encoder_proto_rawDescData = protoimpl.X.CompressGZIP(file_encoder_v2_encoder_proto_rawDescData)
	})
	return file_encoder_v2_encoder_proto_rawDescData
}

var file_encoder_v2_encoder_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_encoder_v2_encoder_proto_goTypes = []interface{}{
	(*EncodeBlobRequest)(nil), // 0: encoder.v2.EncodeBlobRequest
	(*EncodingParams)(nil),    // 1: encoder.v2.EncodingParams
	(*FragmentInfo)(nil),      // 2: encoder.v2.FragmentInfo
	(*EncodeBlobReply)(nil),   // 3: encoder.v2.EncodeBlobReply
}
var file_encoder_v2_encoder_proto_depIdxs = []int32{
	1, // 0: encoder.v2.EncodeBlobRequest.encoding_params:type_name -> encoder.v2.EncodingParams
	2, // 1: encoder.v2.EncodeBlobReply.fragment_info:type_name -> encoder.v2.FragmentInfo
	0, // 2: encoder.v2.Encoder.EncodeBlob:input_type -> encoder.v2.EncodeBlobRequest
	3, // 3: encoder.v2.Encoder.EncodeBlob:output_type -> encoder.v2.EncodeBlobReply
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_encoder_v2_encoder_proto_init() }
func file_encoder_v2_encoder_proto_init() {
	if File_encoder_v2_encoder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_encoder_v2_encoder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoder_v2_encoder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoder_v2_encoder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encoder_v2_encoder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeBlobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_encoder_v2_encoder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_encoder_v2_encoder_proto_goTypes,
		DependencyIndexes: file_encoder_v2_encoder_proto_depIdxs,
		MessageInfos:      file_encoder_v2_encoder_proto_msgTypes,
	}.Build()
	File_encoder_v2_encoder_proto = out.File
	file_encoder_v2_encoder_proto_rawDesc = nil
	file_encoder_v2_encoder_proto_goTypes = nil
	file_encoder_v2_encoder_proto_depIdxs = nil
}
