// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: encoder/encoder.proto

package encoder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Encoder_EncodeBlob_FullMethodName = "/encoder.Encoder/EncodeBlob"
)

// EncoderClient is the client API for Encoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncoderClient interface {
	EncodeBlob(ctx context.Context, in *EncodeBlobRequest, opts ...grpc.CallOption) (*EncodeBlobReply, error)
}

type encoderClient struct {
	cc grpc.ClientConnInterface
}

func NewEncoderClient(cc grpc.ClientConnInterface) EncoderClient {
	return &encoderClient{cc}
}

func (c *encoderClient) EncodeBlob(ctx context.Context, in *EncodeBlobRequest, opts ...grpc.CallOption) (*EncodeBlobReply, error) {
	out := new(EncodeBlobReply)
	err := c.cc.Invoke(ctx, Encoder_EncodeBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncoderServer is the server API for Encoder service.
// All implementations must embed UnimplementedEncoderServer
// for forward compatibility
type EncoderServer interface {
	EncodeBlob(context.Context, *EncodeBlobRequest) (*EncodeBlobReply, error)
	mustEmbedUnimplementedEncoderServer()
}

// UnimplementedEncoderServer must be embedded to have forward compatible implementations.
type UnimplementedEncoderServer struct {
}

func (UnimplementedEncoderServer) EncodeBlob(context.Context, *EncodeBlobRequest) (*EncodeBlobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeBlob not implemented")
}
func (UnimplementedEncoderServer) mustEmbedUnimplementedEncoderServer() {}

// UnsafeEncoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncoderServer will
// result in compilation errors.
type UnsafeEncoderServer interface {
	mustEmbedUnimplementedEncoderServer()
}

func RegisterEncoderServer(s grpc.ServiceRegistrar, srv EncoderServer) {
	s.RegisterService(&Encoder_ServiceDesc, srv)
}

func _Encoder_EncodeBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServer).EncodeBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encoder_EncodeBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServer).EncodeBlob(ctx, req.(*EncodeBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Encoder_ServiceDesc is the grpc.ServiceDesc for Encoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Encoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "encoder.Encoder",
	HandlerType: (*EncoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeBlob",
			Handler:    _Encoder_EncodeBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encoder/encoder.proto",
}

const (
	RSEncoder_RSEncodeBlob_FullMethodName = "/encoder.RSEncoder/RSEncodeBlob"
)

// RSEncoderClient is the client API for RSEncoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RSEncoderClient interface {
	RSEncodeBlob(ctx context.Context, in *EncodeBlobRequest, opts ...grpc.CallOption) (*RSEncodeBlobReply, error)
}

type rSEncoderClient struct {
	cc grpc.ClientConnInterface
}

func NewRSEncoderClient(cc grpc.ClientConnInterface) RSEncoderClient {
	return &rSEncoderClient{cc}
}

func (c *rSEncoderClient) RSEncodeBlob(ctx context.Context, in *EncodeBlobRequest, opts ...grpc.CallOption) (*RSEncodeBlobReply, error) {
	out := new(RSEncodeBlobReply)
	err := c.cc.Invoke(ctx, RSEncoder_RSEncodeBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RSEncoderServer is the server API for RSEncoder service.
// All implementations must embed UnimplementedRSEncoderServer
// for forward compatibility
type RSEncoderServer interface {
	RSEncodeBlob(context.Context, *EncodeBlobRequest) (*RSEncodeBlobReply, error)
	mustEmbedUnimplementedRSEncoderServer()
}

// UnimplementedRSEncoderServer must be embedded to have forward compatible implementations.
type UnimplementedRSEncoderServer struct {
}

func (UnimplementedRSEncoderServer) RSEncodeBlob(context.Context, *EncodeBlobRequest) (*RSEncodeBlobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RSEncodeBlob not implemented")
}
func (UnimplementedRSEncoderServer) mustEmbedUnimplementedRSEncoderServer() {}

// UnsafeRSEncoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RSEncoderServer will
// result in compilation errors.
type UnsafeRSEncoderServer interface {
	mustEmbedUnimplementedRSEncoderServer()
}

func RegisterRSEncoderServer(s grpc.ServiceRegistrar, srv RSEncoderServer) {
	s.RegisterService(&RSEncoder_ServiceDesc, srv)
}

func _RSEncoder_RSEncodeBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RSEncoderServer).RSEncodeBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RSEncoder_RSEncodeBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RSEncoderServer).RSEncodeBlob(ctx, req.(*EncodeBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RSEncoder_ServiceDesc is the grpc.ServiceDesc for RSEncoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RSEncoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "encoder.RSEncoder",
	HandlerType: (*RSEncoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RSEncodeBlob",
			Handler:    _RSEncoder_RSEncodeBlob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encoder/encoder.proto",
}

const (
	KZGProver_ComputeMultiFrameProof_FullMethodName = "/encoder.KZGProver/ComputeMultiFrameProof"
)

// KZGProverClient is the client API for KZGProver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KZGProverClient interface {
	ComputeMultiFrameProof(ctx context.Context, in *EncodeBlobRequest, opts ...grpc.CallOption) (*MultiProofReply, error)
}

type kZGProverClient struct {
	cc grpc.ClientConnInterface
}

func NewKZGProverClient(cc grpc.ClientConnInterface) KZGProverClient {
	return &kZGProverClient{cc}
}

func (c *kZGProverClient) ComputeMultiFrameProof(ctx context.Context, in *EncodeBlobRequest, opts ...grpc.CallOption) (*MultiProofReply, error) {
	out := new(MultiProofReply)
	err := c.cc.Invoke(ctx, KZGProver_ComputeMultiFrameProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KZGProverServer is the server API for KZGProver service.
// All implementations must embed UnimplementedKZGProverServer
// for forward compatibility
type KZGProverServer interface {
	ComputeMultiFrameProof(context.Context, *EncodeBlobRequest) (*MultiProofReply, error)
	mustEmbedUnimplementedKZGProverServer()
}

// UnimplementedKZGProverServer must be embedded to have forward compatible implementations.
type UnimplementedKZGProverServer struct {
}

func (UnimplementedKZGProverServer) ComputeMultiFrameProof(context.Context, *EncodeBlobRequest) (*MultiProofReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeMultiFrameProof not implemented")
}
func (UnimplementedKZGProverServer) mustEmbedUnimplementedKZGProverServer() {}

// UnsafeKZGProverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KZGProverServer will
// result in compilation errors.
type UnsafeKZGProverServer interface {
	mustEmbedUnimplementedKZGProverServer()
}

func RegisterKZGProverServer(s grpc.ServiceRegistrar, srv KZGProverServer) {
	s.RegisterService(&KZGProver_ServiceDesc, srv)
}

func _KZGProver_ComputeMultiFrameProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KZGProverServer).ComputeMultiFrameProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KZGProver_ComputeMultiFrameProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KZGProverServer).ComputeMultiFrameProof(ctx, req.(*EncodeBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KZGProver_ServiceDesc is the grpc.ServiceDesc for KZGProver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KZGProver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "encoder.KZGProver",
	HandlerType: (*KZGProverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeMultiFrameProof",
			Handler:    _KZGProver_ComputeMultiFrameProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encoder/encoder.proto",
}
