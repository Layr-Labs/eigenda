// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	context "context"

	"github.com/Layr-Labs/eigenda/core/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockRetrievalClient is an autogenerated mock type for the ValidatorClient type
type MockRetrievalClient struct {
	mock.Mock
}

type MockRetrievalClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRetrievalClient) EXPECT() *MockRetrievalClient_Expecter {
	return &MockRetrievalClient_Expecter{mock: &_m.Mock}
}

// GetBlob provides a mock function for the type MockRetrievalClient
func (_mock *MockRetrievalClient) GetBlob(ctx context.Context, blobHeader *v2.BlobHeaderWithHashedPayment, referenceBlockNumber uint64) ([]byte, error) {
	ret := _mock.Called(ctx, blobHeader, referenceBlockNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v2.BlobHeaderWithHashedPayment, uint64) ([]byte, error)); ok {
		return returnFunc(ctx, blobHeader, referenceBlockNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v2.BlobHeaderWithHashedPayment, uint64) []byte); ok {
		r0 = returnFunc(ctx, blobHeader, referenceBlockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v2.BlobHeaderWithHashedPayment, uint64) error); ok {
		r1 = returnFunc(ctx, blobHeader, referenceBlockNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRetrievalClient_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type MockRetrievalClient_GetBlob_Call struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
//   - ctx
//   - blobHeader
//   - referenceBlockNumber
func (_e *MockRetrievalClient_Expecter) GetBlob(ctx interface{}, blobHeader interface{}, referenceBlockNumber interface{}) *MockRetrievalClient_GetBlob_Call {
	return &MockRetrievalClient_GetBlob_Call{Call: _e.mock.On("GetBlob", ctx, blobHeader, referenceBlockNumber)}
}

func (_c *MockRetrievalClient_GetBlob_Call) Run(run func(ctx context.Context, blobHeader *v2.BlobHeaderWithHashedPayment, referenceBlockNumber uint64)) *MockRetrievalClient_GetBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.BlobHeaderWithHashedPayment), args[2].(uint64))
	})
	return _c
}

func (_c *MockRetrievalClient_GetBlob_Call) Return(bytes []byte, err error) *MockRetrievalClient_GetBlob_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockRetrievalClient_GetBlob_Call) RunAndReturn(run func(ctx context.Context, blobHeader *v2.BlobHeaderWithHashedPayment, referenceBlockNumber uint64) ([]byte, error)) *MockRetrievalClient_GetBlob_Call {
	_c.Call.Return(run)
	return _c
}
