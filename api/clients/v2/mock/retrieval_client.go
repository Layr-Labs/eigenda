// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock

import (
	"context"

	"github.com/Layr-Labs/eigenda/encoding"
	"github.com/stretchr/testify/mock"

	v2 "github.com/Layr-Labs/eigenda/core/v2"
)

// MockRetrievalClient is an autogenerated mock type for the MockRetrievalClient type
type MockRetrievalClient struct {
	mock.Mock
}

// GetBlob provides a mock function with given fields: ctx, blobKey, blobVersion, blobCommitments, referenceBlockNumber, quorumID
func (_m *MockRetrievalClient) GetBlob(ctx context.Context, blobKey v2.BlobKey, blobVersion uint16, blobCommitments encoding.BlobCommitments, referenceBlockNumber uint64, quorumID uint8) ([]byte, error) {
	ret := _m.Called(ctx, blobKey, blobVersion, blobCommitments, referenceBlockNumber, quorumID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v2.BlobKey, uint16, encoding.BlobCommitments, uint64, uint8) ([]byte, error)); ok {
		return rf(ctx, blobKey, blobVersion, blobCommitments, referenceBlockNumber, quorumID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v2.BlobKey, uint16, encoding.BlobCommitments, uint64, uint8) []byte); ok {
		r0 = rf(ctx, blobKey, blobVersion, blobCommitments, referenceBlockNumber, quorumID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v2.BlobKey, uint16, encoding.BlobCommitments, uint64, uint8) error); ok {
		r1 = rf(ctx, blobKey, blobVersion, blobCommitments, referenceBlockNumber, quorumID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRetrievalClient creates a new instance of MockRetrievalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRetrievalClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRetrievalClient {
	mock := &MockRetrievalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
