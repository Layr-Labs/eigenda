syntax = "proto3";
package disperser.v2;
import "common/common.proto";
import "common/v2/common_v2.proto";
option go_package = "github.com/Layr-Labs/eigenda/api/grpc/disperser/v2";

// WARNING: the following RPCs are experimental and subject to change.

// Disperser defines the public APIs for dispersing blobs.
service Disperser {
  // DisperseBlob accepts blob to disperse from clients.
  // This executes the dispersal asynchronously, i.e. it returns once the request
  // is accepted. The client could use GetBlobStatus() API to poll the the
  // processing status of the blob.
  rpc DisperseBlob(DisperseBlobRequest) returns (DisperseBlobReply) {}

  // GetBlobStatus is meant to be polled for the blob status.
  rpc GetBlobStatus(BlobStatusRequest) returns (BlobStatusReply) {}
  
  // GetBlobCommitment is a utility method that calculates commitment for a blob payload.
  // It is provided to help clients who are trying to construct a DisperseBlobRequest.blob_header
  // and don't have the ability to calculate the commitment themselves (expensive operation which requires SRS points).
  //
  // For an example usage, see how our disperser_client makes a call to this endpoint when it doesn't have a local prover:
  // https://github.com/Layr-Labs/eigenda/blob/6059c6a068298d11c41e50f5bcd208d0da44906a/api/clients/v2/disperser_client.go#L166
  rpc GetBlobCommitment(BlobCommitmentRequest) returns (BlobCommitmentReply) {}

  // GetPaymentState is a utility method to get the payment state of a given account, at a given disperser.
  // EigenDA's payment system for v2 is currently centralized, meaning that each disperser does its own accounting.
  // A client wanting to disperse a blob would thus need to synchronize its local accounting state with that of the disperser.
  // That typically only needs to be done once, and the state can be updated locally as the client disperses blobs.
  // The accounting rules are simple and can be updated locally, but periodic checks with the disperser can't hurt.
  //
  // For an example usage, see how our disperser_client makes a call to this endpoint to populate its local accountant struct:
  // https://github.com/Layr-Labs/eigenda/blob/6059c6a068298d11c41e50f5bcd208d0da44906a/api/clients/v2/disperser_client.go#L298
  rpc GetPaymentState(GetPaymentStateRequest) returns (GetPaymentStateReply) {}
}

// Requests and Replys

message DisperseBlobRequest {
  // The encoded data to be dispersed to the EigenDA network.
  //
  // Validation rules:
  //  1. The size of data must be <= 16MiB.
  //  2. The data is allowed to not be a multiple of 32 bytes: the last chunk will be padded with zeros to make it so.
  //  3. Every 32 bytes chunk (including the last after rule 2) must be a valid bid-endian serialized field element on the bn254 curve.
  //     The valid range for each 32 byte chunk is: 0 <= x < 21888242871839275222246405745257275088548364400416034343698204186575808495617
  // If rule 1 or 3 is violated, the whole request is deemed as invalid, and rejected.
  //
  // To encode your payload data into the correct blob format, you can make use of our codec:
  // https://github.com/Layr-Labs/eigenda/blob/82192985a2d15b88d85a6090404b2595f4922bef/api/clients/codecs/default_blob_codec.go#L21
  // Most users will not need to interact with this low level codec directly however, given that the high-level eigenda_client does the encoding for you:
  // https://github.com/Layr-Labs/eigenda/blob/master/api/clients/eigenda_client.go
  bytes data = 1;
  common.v2.BlobHeader blob_header = 2;
}

message DisperseBlobReply {
  // The status of the blob associated with the blob key.
  BlobStatus result = 1;
  bytes blob_key = 2;
}

// BlobStatusRequest is used to query the status of a blob.
message BlobStatusRequest {
  bytes blob_key = 1;
}

message BlobStatusReply {
  // The status of the blob.
  BlobStatus status = 1;
  // The signed batch
  SignedBatch signed_batch = 2;
  BlobVerificationInfo blob_verification_info = 3;
}

// Utility method used to generate the commitment of blob given its data.
// This can be used to construct BlobHeader.commitment
message BlobCommitmentRequest {
  bytes data = 1;
}

message BlobCommitmentReply {
  common.BlobCommitment blob_commitment = 1;
}

// GetPaymentStateRequest contains parameters to query the payment state of an account.
message GetPaymentStateRequest {
  string account_id = 1;
  // Signature over the account ID
  // TODO: sign over a reservation period or a nonce to mitigate signature replay attacks
  bytes signature = 2;
}

// GetPaymentStateReply contains the payment state of an account.
message GetPaymentStateReply {
  // global payment vault parameters
  PaymentGlobalParams payment_global_params = 1;
  // off-chain account reservation usage records
  repeated PeriodRecord period_records = 2;
  // on-chain account reservation setting
  Reservation reservation = 3;
  // off-chain on-demand payment usage
  bytes cumulative_payment = 4;
  // on-chain on-demand payment deposited
  bytes onchain_cumulative_payment = 5;
}

// Data Types

// BlobStatus represents the status of a blob.
// The status of a blob is updated as the blob is processed by the disperser.
// The status of a blob can be queried by the client using the GetBlobStatus API.
// Intermediate states are states that the blob can be in while being processed, and it can be updated to a differet state:
// - QUEUED
// - ENCODED
// Terminal states are states that will not be updated to a different state:
// - CERTIFIED
// - FAILED
// - INSUFFICIENT_SIGNATURES
enum BlobStatus {
  UNKNOWN = 0;

  // QUEUED means that the blob has been queued by the disperser for processing
  QUEUED = 1;

  // ENCODED means that the blob has been encoded and is ready to be dispersed to DA Nodes
  ENCODED = 2;

  // CERTIFIED means the blob has been dispersed and attested by the DA nodes
  CERTIFIED = 3;

  // FAILED means that the blob has failed permanently
  FAILED = 4;

  // INSUFFICIENT_SIGNATURES means that the blob has failed to gather sufficient attestation
  INSUFFICIENT_SIGNATURES = 5;
}

// SignedBatch is a batch of blobs with a signature.
message SignedBatch {
  // header contains metadata about the batch
  common.v2.BatchHeader header = 1;
  // attestation on the batch
  Attestation attestation = 2;
}

// BlobVerificationInfo is the information needed to verify the inclusion of a blob in a batch.
message BlobVerificationInfo {
  common.v2.BlobCertificate blob_certificate = 1;
  // blob_index is the index of the blob in the batch
  uint32 blob_index = 2;
  // inclusion_proof is the inclusion proof of the blob in the batch
  bytes inclusion_proof = 3;
}

message Attestation {
  // Serialized bytes of non signer public keys (G1 points)
  repeated bytes non_signer_pubkeys = 1;
  // Serialized bytes of G2 point that represents aggregate public key of all signers
  bytes apk_g2 = 2;
  // Serialized bytes of aggregate public keys (G1 points) from all nodes for each quorum
  // The order of the quorum_apks should match the order of the quorum_numbers
  repeated bytes quorum_apks = 3;
  // Serialized bytes of aggregate signature
  bytes sigma = 4;
  // Relevant quorum numbers for the attestation
  repeated uint32 quorum_numbers = 5;
  // The attestation rate for each quorum.
  // The order of the quorum_signed_percentages should match the order of the quorum_numbers
  bytes quorum_signed_percentages = 6;
}

message PaymentGlobalParams {
  uint64 global_symbols_per_second = 1;
  uint32 min_num_symbols = 2;
  uint32 price_per_symbol = 3;
  uint32 reservation_window = 4;
  repeated uint32 on_demand_quorum_numbers = 5;
}

message Reservation {
  uint64 symbols_per_second = 1;
  uint32 start_timestamp = 2;
  uint32 end_timestamp = 3;
  repeated uint32 quorum_numbers = 4;
  repeated uint32 quorum_splits = 5;
}

// PeriodRecord is the usage record of an account in a bin. The API should return the active bin 
// record and the subsequent two records that contains potential overflows.
message PeriodRecord {
  uint32 index = 1;
  uint64 usage = 2;
}
