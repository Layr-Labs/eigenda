syntax = "proto3";
package node;
import "common/v2/frame.proto";
option go_package = "github.com/Layr-Labs/eigenda/api/grpc/relay";

/////////////////////////////////////////////////////////////////////////////////////
// Experimental: the following definitions are experimental and subject to change. //
/////////////////////////////////////////////////////////////////////////////////////

// Relay is a service that provides access to public relay functionality.
service Relay {
  // GetBlob retrieves a blob stored by the relay.
  rpc GetBlob(GetBlobRequest) returns (GetBlobReply) {}

  // GetChunks retrieves chunks from blobs stored by the relay.
  rpc GetChunks(GetChunksRequest) returns (GetChunksReply) {}
}

// A request to fetch one or more blobs.
message GetBlobRequest {
  // The key of the blob to fetch.
  bytes blob_key = 1;
}

// The reply to a GetBlobs request.
message GetBlobReply {
  // The blob requested.
  bytes blob = 1;
}

// Request chunks from blobs stored by this relay.
message GetChunksRequest {
  // The chunk requests. Chunks are returned in the same order as they are requested.
  repeated ChunkRequest chunk_requests = 1;

  // If this is an authenticated request, this should hold the ID of the requester. If this
  // is an unauthenticated request, this field should be empty.
  uint64 requester_id = 2;

  // If this is an authenticated request, this field will hold a signature by the requester
  // on the chunks being requested.
  bytes requester_signature = 3;
}

// A request for chunks within a specific blob. Each chunk is requested individually by its index.
message ChunkRequestByIndex {
  // The blob key.
  bytes blob_key = 1;
  // The index of the chunk within the blob.
  repeated uint32 chunk_indices = 2;
}

// A request for chunks within a specific blob. Each chunk is requested a range of indices.
message ChunkRequestByRange {
  // The blob key.
  bytes blob_key = 1;
  // The first index to start fetching chunks from.
  uint32 start_index = 2;
  // One past the last index to fetch chunks from. Similar semantics to golang slices.
  uint32 end_index = 3;
}

// A request for chunks within a specific blob.
message ChunkRequest {
  oneof request {
    // Request chunks by their individual indices.
    ChunkRequestByIndex by_index = 1;
    // Request chunks by a range of indices.
    ChunkRequestByRange by_range = 2;
  }
}

// The reply to a GetChunks request.
message GetChunksReply {
  // The chunks requested. The order of these chunks will be the same as the order of the requested chunks.
  repeated Chunks data = 1;
}

// The chunks requested. If this request is in response to a request by index, the order of these chunks will be the
//  same as the order of the requested indices. If this request is in response to a request by range, the first chunk
//  will correspond to the first index requested, and so on.
message Chunks {
  repeated common.v2.Frame data = 1;
}

// An error that occurred while trying to fetch a blob or chunks.
message RelayError {
  // The error code that occurred while trying to fetch a blob or chunks.
  RelayErrorCode error_code = 1;
  // A message explaining the error that occurred.
  string message = 2;
}

// The error codes that can occur while trying to fetch a blob or chunks.
enum RelayErrorCode {
  // This relay does not know about the requested blob or the requested blob is assigned to a different relay.
  UNKNOWN_BLOB = 0;
  // The relay is too busy to handle the request.
  BUSY = 1;
  // An internal relay error occurred while trying to fetch the blob.
  INTERNAL_ERROR = 2;
}