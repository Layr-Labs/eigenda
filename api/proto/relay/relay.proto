syntax = "proto3";
package node;
option go_package = "github.com/Layr-Labs/eigenda/api/grpc/relay";

/////////////////////////////////////////////////////////////////////////////////////
// Experimental: the following definitions are experimental and subject to change. //
/////////////////////////////////////////////////////////////////////////////////////

// Relay is a service that provides access to public relay functionality.
service Relay {
  // GetBlob retrieves a blob stored by the relay.
  rpc GetBlob(GetBlobRequest) returns (GetBlobReply) {}

  // GetChunks retrieves chunks from blobs stored by the relay.
  rpc GetChunks(GetChunksRequest) returns (GetChunksReply) {}
}

// A request to fetch one or more blobs.
message GetBlobRequest {
  // The key of the blob to fetch.
  bytes blob_key = 1;
}

// The reply to a GetBlobs request.
message GetBlobReply {
  // The blob requested.
  bytes blob = 1;
}

// Request chunks from blobs stored by this relay.
message GetChunksRequest {
  // The chunk requests. Chunks are returned in the same order as they are requested.
  repeated ChunkRequest chunk_requests = 1;

  // If this is an authenticated request, this should hold the ID of the operator. If this
  // is an unauthenticated request, this field should be empty. Relays may choose to reject
  // unauthenticated requests.
  bytes operator_id = 2;

  // If this is an authenticated request, this field will hold a BLS signature by the requester
  // on the hash of this request. Relays may choose to reject unauthenticated requests.
  //
  // The following describes the schema for computing the hash of this request
  // This algorithm is implemented in golang using relay.auth.HashGetChunksRequest().
  //
  // All integers are encoded as unsigned 4 byte big endian values.
  //
  // Perform a keccak256 hash on the following data in the following order:
  // 1. the operator id
  // 2. for each chunk request:
  //    a. if the chunk request is a request by index:
  //       i.   a one byte ASCII representation of the character "i" (aka Ox69)
  //       ii.  the blob key
  //       iii. the start index
  //       iv.  the end index
  //    b. if the chunk request is a request by range:
  //       i.   a one byte ASCII representation of the character "r" (aka Ox72)
  //       ii.  the blob key
  //       iii. each requested chunk index, in order
  bytes operator_signature = 3;
}

// A request for chunks within a specific blob. Each chunk is requested individually by its index.
message ChunkRequestByIndex {
  // The blob key.
  bytes blob_key = 1;
  // The index of the chunk within the blob.
  repeated uint32 chunk_indices = 2;
}

// A request for chunks within a specific blob. Each chunk is requested a range of indices.
message ChunkRequestByRange {
  // The blob key.
  bytes blob_key = 1;
  // The first index to start fetching chunks from.
  uint32 start_index = 2;
  // One past the last index to fetch chunks from. Similar semantics to golang slices.
  uint32 end_index = 3;
}

// A request for chunks within a specific blob. Requests are fulfilled in all-or-nothing fashion. If any of the
// requested chunks are not found or are unable to be fetched, the entire request will fail.
message ChunkRequest {
  oneof request {
    // Request chunks by their individual indices.
    ChunkRequestByIndex by_index = 1;
    // Request chunks by a range of indices.
    ChunkRequestByRange by_range = 2;
  }
}

// The reply to a GetChunks request.
message GetChunksReply {
  // The chunks requested. The order of these chunks will be the same as the order of the requested chunks.
  // data is the raw data of the bundle (i.e. serialized byte array of the frames)
  repeated bytes data = 1;
}
