syntax = "proto3";
package common.v2;

import "common/common.proto";

option go_package = "github.com/Layr-Labs/eigenda/api/grpc/common/v2";

// BlobHeader contains the information describing a blob and the way it is to be dispersed.
message BlobHeader {
  // The BlobParams version to use when encoding the blob into chunks to be dispersed to operators.
  //
  // BlobParams versions are pushed onchain to the EigenDAThresholdRegistry by EigenDA governance in an append only fashion
  // and store the maximum number of operators, number of chunks, and coding rate for a blob.
  //
  // A user can choose any of the onchain defined VersionedBlobParams, and must make sure to choose SecurityThresholds in its CertVerifier contract
  // that along with the chosen VersionedBlobParams satisfy the checkSecurityParams function: https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/periphery/cert/libraries/EigenDACertVerificationLib.sol#L188
  // This function is called internally by the CertVerifier's checkDACert function.
  //
  // If a version that is not available on the ThresholdRegistry is chosen, the disperser will return an error.
  //
  // EigenDA maintained:
  //   VersionedBlobParams definition: https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/core/libraries/v1/EigenDATypesV1.sol#L7
  //   IEigenDAThresholdRegistry (stores the BlobParams): https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/core/interfaces/IEigenDAThresholdRegistry.sol
  //   EigenDAServiceManager address (implements IEigenDAThresholdRegistry): https://docs.eigenda.xyz/networks/mainnet#contract-addresses
  // Rollup maintained:
  //   SecurityThresholds interface: https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/periphery/cert/interfaces/IEigenDACertVerifier.sol#L23
  //   checkDACert interface: https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/periphery/cert/interfaces/IEigenDACertVerifierBase.sol#L8
  uint32 version = 1;
  // quorum_numbers is the list of quorum numbers that the blob shall be dispersed to.
  // Each quorum will store the data independently, meaning that additional quorum numbers increase redundancy, making the blob more likely to be retrievable.
  // Each quorum requires separate payment.
  //
  // On-demand bandwidth dispersals do not currently support custom quorums and hence are limited to dispersing to one or two of the following quorums only:
  // - 0: ETH
  // - 1: EIGEN
  //
  // Reserved-bandwidth dispersal do support custom quorums, as long as they are reserved onchain ahead of time. The quorum_numbers specified here must be a subset of the ones allowed by the on-chain reservation.
  // Users can check their reserved quorum numbers on the IPaymentVault's reservation struct: https://github.com/Layr-Labs/eigenda/blob/1430d56258b4e814b388e497320fd76354bfb478/contracts/src/interfaces/IPaymentVault.sol#L10
  repeated uint32 quorum_numbers = 2;
  // commitment is the KZG commitment to the blob.
  // This commitment can either be constructed locally, or obtained by using the disperser's GetBlobCommitment RPC (see disperser_v2.proto).
  common.BlobCommitment commitment = 3;
  // payment_header contains payment information for the blob
  PaymentHeader payment_header = 4;
}

// BlobCertificate contains a full description of a blob and how it is dispersed. Part of the certificate
// is provided by the blob submitter (i.e. the blob header), and part is provided by the disperser (i.e. the relays).
// Validator nodes eventually sign the blob certificate once they are in custody of the required chunks
// (note that the signature is indirect; validators sign the hash of a Batch, which contains the blob certificate).
message BlobCertificate {
  // blob_header contains data about the blob.
  BlobHeader blob_header = 1;
  // signature is an ECDSA signature signed by the blob request signer's account ID over the BlobHeader's blobKey,
  // which is a keccak hash of the serialized BlobHeader, and used to verify against blob dispersal request's account ID
  bytes signature = 2;
  // relay_keys is the list of relay keys that are in custody of the blob.
  // The relays custodying the data are chosen by the Disperser to which the DisperseBlob request was submitted.
  // It needs to contain at least 1 relay number.
  // To retrieve a blob from the relay, one can find that relay's URL in the EigenDARelayRegistry contract:
  // https://github.com/Layr-Labs/eigenda/blob/master/contracts/src/core/EigenDARelayRegistry.sol
  repeated uint32 relay_keys = 3;
}

// BatchHeader is the header of a batch of blobs
message BatchHeader {
  // batch_root is the root of the merkle tree of the hashes of blob certificates in the batch
  bytes batch_root = 1;
  // reference_block_number is the block number that the state of the batch is based on for attestation
  uint64 reference_block_number = 2;
}

// Batch is a batch of blob certificates
message Batch {
  // header contains metadata about the batch
  BatchHeader header = 1;
  // blob_certificates is the list of blob certificates in the batch
  repeated BlobCertificate blob_certificates = 2;
}

// PaymentHeader contains payment information for a blob, which is crucial for validating and processing dispersal requests.
// The PaymentHeader is designed to support two distinct payment methods within the EigenDA protocol:
//
// 1. Reservation-based payment system:
//    This system allows users to reserve bandwidth in advance for a specified time period. It's designed for
//    users who need predictable throughput with a fixed ratelimit bin in required or custom quorums.
//    Under this method, the user pre-arranges a reservation with specific parameters on the desired quorums:
//    - symbolsPerSecond: The rate at which they can disperse data
//    - startTimestamp and endTimestamp: The timeframe during which the reservation is active
//
// 2. On-demand payment system:
//    This is a pay-as-you-go model where users deposit funds into the PaymentVault contract and
//    payments are deducted as they make dispersal requests. This system is more flexible but has
//    more restrictions on which quorums can be used (currently limited to quorums 0 and 1).
//
// The disperser client always attempts to use a reservation-based payment first if one exists for the account.
// If no valid reservation exists or if the reservation doesn't have enough remaining bandwidth,
// the client will fall back to on-demand payment, provided the user has deposited sufficient funds
// in the PaymentVault contract.
//
// The distinction between these two payment methods is made by examining:
// - For reservation-based: The timestamp must be within an active reservation period, and cumulative_payment is zero or empty
// - For on-demand: The cumulative_payment field contains a non-zero value representing the total payment for all dispersals
//
// Every dispersal request is metered based on the size of the data being dispersed, rounded up to the
// nearest multiple of the minNumSymbols parameter defined in the PaymentVault contract. The size is calculated as:
// symbols_charged = ceiling(blob_size / minNumSymbols) * minNumSymbols
// On-demand payments take a step further by calculating the specific cost
// cost = symbols_charged * price_per_symbol
//
// Security and Authentication:
// The payment header is protected by a cryptographic signature that covers the entire BlobHeader.
// This signature is verified during request processing to ensure that:
// 1. The request is genuinely from the holder of the private key corresponding to account_id
// 2. The payment information hasn't been tampered with
// 3. The same request isn't being resubmitted (replay protection)
//
// This signature verification happens in core/auth/v2/authenticator.go where:
// - The BlobKey (a hash of the serialized BlobHeader) is computed
// - The signature is verified against this key
// - The recovered public key is checked against the account_id in the payment header
//
// Once a payment has been processed and the signature verified, the disperser server will not
// roll back the payment or usage records, even if subsequent processing fails. This design choice
// prevents double-spending and ensures payment integrity.
message PaymentHeader {
  // The account ID of the disperser client, represented as an Ethereum wallet address in hex format
  // (e.g., "0x1234...abcd"). This field is critical for both payment methods as it:
  //
  // 1. Identifies whose reservation to check for reservation-based payments
  // 2. Identifies whose on-chain deposit balance to check for on-demand payments
  // 3. Provides the address against which the BlobHeader signature is verified
  //
  // The account_id has special significance in the authentication flow:
  // - When a client signs a BlobHeader, they use their private key
  // - The disperser server recovers the public key from this signature
  // - The recovered public key is converted to an Ethereum address
  // - This derived address must exactly match the account_id in this field
  //
  // This verification process (implemented in core/auth/v2/authenticator.go's AuthenticateBlobRequest method)
  // ensures that only the legitimate owner of the account can submit dispersal requests charged to that account.
  // It prevents unauthorized payments or impersonation attacks where someone might try to use another
  // user's reservation or on-chain balance.
  //
  // The account_id is typically set by the client's Accountant when constructing the PaymentMetadata
  // (see api/clients/v2/accountant.go - AccountBlob method).
  string account_id = 1;

  // The timestamp represents the UNIX timestamp in nanoseconds at the time the dispersal
  // request is created. This high-precision timestamp serves multiple critical functions in the protocol:
  //
  // For reservation-based payments:
  // 1. Reservation Period Determination:
  //    The timestamp is used to calculate which reservation period the request belongs to using the formula:
  //    reservation_period = floor(timestamp_ns / (reservationPeriodInterval_s * 1e9)) * reservationPeriodInterval_s
  //    where reservationPeriodInterval_s is in seconds, and the result is in seconds.
  //
  // 2. Reservation Validity Check:
  //    The timestamp must fall within an active reservation window:
  //    - It must be >= the reservation's startTimestamp (in seconds)
  //    - It must be < the reservation's endTimestamp (in seconds)
  //
  // 3. Period Window Check:
  //    The server validates that the request's reservation period is either:
  //    - The current period (based on server time)
  //    - The immediately previous period
  //    This prevents requests with future timestamps or very old timestamps.
  //
  // 4. Rate Limiting:
  //    The server uses the timestamp to allocate the request to the appropriate rate-limiting bucket.
  //    Each reservation period has a fixed bandwidth limit (symbolsPerSecond * reservationPeriodInterval).
  //
  // For on-demand payments:
  // 1. Replay Protection:
  //    The timestamp helps ensure each request is unique and prevent replay attacks.
  //
  // 2. Global Ratelimiting (TO BE IMPLEMENTED):
  //    Treating all on-demand requests as an user-agnostic more frequent reservation, timestamp is checked
  //    against the OnDemandSymbolsPerSecond and OnDemandPeriodInterval.
  //
  // The timestamp is typically acquired by calling time.Now().UnixNano() in Go and accounted for NTP offsets
  // by periodically syncing with a configuratble NTP server endpoint. The client's Accountant component
  // (api/clients/v2/accountant.go) expects the caller to provide this timestamp, which it then
  // uses to determine the correct reservation period and check bandwidth availability.
  int64 timestamp = 2;

  // The cumulative_payment field is a serialized uint256 big integer representing the total amount of tokens
  // paid by the requesting account across all their dispersal requests, including the current one. The unit is in wei.
  // This field is exclusively used for on-demand payments and should be zero or empty for reservation-based payments.
  // If this field is zero or empty, disperser server's meterer will treat this request as reservation-based.
  // For the current implementation, the choice of quorum doesn't affect the payment calculations. A client may
  // choose to use any or all of the required quorums.
  //
  // Detailed Payment Mechanics:
  // 1. Cumulative Design:
  //    Rather than sending incremental payment amounts, the protocol uses a cumulative approach where
  //    each request states the total amount paid by the account so far. This design:
  //    - Prevents double-spending even with concurrent requests
  //    - Simplifies verification logic
  //    - Requests are enforced by a strictly increasing order
  //
  // 2. Calculation Formula:
  //    For a new dispersal request, the cumulative_payment is calculated as:
  //    new_cumulative = previous_cumulative + (symbols_charged * price_per_symbol)
  //
  //    Where:
  //    - previous_cumulative: The highest cumulative payment value from previous dispersals
  //    - symbols_charged: The blob size rounded up to the nearest multiple of minNumSymbols
  //    - price_per_symbol: The cost per symbol set in the PaymentVault contract
  //
  // 3. Validation Process:
  //    When the disperser receives a request with a cumulative_payment, it performs multiple validations:
  //    - Checks that the on-chain deposit balance in the PaymentVault is sufficient to cover this payment
  //    - Verifies the cumulative_payment is greater than the highest previous payment from this account
  //    - Verifies the increase from the previous cumulative payment is appropriate for the blob size
  //    - If other requests from the same account are currently processing, ensures this new cumulative
  //      value is consistent with those (preventing double-spending)
  //
  // 4. On-chain Implementation:
  //    The PaymentVault contract maintains:
  //    - A deposit balance for each account
  //    - Global parameters including minNumSymbols, GlobalSymbolsPerSecond and pricePerSymbol
  // Due to the use of cumulative payments, if a client loses track of their current cumulative payment value,
  // they can query the disperser server for their current payment state using the GetPaymentState RPC.
  bytes cumulative_payment = 3;
}
