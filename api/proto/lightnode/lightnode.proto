syntax = "proto3";
package lightnode;
import "common/common.proto";
option go_package = "github.com/Layr-Labs/eigenda/api/grpc/lightnode";

/////////////////////////////////////////////////////////////////////////////////////
// Experimental: the following definitions are experimental and subject to change. //
/////////////////////////////////////////////////////////////////////////////////////

service LightNode {
	// StreamBlobAvailability streams the availability status blobs from the light node's perspective.
	// A light node considers a blob to be available if all chunks it wants to sample are available.
	// This API is for use by a DA node for monitoring the availability of chunks through its
	// constellation of agent light nodes.
	rpc StreamBlobAvailability(StreamChunkAvailabilityRequest) returns (stream StreamChunkAvailabilityReply) {}
}

// A request from a DA node to an agent light node to stream the availability status of all chunks
// assigned to the light node.
message StreamChunkAvailabilityRequest {
	bytes authentication_token = 1;
}

// A reply to a StreamAvailabilityStatus request.
message StreamChunkAvailabilityReply {
	// The hash of a blob header corresponding to a chunk the agent received and verified. From the light node's
	// perspective, the blob is available if all chunks the light node wants to sample are available.
	bytes header_hash = 1;
}