syntax = "proto3";
package controller;

import "common/v2/common_v2.proto";

option go_package = "github.com/Layr-Labs/eigenda/api/grpc/controller";

// ControllerService defines the APIs for the controller.
//
// Currently, this API is only intended for *internal* consumption: this is a way for different parts of the disperser
// to communicate with each other
service ControllerService {
  // AuthorizePayment handles payment authorization for blob dispersal
  //
  // This is intended to be called by API server instances that are handling dispersal requests. The controller
  // is responsible for accounting and metering for the dispersal.
  rpc AuthorizePayment(AuthorizePaymentRequest) returns (AuthorizePaymentResponse) {}
}

// Contains all information necessary for the controller to evaluate the validity of a dispersal payment
message AuthorizePaymentRequest {
  // The blob header is used for the following purposes:
  // 1. Contains the PaymentHeader, which describes the payment being offered
  // 2. Contains the quorums being dispersed to
  common.v2.BlobHeader blob_header = 1;

  // Client's ECDSA signature over the blob header's blobKey (keccak hash of the blob header).
  // This signature can be verified against the account ID in the payment header.
  bytes client_signature = 2;
}

// AuthorizePaymentResponse is returned after the controller does accounting and metering.
//
// A GRPC error indicates that there was a problem with the payment authorization. No error means everything succeeded.
message AuthorizePaymentResponse {
  // TODO(litt3): We should document the potential errors that could be returned.
}
