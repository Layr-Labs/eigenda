## The following is a proxy instance 
## pointed to S3 for storage failovers

services:
  ## Used as secondary read failover target
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data
    volumes:
      - minio_data:/data

  minio-init:
    ## Seed test bucket
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-c", "/usr/bin/create-bucket.sh"]
    volumes:
      - ./scripts/create-test-s3-bucket.sh:/usr/bin/create-bucket.sh

  eigenda_proxy:
    depends_on:
      - minio-init
    build:
      context: ../..
      dockerfile: api/proxy/Dockerfile
    container_name: eigenda-proxy
    environment:
      - EIGENDA_PROXY_LOG_LEVEL=debug
      - EIGENDA_PROXY_ADDR=0.0.0.0
      - EIGENDA_PROXY_PORT=4242
      - EIGENDA_PROXY_APIS_TO_ENABLE=op-generic,standard,metrics
      - EIGENDA_PROXY_METRICS_ADDR=0.0.0.0
      - EIGENDA_PROXY_METRICS_PORT=7300

      ## Storage Configuration
      - EIGENDA_PROXY_STORAGE_BACKENDS_TO_ENABLE=V2
      - EIGENDA_PROXY_STORAGE_DISPERSAL_BACKEND=V2

      ## Memstore (for testing, turn off to use actual eigenda network)
      ## NOTE: When memstore is enabled, traces will NOT work because memstore
      ## bypasses the real V2 clients that have tracing instrumentation.
      - EIGENDA_PROXY_MEMSTORE_ENABLED=false
      - EIGENDA_PROXY_MEMSTORE_EXPIRATION=45m

      ## V2 Configuration
      - EIGENDA_PROXY_EIGENDA_V2_SIGNER_PRIVATE_KEY_HEX=${PRIVATE_KEY}
      - EIGENDA_PROXY_EIGENDA_V2_ETH_RPC=${HOODI_RPC_URL}
      - EIGENDA_PROXY_EIGENDA_V2_NETWORK=hoodi_testnet
      - EIGENDA_PROXY_EIGENDA_V2_MAX_BLOB_LENGTH=16MiB
      - EIGENDA_PROXY_EIGENDA_V2_CERT_VERIFIER_ROUTER_OR_IMMUTABLE_VERIFIER_ADDR=0xe0F78542A950A8695f43B19Ad1Db654249e12643
      - EIGENDA_PROXY_EIGENDA_V2_RBN_RECENCY_WINDOW_SIZE=0
      
      ## S3
      - EIGENDA_PROXY_S3_CREDENTIAL_TYPE=static
      - EIGENDA_PROXY_S3_ACCESS_KEY_ID=minioadmin
      - EIGENDA_PROXY_S3_ACCESS_KEY_SECRET=minioadmin
      - EIGENDA_PROXY_S3_BUCKET=eigenda-proxy-test
      - EIGENDA_PROXY_S3_PATH=""
      - EIGENDA_PROXY_S3_ENDPOINT=minio:9000
      - EIGENDA_PROXY_S3_ENABLE_TLS=false

      ## Secondary routing
      - EIGENDA_PROXY_STORAGE_FALLBACK_TARGETS=s3

      ## OpenTelemetry Tracing
      - EIGENDA_PROXY_OTEL_ENABLED=true
      - EIGENDA_PROXY_OTEL_SERVICE_NAME=eigenda-proxy
      - EIGENDA_PROXY_OTEL_EXPORTER_OTLP_ENDPOINT=tempo:4318
      - EIGENDA_PROXY_OTEL_EXPORTER_OTLP_INSECURE=true
      - EIGENDA_PROXY_OTEL_TRACE_SAMPLE_RATE=1.0

    ports:
      - 4242:4242
      - 7300:7300

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./monitor/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    ports:
      - "3200:3200"   # tempo http
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitor/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - ./monitor/grafana/provisioning/:/etc/grafana/provisioning/:ro
      - ./monitor/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - tempo

volumes:
  grafana-data:
  tempo-data:
  minio_data: