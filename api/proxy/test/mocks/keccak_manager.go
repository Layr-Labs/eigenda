// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigenda/api/proxy/store (interfaces: IKeccakManager)
//
// Generated by this command:
//
//	mockgen -package mocks --destination ../test/mocks/keccak_manager.go . IKeccakManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIKeccakManager is a mock of IKeccakManager interface.
type MockIKeccakManager struct {
	ctrl     *gomock.Controller
	recorder *MockIKeccakManagerMockRecorder
	isgomock struct{}
}

// MockIKeccakManagerMockRecorder is the mock recorder for MockIKeccakManager.
type MockIKeccakManagerMockRecorder struct {
	mock *MockIKeccakManager
}

// NewMockIKeccakManager creates a new mock instance.
func NewMockIKeccakManager(ctrl *gomock.Controller) *MockIKeccakManager {
	mock := &MockIKeccakManager{ctrl: ctrl}
	mock.recorder = &MockIKeccakManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeccakManager) EXPECT() *MockIKeccakManagerMockRecorder {
	return m.recorder
}

// GetOPKeccakValueFromS3 mocks base method.
func (m *MockIKeccakManager) GetOPKeccakValueFromS3(ctx context.Context, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOPKeccakValueFromS3", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOPKeccakValueFromS3 indicates an expected call of GetOPKeccakValueFromS3.
func (mr *MockIKeccakManagerMockRecorder) GetOPKeccakValueFromS3(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOPKeccakValueFromS3", reflect.TypeOf((*MockIKeccakManager)(nil).GetOPKeccakValueFromS3), ctx, key)
}

// PutOPKeccakPairInS3 mocks base method.
func (m *MockIKeccakManager) PutOPKeccakPairInS3(ctx context.Context, key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOPKeccakPairInS3", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutOPKeccakPairInS3 indicates an expected call of PutOPKeccakPairInS3.
func (mr *MockIKeccakManagerMockRecorder) PutOPKeccakPairInS3(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOPKeccakPairInS3", reflect.TypeOf((*MockIKeccakManager)(nil).PutOPKeccakPairInS3), ctx, key, value)
}
