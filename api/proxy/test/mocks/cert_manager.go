// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigenda/api/proxy/store (interfaces: ICertManager)
//
// Generated by this command:
//
//	mockgen -package mocks --destination ../test/mocks/cert_manager.go . ICertManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/Layr-Labs/eigenda/api/proxy/common"
	certs "github.com/Layr-Labs/eigenda/api/proxy/common/types/certs"
	gomock "go.uber.org/mock/gomock"
)

// MockICertManager is a mock of ICertManager interface.
type MockICertManager struct {
	ctrl     *gomock.Controller
	recorder *MockICertManagerMockRecorder
	isgomock struct{}
}

// MockICertManagerMockRecorder is the mock recorder for MockICertManager.
type MockICertManagerMockRecorder struct {
	mock *MockICertManager
}

// NewMockICertManager creates a new mock instance.
func NewMockICertManager(ctrl *gomock.Controller) *MockICertManager {
	mock := &MockICertManager{ctrl: ctrl}
	mock.recorder = &MockICertManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICertManager) EXPECT() *MockICertManagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockICertManager) Get(ctx context.Context, versionedCert certs.VersionedCert, opts common.GETOpts) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, versionedCert, opts)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICertManagerMockRecorder) Get(ctx, versionedCert, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICertManager)(nil).Get), ctx, versionedCert, opts)
}

// GetDispersalBackend mocks base method.
func (m *MockICertManager) GetDispersalBackend() common.EigenDABackend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDispersalBackend")
	ret0, _ := ret[0].(common.EigenDABackend)
	return ret0
}

// GetDispersalBackend indicates an expected call of GetDispersalBackend.
func (mr *MockICertManagerMockRecorder) GetDispersalBackend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDispersalBackend", reflect.TypeOf((*MockICertManager)(nil).GetDispersalBackend))
}

// Put mocks base method.
func (m *MockICertManager) Put(ctx context.Context, value []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, value)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockICertManagerMockRecorder) Put(ctx, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockICertManager)(nil).Put), ctx, value)
}

// SetDispersalBackend mocks base method.
func (m *MockICertManager) SetDispersalBackend(backend common.EigenDABackend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDispersalBackend", backend)
}

// SetDispersalBackend indicates an expected call of SetDispersalBackend.
func (mr *MockICertManagerMockRecorder) SetDispersalBackend(backend any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDispersalBackend", reflect.TypeOf((*MockICertManager)(nil).SetDispersalBackend), backend)
}
