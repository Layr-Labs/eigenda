// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: validator/node_v2.proto

package validator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dispersal_StoreChunks_FullMethodName = "/validator.Dispersal/StoreChunks"
	Dispersal_GetNodeInfo_FullMethodName = "/validator.Dispersal/GetNodeInfo"
)

// DispersalClient is the client API for Dispersal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispersalClient interface {
	// StoreChunks instructs the validator to store a batch of chunks. This call blocks until the validator
	// either acquires the chunks or the validator determines that it is unable to acquire the chunks. If
	// the validator is able to acquire and validate the chunks, it returns a signature over the batch header.
	// This RPC describes which chunks the validator should store but does not contain that chunk data. The validator
	// is expected to fetch the chunk data from one of the relays that is in possession of the chunk.
	StoreChunks(ctx context.Context, in *StoreChunksRequest, opts ...grpc.CallOption) (*StoreChunksReply, error)
	// GetNodeInfo fetches metadata about the node.
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoReply, error)
}

type dispersalClient struct {
	cc grpc.ClientConnInterface
}

func NewDispersalClient(cc grpc.ClientConnInterface) DispersalClient {
	return &dispersalClient{cc}
}

func (c *dispersalClient) StoreChunks(ctx context.Context, in *StoreChunksRequest, opts ...grpc.CallOption) (*StoreChunksReply, error) {
	out := new(StoreChunksReply)
	err := c.cc.Invoke(ctx, Dispersal_StoreChunks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispersalClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoReply, error) {
	out := new(GetNodeInfoReply)
	err := c.cc.Invoke(ctx, Dispersal_GetNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispersalServer is the server API for Dispersal service.
// All implementations must embed UnimplementedDispersalServer
// for forward compatibility
type DispersalServer interface {
	// StoreChunks instructs the validator to store a batch of chunks. This call blocks until the validator
	// either acquires the chunks or the validator determines that it is unable to acquire the chunks. If
	// the validator is able to acquire and validate the chunks, it returns a signature over the batch header.
	// This RPC describes which chunks the validator should store but does not contain that chunk data. The validator
	// is expected to fetch the chunk data from one of the relays that is in possession of the chunk.
	StoreChunks(context.Context, *StoreChunksRequest) (*StoreChunksReply, error)
	// GetNodeInfo fetches metadata about the node.
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoReply, error)
	mustEmbedUnimplementedDispersalServer()
}

// UnimplementedDispersalServer must be embedded to have forward compatible implementations.
type UnimplementedDispersalServer struct {
}

func (UnimplementedDispersalServer) StoreChunks(context.Context, *StoreChunksRequest) (*StoreChunksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChunks not implemented")
}
func (UnimplementedDispersalServer) GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedDispersalServer) mustEmbedUnimplementedDispersalServer() {}

// UnsafeDispersalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispersalServer will
// result in compilation errors.
type UnsafeDispersalServer interface {
	mustEmbedUnimplementedDispersalServer()
}

func RegisterDispersalServer(s grpc.ServiceRegistrar, srv DispersalServer) {
	s.RegisterService(&Dispersal_ServiceDesc, srv)
}

func _Dispersal_StoreChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispersalServer).StoreChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispersal_StoreChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispersalServer).StoreChunks(ctx, req.(*StoreChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispersal_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispersalServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispersal_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispersalServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dispersal_ServiceDesc is the grpc.ServiceDesc for Dispersal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dispersal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "validator.Dispersal",
	HandlerType: (*DispersalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreChunks",
			Handler:    _Dispersal_StoreChunks_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _Dispersal_GetNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validator/node_v2.proto",
}

const (
	Retrieval_GetChunks_FullMethodName   = "/validator.Retrieval/GetChunks"
	Retrieval_GetNodeInfo_FullMethodName = "/validator.Retrieval/GetNodeInfo"
)

// RetrievalClient is the client API for Retrieval service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RetrievalClient interface {
	// GetChunks retrieves the chunks for a blob custodied at the Node. Note that where possible, it is generally
	// faster to retrieve chunks from the relay service if that service is available.
	GetChunks(ctx context.Context, in *GetChunksRequest, opts ...grpc.CallOption) (*GetChunksReply, error)
	// Retrieve node info metadata
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoReply, error)
}

type retrievalClient struct {
	cc grpc.ClientConnInterface
}

func NewRetrievalClient(cc grpc.ClientConnInterface) RetrievalClient {
	return &retrievalClient{cc}
}

func (c *retrievalClient) GetChunks(ctx context.Context, in *GetChunksRequest, opts ...grpc.CallOption) (*GetChunksReply, error) {
	out := new(GetChunksReply)
	err := c.cc.Invoke(ctx, Retrieval_GetChunks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retrievalClient) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...grpc.CallOption) (*GetNodeInfoReply, error) {
	out := new(GetNodeInfoReply)
	err := c.cc.Invoke(ctx, Retrieval_GetNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RetrievalServer is the server API for Retrieval service.
// All implementations must embed UnimplementedRetrievalServer
// for forward compatibility
type RetrievalServer interface {
	// GetChunks retrieves the chunks for a blob custodied at the Node. Note that where possible, it is generally
	// faster to retrieve chunks from the relay service if that service is available.
	GetChunks(context.Context, *GetChunksRequest) (*GetChunksReply, error)
	// Retrieve node info metadata
	GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoReply, error)
	mustEmbedUnimplementedRetrievalServer()
}

// UnimplementedRetrievalServer must be embedded to have forward compatible implementations.
type UnimplementedRetrievalServer struct {
}

func (UnimplementedRetrievalServer) GetChunks(context.Context, *GetChunksRequest) (*GetChunksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunks not implemented")
}
func (UnimplementedRetrievalServer) GetNodeInfo(context.Context, *GetNodeInfoRequest) (*GetNodeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedRetrievalServer) mustEmbedUnimplementedRetrievalServer() {}

// UnsafeRetrievalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RetrievalServer will
// result in compilation errors.
type UnsafeRetrievalServer interface {
	mustEmbedUnimplementedRetrievalServer()
}

func RegisterRetrievalServer(s grpc.ServiceRegistrar, srv RetrievalServer) {
	s.RegisterService(&Retrieval_ServiceDesc, srv)
}

func _Retrieval_GetChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).GetChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_GetChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).GetChunks(ctx, req.(*GetChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Retrieval_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetrievalServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Retrieval_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetrievalServer).GetNodeInfo(ctx, req.(*GetNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Retrieval_ServiceDesc is the grpc.ServiceDesc for Retrieval service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Retrieval_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "validator.Retrieval",
	HandlerType: (*RetrievalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChunks",
			Handler:    _Retrieval_GetChunks_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _Retrieval_GetNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validator/node_v2.proto",
}
