// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: common/v2/common_v2.proto

package v2

import (
	common "github.com/Layr-Labs/eigenda/api/grpc/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlobHeader contains the information describing a blob and the way it is to be dispersed.
type BlobHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The BlobParams version to use when encoding the blob into chunks to be dispersed to operators.
	//
	// BlobParams versions are pushed onchain to the EigenDAThresholdRegistry by EigenDA governance in an append only fashion
	// and store the maximum number of operators, number of chunks, and coding rate for a blob.
	//
	// A user can choose any of the onchain defined VersionedBlobParams, and must make sure to choose SecurityThresholds in its CertVerifier contract
	// that along with the chosen VersionedBlobParams satisfy the checkSecurityParams function: https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/periphery/cert/libraries/EigenDACertVerificationLib.sol#L188
	// This function is called internally by the CertVerifier's checkDACert function.
	//
	// If a version that is not available on the ThresholdRegistry is chosen, the disperser will return an error.
	//
	// EigenDA maintained:
	//
	//	VersionedBlobParams definition: https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/core/libraries/v1/EigenDATypesV1.sol#L7
	//	IEigenDAThresholdRegistry (stores the BlobParams): https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/core/interfaces/IEigenDAThresholdRegistry.sol
	//	EigenDAServiceManager address (implements IEigenDAThresholdRegistry): https://docs.eigenda.xyz/networks/mainnet#contract-addresses
	//
	// Rollup maintained:
	//
	//	SecurityThresholds interface: https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/periphery/cert/interfaces/IEigenDACertVerifier.sol#L23
	//	checkDACert interface: https://github.com/Layr-Labs/eigenda/blob/3e670ff3dbd3a0a3f63b51e40544f528ac923b78/contracts/src/periphery/cert/interfaces/IEigenDACertVerifierBase.sol#L8
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// quorum_numbers is the list of quorum numbers that the blob shall be dispersed to.
	// Each quorum will store the data independently, meaning that additional quorum numbers increase redundancy, making the blob more likely to be retrievable.
	// Each quorum requires separate payment.
	//
	// On-demand bandwidth dispersals do not currently support custom quorums and hence are limited to dispersing to one or two of the following quorums only:
	// - 0: ETH
	// - 1: EIGEN
	//
	// Reserved-bandwidth dispersal do support custom quorums, as long as they are reserved onchain ahead of time. The quorum_numbers specified here must be a subset of the ones allowed by the on-chain reservation.
	// Users can check their reserved quorum numbers on the IPaymentVault's reservation struct: https://github.com/Layr-Labs/eigenda/blob/1430d56258b4e814b388e497320fd76354bfb478/contracts/src/interfaces/IPaymentVault.sol#L10
	QuorumNumbers []uint32 `protobuf:"varint,2,rep,packed,name=quorum_numbers,json=quorumNumbers,proto3" json:"quorum_numbers,omitempty"`
	// commitment is the KZG commitment to the blob.
	// This commitment can either be constructed locally, or obtained by using the disperser's GetBlobCommitment RPC (see disperser_v2.proto).
	Commitment *common.BlobCommitment `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// payment_header contains payment information for the blob
	PaymentHeader *PaymentHeader `protobuf:"bytes,4,opt,name=payment_header,json=paymentHeader,proto3" json:"payment_header,omitempty"`
}

func (x *BlobHeader) Reset() {
	*x = BlobHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v2_common_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobHeader) ProtoMessage() {}

func (x *BlobHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_v2_common_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobHeader.ProtoReflect.Descriptor instead.
func (*BlobHeader) Descriptor() ([]byte, []int) {
	return file_common_v2_common_v2_proto_rawDescGZIP(), []int{0}
}

func (x *BlobHeader) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlobHeader) GetQuorumNumbers() []uint32 {
	if x != nil {
		return x.QuorumNumbers
	}
	return nil
}

func (x *BlobHeader) GetCommitment() *common.BlobCommitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *BlobHeader) GetPaymentHeader() *PaymentHeader {
	if x != nil {
		return x.PaymentHeader
	}
	return nil
}

// BlobCertificate contains a full description of a blob and how it is dispersed. Part of the certificate
// is provided by the blob submitter (i.e. the blob header), and part is provided by the disperser (i.e. the relays).
// Validator nodes eventually sign the blob certificate once they are in custody of the required chunks
// (note that the signature is indirect; validators sign the hash of a Batch, which contains the blob certificate).
type BlobCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blob_header contains data about the blob.
	BlobHeader *BlobHeader `protobuf:"bytes,1,opt,name=blob_header,json=blobHeader,proto3" json:"blob_header,omitempty"`
	// signature is an ECDSA signature signed by the blob request signer's account ID over the BlobHeader's blobKey,
	// which is a keccak hash of the serialized BlobHeader, and used to verify against blob dispersal request's account ID
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// relay_keys is the list of relay keys that are in custody of the blob.
	// The relays custodying the data are chosen by the Disperser to which the DisperseBlob request was submitted.
	// It needs to contain at least 1 relay number.
	// To retrieve a blob from the relay, one can find that relay's URL in the EigenDARelayRegistry contract:
	// https://github.com/Layr-Labs/eigenda/blob/master/contracts/src/core/EigenDARelayRegistry.sol
	RelayKeys []uint32 `protobuf:"varint,3,rep,packed,name=relay_keys,json=relayKeys,proto3" json:"relay_keys,omitempty"`
}

func (x *BlobCertificate) Reset() {
	*x = BlobCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v2_common_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobCertificate) ProtoMessage() {}

func (x *BlobCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_common_v2_common_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobCertificate.ProtoReflect.Descriptor instead.
func (*BlobCertificate) Descriptor() ([]byte, []int) {
	return file_common_v2_common_v2_proto_rawDescGZIP(), []int{1}
}

func (x *BlobCertificate) GetBlobHeader() *BlobHeader {
	if x != nil {
		return x.BlobHeader
	}
	return nil
}

func (x *BlobCertificate) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *BlobCertificate) GetRelayKeys() []uint32 {
	if x != nil {
		return x.RelayKeys
	}
	return nil
}

// BatchHeader is the header of a batch of blobs
type BatchHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// batch_root is the root of the merkle tree of the hashes of blob certificates in the batch
	BatchRoot []byte `protobuf:"bytes,1,opt,name=batch_root,json=batchRoot,proto3" json:"batch_root,omitempty"`
	// reference_block_number is the block number that the state of the batch is based on for attestation
	ReferenceBlockNumber uint64 `protobuf:"varint,2,opt,name=reference_block_number,json=referenceBlockNumber,proto3" json:"reference_block_number,omitempty"`
}

func (x *BatchHeader) Reset() {
	*x = BatchHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v2_common_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchHeader) ProtoMessage() {}

func (x *BatchHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_v2_common_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchHeader.ProtoReflect.Descriptor instead.
func (*BatchHeader) Descriptor() ([]byte, []int) {
	return file_common_v2_common_v2_proto_rawDescGZIP(), []int{2}
}

func (x *BatchHeader) GetBatchRoot() []byte {
	if x != nil {
		return x.BatchRoot
	}
	return nil
}

func (x *BatchHeader) GetReferenceBlockNumber() uint64 {
	if x != nil {
		return x.ReferenceBlockNumber
	}
	return 0
}

// Batch is a batch of blob certificates
type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header contains metadata about the batch
	Header *BatchHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// blob_certificates is the list of blob certificates in the batch
	BlobCertificates []*BlobCertificate `protobuf:"bytes,2,rep,name=blob_certificates,json=blobCertificates,proto3" json:"blob_certificates,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v2_common_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_common_v2_common_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_common_v2_common_v2_proto_rawDescGZIP(), []int{3}
}

func (x *Batch) GetHeader() *BatchHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Batch) GetBlobCertificates() []*BlobCertificate {
	if x != nil {
		return x.BlobCertificates
	}
	return nil
}

// PaymentHeader contains payment information for a blob. Reservation parameters and on-demand deposits are tracked
// on-chain in the PaymentVault contract:
// https://github.com/Layr-Labs/eigenda/blob/master/contracts/src/core/PaymentVault.sol
//
// Two payment methods are supported:
// 1. Reservation:
//   - Users reserve bandwidth in advance for a specified time period.
//   - Reservations are procured out-of-band, and are set in the PaymentVault by the EigenFoundation.
//
// 2. On-demand:
//   - Users pay for each dispersal individually from funds deposited into the PaymentVault, by specifying a
//     cumulative payment.
//   - On-demand payments are limited to quorums 0 and 1.
//   - On-demand payments can only be used when dispersing through the EigenDA disperser. Currently, the EigenDA
//     disperser is the *only* disperser, but this restriction will remain in place even with decentralized dispersal.
//
// For payment calculations, dispersals have a minimum size of minNumSymbols, defined in the PaymentVault. Smaller blobs
// are billed as `minNumSymbols`.
//
// The cost of an on-demand dispersal is calculated by multiplying the number of blob symbols by the pricePerSymbol
// defined in the PaymentVault.
//
// Note: the quorum set being dispersed to has no impact on payment accounting with the current implementation.
//
// TODO(litt3): the current payment usage source-of-truth is the EigenDA disperser: reservation usage and latest
// cumulative payment is persistently stored there. Once decentralized dispersal has been implemented, the validator
// nodes will become the source-of-truth for reservation usage, but the EigenDA disperser will remain the
// source-of-truth for on-demand usage.
//
// TODO(litt3): once accounting logic has been properly abstracted, put a link here to provide specific documentation of
// how payments are processed.
type PaymentHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account ID of the dispersing user, represented as an Ethereum wallet address in hex format (0x prefix optional)
	//
	// This is the unique key which identifies the reservation to use, or the on-demand payment account to debit.
	//
	// The account ID must correspond to the key used to sign the dispersal request for the payment to be valid.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The timestamp represents the nanosecond UNIX timestamp at the time the dispersal request is created.
	//
	// The timestamp plays the role of a nonce, optionally allowing the same blob data to be dispersed multiple times
	// while still having a unique blob header hash (which is used as an idempotency key).
	//
	// When dealing with reservations, the timestamp determines which reservation bucket the dispersal falls into.
	// TODO(litt3): there is an ongoing effort to use a leaky bucket algorithm instead of a fixed window algorithm to
	// track reservation usage. The timestamp is currently used for the fixed window algorithm, but will not be part of
	// the leaky bucket algorithm. Even after this change, the timestamp should still be populated.
	//
	// The timestamp is currently unused in the context of on-demand payments, but this is subject to change without
	// notice! Failure to populate this with a proper timestamp could result in failed dispersals and loss of associated
	// payments.
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The cumulative_payment field is a variable-sized big endian unsigned integer, representing the total wei paid by
	// the account for this and all previous dispersals.
	// TODO(litt3): we ought to limit the max size of this field to 32 bytes (256-bit unsigned int), but this isn't
	// currently being checked. This will be fixed during the ongoing accounting reimplementation.
	//
	// For example, assume a new user begins dispersing blobs with on-demand payments, and each blob costs 100 wei. For
	// the first dispersed blob, the cumulative_payment would be set to 100. For the second, 200. Then 300, and so on.
	//
	// If this field is *not* set, or is zero, reservation accounting will be used. If this field *is* set, and non-zero,
	// on-demand accounting will be used EVEN IF a given account has a reservation. There is no fallback between these
	// payment mechanisms: the dispersal will either succeed or fail on the basis of the implicitly defined payment
	// mechanism, regardless of whether the alternate mechanism would have succeeded.
	//
	// Since the cumulative payment covers all historical on-demand dispersals, a client starting up must obtain the
	// value of the latest cumulative payment for its account via the GetPaymentState disperser RPC.
	//
	// IMPORTANT: With the current implementation, the cumulative payment of dispersals must be strictly increasing from
	// the perspective of the entity doing the accounting. If a given cumulative payment X is <= the cumulative payment
	// of a previous dispersal, then X is considered to be invalid. The implication is that a user must not behave in any
	// way that could result in payments being processed out of order, or risk dispersals failing without refund. In
	// practice, that means waiting for confirmation from the disperser that a blob has been received before submitting
	// the next blob.
	// TODO(litt3): to weaken this requirement, the accounting logic would need to be modified, such that up to `n`
	// recent on-demand payments are tracked, allowing for safe dispersal of up to `n` concurrent on-demand blobs.
	CumulativePayment []byte `protobuf:"bytes,3,opt,name=cumulative_payment,json=cumulativePayment,proto3" json:"cumulative_payment,omitempty"`
}

func (x *PaymentHeader) Reset() {
	*x = PaymentHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v2_common_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentHeader) ProtoMessage() {}

func (x *PaymentHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_v2_common_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentHeader.ProtoReflect.Descriptor instead.
func (*PaymentHeader) Descriptor() ([]byte, []int) {
	return file_common_v2_common_v2_proto_rawDescGZIP(), []int{4}
}

func (x *PaymentHeader) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PaymentHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PaymentHeader) GetCumulativePayment() []byte {
	if x != nil {
		return x.CumulativePayment
	}
	return nil
}

var File_common_v2_common_v2_proto protoreflect.FileDescriptor

var file_common_v2_common_v2_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x0a,
	0x42, 0x6c, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x62, 0x0a,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x80, 0x01, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x64,
	0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_v2_common_v2_proto_rawDescOnce sync.Once
	file_common_v2_common_v2_proto_rawDescData = file_common_v2_common_v2_proto_rawDesc
)

func file_common_v2_common_v2_proto_rawDescGZIP() []byte {
	file_common_v2_common_v2_proto_rawDescOnce.Do(func() {
		file_common_v2_common_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v2_common_v2_proto_rawDescData)
	})
	return file_common_v2_common_v2_proto_rawDescData
}

var file_common_v2_common_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_common_v2_common_v2_proto_goTypes = []interface{}{
	(*BlobHeader)(nil),            // 0: common.v2.BlobHeader
	(*BlobCertificate)(nil),       // 1: common.v2.BlobCertificate
	(*BatchHeader)(nil),           // 2: common.v2.BatchHeader
	(*Batch)(nil),                 // 3: common.v2.Batch
	(*PaymentHeader)(nil),         // 4: common.v2.PaymentHeader
	(*common.BlobCommitment)(nil), // 5: common.BlobCommitment
}
var file_common_v2_common_v2_proto_depIdxs = []int32{
	5, // 0: common.v2.BlobHeader.commitment:type_name -> common.BlobCommitment
	4, // 1: common.v2.BlobHeader.payment_header:type_name -> common.v2.PaymentHeader
	0, // 2: common.v2.BlobCertificate.blob_header:type_name -> common.v2.BlobHeader
	2, // 3: common.v2.Batch.header:type_name -> common.v2.BatchHeader
	1, // 4: common.v2.Batch.blob_certificates:type_name -> common.v2.BlobCertificate
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_common_v2_common_v2_proto_init() }
func file_common_v2_common_v2_proto_init() {
	if File_common_v2_common_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_v2_common_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v2_common_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v2_common_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v2_common_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v2_common_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v2_common_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v2_common_v2_proto_goTypes,
		DependencyIndexes: file_common_v2_common_v2_proto_depIdxs,
		MessageInfos:      file_common_v2_common_v2_proto_msgTypes,
	}.Build()
	File_common_v2_common_v2_proto = out.File
	file_common_v2_common_v2_proto_rawDesc = nil
	file_common_v2_common_v2_proto_goTypes = nil
	file_common_v2_common_v2_proto_depIdxs = nil
}
