// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: relay/relay.proto

package relay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrivateRelay_UploadBlobs_FullMethodName = "/node.PrivateRelay/UploadBlobs"
)

// PrivateRelayClient is the client API for PrivateRelay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateRelayClient interface {
	// UploadBlobs uploads blobs and encoded blob chunks to the relay.
	UploadBlobs(ctx context.Context, in *UploadBlobsRequest, opts ...grpc.CallOption) (*UploadBlobsReply, error)
}

type privateRelayClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateRelayClient(cc grpc.ClientConnInterface) PrivateRelayClient {
	return &privateRelayClient{cc}
}

func (c *privateRelayClient) UploadBlobs(ctx context.Context, in *UploadBlobsRequest, opts ...grpc.CallOption) (*UploadBlobsReply, error) {
	out := new(UploadBlobsReply)
	err := c.cc.Invoke(ctx, PrivateRelay_UploadBlobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateRelayServer is the server API for PrivateRelay service.
// All implementations must embed UnimplementedPrivateRelayServer
// for forward compatibility
type PrivateRelayServer interface {
	// UploadBlobs uploads blobs and encoded blob chunks to the relay.
	UploadBlobs(context.Context, *UploadBlobsRequest) (*UploadBlobsReply, error)
	mustEmbedUnimplementedPrivateRelayServer()
}

// UnimplementedPrivateRelayServer must be embedded to have forward compatible implementations.
type UnimplementedPrivateRelayServer struct {
}

func (UnimplementedPrivateRelayServer) UploadBlobs(context.Context, *UploadBlobsRequest) (*UploadBlobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBlobs not implemented")
}
func (UnimplementedPrivateRelayServer) mustEmbedUnimplementedPrivateRelayServer() {}

// UnsafePrivateRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateRelayServer will
// result in compilation errors.
type UnsafePrivateRelayServer interface {
	mustEmbedUnimplementedPrivateRelayServer()
}

func RegisterPrivateRelayServer(s grpc.ServiceRegistrar, srv PrivateRelayServer) {
	s.RegisterService(&PrivateRelay_ServiceDesc, srv)
}

func _PrivateRelay_UploadBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateRelayServer).UploadBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateRelay_UploadBlobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateRelayServer).UploadBlobs(ctx, req.(*UploadBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateRelay_ServiceDesc is the grpc.ServiceDesc for PrivateRelay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateRelay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.PrivateRelay",
	HandlerType: (*PrivateRelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadBlobs",
			Handler:    _PrivateRelay_UploadBlobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/relay.proto",
}

const (
	Relay_GetBlobs_FullMethodName  = "/node.Relay/GetBlobs"
	Relay_GetChunks_FullMethodName = "/node.Relay/GetChunks"
)

// RelayClient is the client API for Relay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayClient interface {
	// GetBlobs retrieves blobs stored by the relay.
	GetBlobs(ctx context.Context, in *GetBlobsRequest, opts ...grpc.CallOption) (*GetBlobsReply, error)
	// GetChunks retrieves chunks from blobs stored by the relay.
	GetChunks(ctx context.Context, in *GetChunksRequest, opts ...grpc.CallOption) (*GetChunksReply, error)
}

type relayClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayClient(cc grpc.ClientConnInterface) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) GetBlobs(ctx context.Context, in *GetBlobsRequest, opts ...grpc.CallOption) (*GetBlobsReply, error) {
	out := new(GetBlobsReply)
	err := c.cc.Invoke(ctx, Relay_GetBlobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) GetChunks(ctx context.Context, in *GetChunksRequest, opts ...grpc.CallOption) (*GetChunksReply, error) {
	out := new(GetChunksReply)
	err := c.cc.Invoke(ctx, Relay_GetChunks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayServer is the server API for Relay service.
// All implementations must embed UnimplementedRelayServer
// for forward compatibility
type RelayServer interface {
	// GetBlobs retrieves blobs stored by the relay.
	GetBlobs(context.Context, *GetBlobsRequest) (*GetBlobsReply, error)
	// GetChunks retrieves chunks from blobs stored by the relay.
	GetChunks(context.Context, *GetChunksRequest) (*GetChunksReply, error)
	mustEmbedUnimplementedRelayServer()
}

// UnimplementedRelayServer must be embedded to have forward compatible implementations.
type UnimplementedRelayServer struct {
}

func (UnimplementedRelayServer) GetBlobs(context.Context, *GetBlobsRequest) (*GetBlobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlobs not implemented")
}
func (UnimplementedRelayServer) GetChunks(context.Context, *GetChunksRequest) (*GetChunksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunks not implemented")
}
func (UnimplementedRelayServer) mustEmbedUnimplementedRelayServer() {}

// UnsafeRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServer will
// result in compilation errors.
type UnsafeRelayServer interface {
	mustEmbedUnimplementedRelayServer()
}

func RegisterRelayServer(s grpc.ServiceRegistrar, srv RelayServer) {
	s.RegisterService(&Relay_ServiceDesc, srv)
}

func _Relay_GetBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_GetBlobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetBlobs(ctx, req.(*GetBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_GetChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_GetChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetChunks(ctx, req.(*GetChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relay_ServiceDesc is the grpc.ServiceDesc for Relay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlobs",
			Handler:    _Relay_GetBlobs_Handler,
		},
		{
			MethodName: "GetChunks",
			Handler:    _Relay_GetChunks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/relay.proto",
}
