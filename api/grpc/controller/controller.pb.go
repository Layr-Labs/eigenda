// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: controller/controller.proto

package controller

import (
	validator "github.com/Layr-Labs/eigenda/api/grpc/validator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request to get the signing rate of a validator during a time range. The time range of the returned data may not
// exactly match the requested time range, as the data is aggregated into fixed size buckets.
type GetValidatorSigningRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the validator (i.e. the operator ID).
	ValidatorId []byte `protobuf:"bytes,1,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	// The time range to query the signing rate for, in seconds since Unix epoch.
	StartTimestamp uint64 `protobuf:"varint,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The end time of the range, in seconds since Unix epoch, exclusive.
	EndTimestamp uint64 `protobuf:"varint,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// The wall clock time of when this request was sent. Used to prevent signature replay attacks.
	RequestTimestamp uint64 `protobuf:"varint,4,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
	// Signature of the hash of this request using the disperser's ECDSA key. Possibly overkill given that this
	// RPC should live behind a firewall, but better safe than sorry.
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetValidatorSigningRateRequest) Reset() {
	*x = GetValidatorSigningRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorSigningRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorSigningRateRequest) ProtoMessage() {}

func (x *GetValidatorSigningRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorSigningRateRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorSigningRateRequest) Descriptor() ([]byte, []int) {
	return file_controller_controller_proto_rawDescGZIP(), []int{0}
}

func (x *GetValidatorSigningRateRequest) GetValidatorId() []byte {
	if x != nil {
		return x.ValidatorId
	}
	return nil
}

func (x *GetValidatorSigningRateRequest) GetStartTimestamp() uint64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *GetValidatorSigningRateRequest) GetEndTimestamp() uint64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *GetValidatorSigningRateRequest) GetRequestTimestamp() uint64 {
	if x != nil {
		return x.RequestTimestamp
	}
	return 0
}

func (x *GetValidatorSigningRateRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A reply containing the signing rate of a validator during a time range.
type GetValidatorSigningRateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of the range, in seconds since Unix epoch, inclusive. May be different from the requested start time
	// (in order to align with bucket boundaries).
	StartTimestamp uint64 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The end time of the range, in seconds since Unix epoch, exclusive. May be different from the requested end time
	// (in order to align with bucket boundaries).
	EndTimestamp uint64 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// The signing rate of the validator during the time range.
	ValidatorSigningRate *validator.ValidatorSigningRate `protobuf:"bytes,3,opt,name=validator_signing_rate,json=validatorSigningRate,proto3" json:"validator_signing_rate,omitempty"`
}

func (x *GetValidatorSigningRateReply) Reset() {
	*x = GetValidatorSigningRateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorSigningRateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorSigningRateReply) ProtoMessage() {}

func (x *GetValidatorSigningRateReply) ProtoReflect() protoreflect.Message {
	mi := &file_controller_controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorSigningRateReply.ProtoReflect.Descriptor instead.
func (*GetValidatorSigningRateReply) Descriptor() ([]byte, []int) {
	return file_controller_controller_proto_rawDescGZIP(), []int{1}
}

func (x *GetValidatorSigningRateReply) GetStartTimestamp() uint64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *GetValidatorSigningRateReply) GetEndTimestamp() uint64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *GetValidatorSigningRateReply) GetValidatorSigningRate() *validator.ValidatorSigningRate {
	if x != nil {
		return x.ValidatorSigningRate
	}
	return nil
}

// A request to get a dump of signing rate data for all validators after a specified start time.
type GetValidatorSigningRateDumpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request all signing rate data starting from this time, in seconds since Unix epoch.
	StartTimestamp uint64 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The wall clock time of when this request was sent. Used to prevent signature replay attacks.
	RequestTimestamp uint64 `protobuf:"varint,2,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
	// Signature of the hash of this request using the disperser's ECDSA key. Possibly overkill given that this
	// RPC should live behind a firewall, but better safe than sorry.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetValidatorSigningRateDumpRequest) Reset() {
	*x = GetValidatorSigningRateDumpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorSigningRateDumpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorSigningRateDumpRequest) ProtoMessage() {}

func (x *GetValidatorSigningRateDumpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorSigningRateDumpRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorSigningRateDumpRequest) Descriptor() ([]byte, []int) {
	return file_controller_controller_proto_rawDescGZIP(), []int{2}
}

func (x *GetValidatorSigningRateDumpRequest) GetStartTimestamp() uint64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *GetValidatorSigningRateDumpRequest) GetRequestTimestamp() uint64 {
	if x != nil {
		return x.RequestTimestamp
	}
	return 0
}

func (x *GetValidatorSigningRateDumpRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A reply containing the signing rate data for all validators after a specified start time.
type GetValidatorSigningRateDumpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signing rate data for all validators after the specified start time. If a too much data is requested
	// in a single request, the server may only send a partial dump. To get a full dump, call this RPC
	// multiple times, using the end_timestamp of the last bucket received as the start_timestamp of the next request.
	SigningRateBuckets []*validator.SigningRateBucket `protobuf:"bytes,1,rep,name=signing_rate_buckets,json=signingRateBuckets,proto3" json:"signing_rate_buckets,omitempty"`
}

func (x *GetValidatorSigningRateDumpReply) Reset() {
	*x = GetValidatorSigningRateDumpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorSigningRateDumpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorSigningRateDumpReply) ProtoMessage() {}

func (x *GetValidatorSigningRateDumpReply) ProtoReflect() protoreflect.Message {
	mi := &file_controller_controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorSigningRateDumpReply.ProtoReflect.Descriptor instead.
func (*GetValidatorSigningRateDumpReply) Descriptor() ([]byte, []int) {
	return file_controller_controller_proto_rawDescGZIP(), []int{3}
}

func (x *GetValidatorSigningRateDumpReply) GetSigningRateBuckets() []*validator.SigningRateBucket {
	if x != nil {
		return x.SigningRateBuckets
	}
	return nil
}

var File_controller_controller_proto protoreflect.FileDescriptor

var file_controller_controller_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x55, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x72, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x14, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x32, 0x86, 0x02, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x12, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65,
	0x44, 0x75, 0x6d, 0x70, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_controller_proto_rawDescOnce sync.Once
	file_controller_controller_proto_rawDescData = file_controller_controller_proto_rawDesc
)

func file_controller_controller_proto_rawDescGZIP() []byte {
	file_controller_controller_proto_rawDescOnce.Do(func() {
		file_controller_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_controller_proto_rawDescData)
	})
	return file_controller_controller_proto_rawDescData
}

var file_controller_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_controller_controller_proto_goTypes = []interface{}{
	(*GetValidatorSigningRateRequest)(nil),     // 0: controller.GetValidatorSigningRateRequest
	(*GetValidatorSigningRateReply)(nil),       // 1: controller.GetValidatorSigningRateReply
	(*GetValidatorSigningRateDumpRequest)(nil), // 2: controller.GetValidatorSigningRateDumpRequest
	(*GetValidatorSigningRateDumpReply)(nil),   // 3: controller.GetValidatorSigningRateDumpReply
	(*validator.ValidatorSigningRate)(nil),     // 4: validator.ValidatorSigningRate
	(*validator.SigningRateBucket)(nil),        // 5: validator.SigningRateBucket
}
var file_controller_controller_proto_depIdxs = []int32{
	4, // 0: controller.GetValidatorSigningRateReply.validator_signing_rate:type_name -> validator.ValidatorSigningRate
	5, // 1: controller.GetValidatorSigningRateDumpReply.signing_rate_buckets:type_name -> validator.SigningRateBucket
	0, // 2: controller.ControllerInternal.GetValidatorSigningRate:input_type -> controller.GetValidatorSigningRateRequest
	2, // 3: controller.ControllerInternal.GetValidatorSigningRateDump:input_type -> controller.GetValidatorSigningRateDumpRequest
	1, // 4: controller.ControllerInternal.GetValidatorSigningRate:output_type -> controller.GetValidatorSigningRateReply
	3, // 5: controller.ControllerInternal.GetValidatorSigningRateDump:output_type -> controller.GetValidatorSigningRateDumpReply
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_controller_controller_proto_init() }
func file_controller_controller_proto_init() {
	if File_controller_controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorSigningRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorSigningRateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorSigningRateDumpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorSigningRateDumpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_controller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_controller_proto_goTypes,
		DependencyIndexes: file_controller_controller_proto_depIdxs,
		MessageInfos:      file_controller_controller_proto_msgTypes,
	}.Build()
	File_controller_controller_proto = out.File
	file_controller_controller_proto_rawDesc = nil
	file_controller_controller_proto_goTypes = nil
	file_controller_controller_proto_depIdxs = nil
}
