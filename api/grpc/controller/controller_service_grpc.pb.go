// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: controller/controller_service.proto

package controller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ControllerService_AuthorizePayment_FullMethodName = "/controller.ControllerService/AuthorizePayment"
)

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerServiceClient interface {
	// AuthorizePayment handles payment authorization for blob dispersal
	//
	// This is intended to be called by API server instances that are handling dispersal requests. The controller
	// is responsible for accounting and metering for the dispersal.
	//
	// While this endpoint *does* verify the client signature for each dispersal, it *does not* have any type of auth
	// implemented between the API Server and Controller:
	// - This is an internal API protected by firewall rules, so it is unlikely that an unauthorized party would be able
	// to gain access to it.
	// - In the event that an unauthorized party were to gain access to this endpoint, the attack surface area is still
	// minimal: client signatures are being checked, and we protect against replay. Therefore, the attacker wouldn't be
	// able to waste user funds. They would only be able to attack the liveness of the Controller through high submission
	// volume, which would be a vulnerability regardless of whether we had auth between the API server and the Controller.
	AuthorizePayment(ctx context.Context, in *AuthorizePaymentRequest, opts ...grpc.CallOption) (*AuthorizePaymentResponse, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) AuthorizePayment(ctx context.Context, in *AuthorizePaymentRequest, opts ...grpc.CallOption) (*AuthorizePaymentResponse, error) {
	out := new(AuthorizePaymentResponse)
	err := c.cc.Invoke(ctx, ControllerService_AuthorizePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
// All implementations must embed UnimplementedControllerServiceServer
// for forward compatibility
type ControllerServiceServer interface {
	// AuthorizePayment handles payment authorization for blob dispersal
	//
	// This is intended to be called by API server instances that are handling dispersal requests. The controller
	// is responsible for accounting and metering for the dispersal.
	//
	// While this endpoint *does* verify the client signature for each dispersal, it *does not* have any type of auth
	// implemented between the API Server and Controller:
	// - This is an internal API protected by firewall rules, so it is unlikely that an unauthorized party would be able
	// to gain access to it.
	// - In the event that an unauthorized party were to gain access to this endpoint, the attack surface area is still
	// minimal: client signatures are being checked, and we protect against replay. Therefore, the attacker wouldn't be
	// able to waste user funds. They would only be able to attack the liveness of the Controller through high submission
	// volume, which would be a vulnerability regardless of whether we had auth between the API server and the Controller.
	AuthorizePayment(context.Context, *AuthorizePaymentRequest) (*AuthorizePaymentResponse, error)
	mustEmbedUnimplementedControllerServiceServer()
}

// UnimplementedControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (UnimplementedControllerServiceServer) AuthorizePayment(context.Context, *AuthorizePaymentRequest) (*AuthorizePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizePayment not implemented")
}
func (UnimplementedControllerServiceServer) mustEmbedUnimplementedControllerServiceServer() {}

// UnsafeControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServiceServer will
// result in compilation errors.
type UnsafeControllerServiceServer interface {
	mustEmbedUnimplementedControllerServiceServer()
}

func RegisterControllerServiceServer(s grpc.ServiceRegistrar, srv ControllerServiceServer) {
	s.RegisterService(&ControllerService_ServiceDesc, srv)
}

func _ControllerService_AuthorizePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AuthorizePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControllerService_AuthorizePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AuthorizePayment(ctx, req.(*AuthorizePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerService_ServiceDesc is the grpc.ServiceDesc for ControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthorizePayment",
			Handler:    _ControllerService_AuthorizePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller/controller_service.proto",
}
