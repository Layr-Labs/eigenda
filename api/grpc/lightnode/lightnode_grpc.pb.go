// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: lightnode/lightnode.proto

package lightnode

import (
	context "context"
	common "github.com/Layr-Labs/eigenda/api/grpc/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LightNode_GetChunk_FullMethodName                 = "/lightnode.LightNode/GetChunk"
	LightNode_StreamAvailabilityStatus_FullMethodName = "/lightnode.LightNode/StreamAvailabilityStatus"
)

// LightNodeClient is the client API for LightNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightNodeClient interface {
	// GetChunk retrieves a specific chunk held by the light node.
	GetChunk(ctx context.Context, in *common.ChunkKey, opts ...grpc.CallOption) (*common.ChunkData, error)
	// StreamAvailabilityStatus streams the availability status of all chunks assigned to the light node.
	// For use by a DA node for monitoring the availability of chunks through its constellation of agent light nodes.
	StreamAvailabilityStatus(ctx context.Context, in *StreamAvailabilityStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[common.ChunkKey], error)
}

type lightNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewLightNodeClient(cc grpc.ClientConnInterface) LightNodeClient {
	return &lightNodeClient{cc}
}

func (c *lightNodeClient) GetChunk(ctx context.Context, in *common.ChunkKey, opts ...grpc.CallOption) (*common.ChunkData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.ChunkData)
	err := c.cc.Invoke(ctx, LightNode_GetChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightNodeClient) StreamAvailabilityStatus(ctx context.Context, in *StreamAvailabilityStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[common.ChunkKey], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LightNode_ServiceDesc.Streams[0], LightNode_StreamAvailabilityStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAvailabilityStatusRequest, common.ChunkKey]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LightNode_StreamAvailabilityStatusClient = grpc.ServerStreamingClient[common.ChunkKey]

// LightNodeServer is the server API for LightNode service.
// All implementations must embed UnimplementedLightNodeServer
// for forward compatibility.
type LightNodeServer interface {
	// GetChunk retrieves a specific chunk held by the light node.
	GetChunk(context.Context, *common.ChunkKey) (*common.ChunkData, error)
	// StreamAvailabilityStatus streams the availability status of all chunks assigned to the light node.
	// For use by a DA node for monitoring the availability of chunks through its constellation of agent light nodes.
	StreamAvailabilityStatus(*StreamAvailabilityStatusRequest, grpc.ServerStreamingServer[common.ChunkKey]) error
	mustEmbedUnimplementedLightNodeServer()
}

// UnimplementedLightNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLightNodeServer struct{}

func (UnimplementedLightNodeServer) GetChunk(context.Context, *common.ChunkKey) (*common.ChunkData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedLightNodeServer) StreamAvailabilityStatus(*StreamAvailabilityStatusRequest, grpc.ServerStreamingServer[common.ChunkKey]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAvailabilityStatus not implemented")
}
func (UnimplementedLightNodeServer) mustEmbedUnimplementedLightNodeServer() {}
func (UnimplementedLightNodeServer) testEmbeddedByValue()                   {}

// UnsafeLightNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightNodeServer will
// result in compilation errors.
type UnsafeLightNodeServer interface {
	mustEmbedUnimplementedLightNodeServer()
}

func RegisterLightNodeServer(s grpc.ServiceRegistrar, srv LightNodeServer) {
	// If the following call pancis, it indicates UnimplementedLightNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LightNode_ServiceDesc, srv)
}

func _LightNode_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ChunkKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightNodeServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LightNode_GetChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightNodeServer).GetChunk(ctx, req.(*common.ChunkKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightNode_StreamAvailabilityStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAvailabilityStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LightNodeServer).StreamAvailabilityStatus(m, &grpc.GenericServerStream[StreamAvailabilityStatusRequest, common.ChunkKey]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LightNode_StreamAvailabilityStatusServer = grpc.ServerStreamingServer[common.ChunkKey]

// LightNode_ServiceDesc is the grpc.ServiceDesc for LightNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LightNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lightnode.LightNode",
	HandlerType: (*LightNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChunk",
			Handler:    _LightNode_GetChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAvailabilityStatus",
			Handler:       _LightNode_StreamAvailabilityStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lightnode/lightnode.proto",
}
