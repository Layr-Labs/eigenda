// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: disperser/disperser.proto

package disperser

import (
	common "github.com/Layr-Labs/eigenda/api/grpc/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlobStatus represents the status of a blob.
// The status of a blob is updated as the blob is processed by the disperser.
// The status of a blob can be queried by the client using the GetBlobStatus API.
// Intermediate states are states that the blob can be in while being processed, and it can be updated to a differet state:
// - PROCESSING
// - DISPERSING
// - CONFIRMED
// Terminal states are states that will not be updated to a different state:
// - FAILED
// - FINALIZED
// - INSUFFICIENT_SIGNATURES
type BlobStatus int32

const (
	BlobStatus_UNKNOWN BlobStatus = 0
	// PROCESSING means that the blob is currently being processed by the disperser
	BlobStatus_PROCESSING BlobStatus = 1
	// CONFIRMED means that the blob has been dispersed to DA Nodes and the dispersed
	// batch containing the blob has been confirmed onchain
	BlobStatus_CONFIRMED BlobStatus = 2
	// FAILED means that the blob has failed permanently (for reasons other than insufficient
	// signatures, which is a separate state)
	BlobStatus_FAILED BlobStatus = 3
	// FINALIZED means that the block containing the blob's confirmation transaction has been finalized on Ethereum
	BlobStatus_FINALIZED BlobStatus = 4
	// INSUFFICIENT_SIGNATURES means that the confirmation threshold for the blob was not met
	// for at least one quorum.
	BlobStatus_INSUFFICIENT_SIGNATURES BlobStatus = 5
	// DISPERSING means that the blob is currently being dispersed to DA Nodes and being confirmed onchain
	BlobStatus_DISPERSING BlobStatus = 6
)

// Enum value maps for BlobStatus.
var (
	BlobStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "PROCESSING",
		2: "CONFIRMED",
		3: "FAILED",
		4: "FINALIZED",
		5: "INSUFFICIENT_SIGNATURES",
		6: "DISPERSING",
	}
	BlobStatus_value = map[string]int32{
		"UNKNOWN":                 0,
		"PROCESSING":              1,
		"CONFIRMED":               2,
		"FAILED":                  3,
		"FINALIZED":               4,
		"INSUFFICIENT_SIGNATURES": 5,
		"DISPERSING":              6,
	}
)

func (x BlobStatus) Enum() *BlobStatus {
	p := new(BlobStatus)
	*p = x
	return p
}

func (x BlobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_disperser_disperser_proto_enumTypes[0].Descriptor()
}

func (BlobStatus) Type() protoreflect.EnumType {
	return &file_disperser_disperser_proto_enumTypes[0]
}

func (x BlobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobStatus.Descriptor instead.
func (BlobStatus) EnumDescriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{0}
}

type AuthenticatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AuthenticatedRequest_DisperseRequest
	//	*AuthenticatedRequest_AuthenticationData
	Payload isAuthenticatedRequest_Payload `protobuf_oneof:"payload"`
}

func (x *AuthenticatedRequest) Reset() {
	*x = AuthenticatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedRequest) ProtoMessage() {}

func (x *AuthenticatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedRequest.ProtoReflect.Descriptor instead.
func (*AuthenticatedRequest) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{0}
}

func (m *AuthenticatedRequest) GetPayload() isAuthenticatedRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AuthenticatedRequest) GetDisperseRequest() *DisperseBlobRequest {
	if x, ok := x.GetPayload().(*AuthenticatedRequest_DisperseRequest); ok {
		return x.DisperseRequest
	}
	return nil
}

func (x *AuthenticatedRequest) GetAuthenticationData() *AuthenticationData {
	if x, ok := x.GetPayload().(*AuthenticatedRequest_AuthenticationData); ok {
		return x.AuthenticationData
	}
	return nil
}

type isAuthenticatedRequest_Payload interface {
	isAuthenticatedRequest_Payload()
}

type AuthenticatedRequest_DisperseRequest struct {
	DisperseRequest *DisperseBlobRequest `protobuf:"bytes,1,opt,name=disperse_request,json=disperseRequest,proto3,oneof"`
}

type AuthenticatedRequest_AuthenticationData struct {
	AuthenticationData *AuthenticationData `protobuf:"bytes,2,opt,name=authentication_data,json=authenticationData,proto3,oneof"`
}

func (*AuthenticatedRequest_DisperseRequest) isAuthenticatedRequest_Payload() {}

func (*AuthenticatedRequest_AuthenticationData) isAuthenticatedRequest_Payload() {}

type AuthenticatedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*AuthenticatedReply_BlobAuthHeader
	//	*AuthenticatedReply_DisperseReply
	Payload isAuthenticatedReply_Payload `protobuf_oneof:"payload"`
}

func (x *AuthenticatedReply) Reset() {
	*x = AuthenticatedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedReply) ProtoMessage() {}

func (x *AuthenticatedReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedReply.ProtoReflect.Descriptor instead.
func (*AuthenticatedReply) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{1}
}

func (m *AuthenticatedReply) GetPayload() isAuthenticatedReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AuthenticatedReply) GetBlobAuthHeader() *BlobAuthHeader {
	if x, ok := x.GetPayload().(*AuthenticatedReply_BlobAuthHeader); ok {
		return x.BlobAuthHeader
	}
	return nil
}

func (x *AuthenticatedReply) GetDisperseReply() *DisperseBlobReply {
	if x, ok := x.GetPayload().(*AuthenticatedReply_DisperseReply); ok {
		return x.DisperseReply
	}
	return nil
}

type isAuthenticatedReply_Payload interface {
	isAuthenticatedReply_Payload()
}

type AuthenticatedReply_BlobAuthHeader struct {
	BlobAuthHeader *BlobAuthHeader `protobuf:"bytes,1,opt,name=blob_auth_header,json=blobAuthHeader,proto3,oneof"`
}

type AuthenticatedReply_DisperseReply struct {
	DisperseReply *DisperseBlobReply `protobuf:"bytes,2,opt,name=disperse_reply,json=disperseReply,proto3,oneof"`
}

func (*AuthenticatedReply_BlobAuthHeader) isAuthenticatedReply_Payload() {}

func (*AuthenticatedReply_DisperseReply) isAuthenticatedReply_Payload() {}

// BlobAuthHeader contains information about the blob for the client to verify and sign.
// - Once payments are enabled, the BlobAuthHeader will contain the KZG commitment to the blob, which the client
// will verify and sign. Having the client verify the KZG commitment instead of calculating it avoids
// the need for the client to have the KZG structured reference string (SRS), which can be large.
// The signed KZG commitment prevents the disperser from sending a different blob to the DA Nodes
// than the one the client sent.
// - In the meantime, the BlobAuthHeader contains a simple challenge parameter is used to prevent
// replay attacks in the event that a signature is leaked.
type BlobAuthHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeParameter uint32 `protobuf:"varint,1,opt,name=challenge_parameter,json=challengeParameter,proto3" json:"challenge_parameter,omitempty"`
}

func (x *BlobAuthHeader) Reset() {
	*x = BlobAuthHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobAuthHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobAuthHeader) ProtoMessage() {}

func (x *BlobAuthHeader) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobAuthHeader.ProtoReflect.Descriptor instead.
func (*BlobAuthHeader) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{2}
}

func (x *BlobAuthHeader) GetChallengeParameter() uint32 {
	if x != nil {
		return x.ChallengeParameter
	}
	return 0
}

// AuthenticationData contains the signature of the BlobAuthHeader.
type AuthenticationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationData []byte `protobuf:"bytes,1,opt,name=authentication_data,json=authenticationData,proto3" json:"authentication_data,omitempty"`
}

func (x *AuthenticationData) Reset() {
	*x = AuthenticationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationData) ProtoMessage() {}

func (x *AuthenticationData) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationData.ProtoReflect.Descriptor instead.
func (*AuthenticationData) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{3}
}

func (x *AuthenticationData) GetAuthenticationData() []byte {
	if x != nil {
		return x.AuthenticationData
	}
	return nil
}

type DisperseBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data to be dispersed.
	// The size of data must be <= 2MiB. Every 32 bytes of data chunk is interpreted as an integer in big endian format
	// where the lower address has more significant bits. The integer must stay in the valid range to be interpreted
	// as a field element on the bn254 curve. The valid range is
	// 0 <= x < 21888242871839275222246405745257275088548364400416034343698204186575808495617
	// containing slightly less than 254 bits and more than 253 bits. If any one of the 32 bytes chunk is outside the range,
	// the whole request is deemed as invalid, and rejected.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The quorums to which the blob will be sent, in addition to the required quorums which are configured
	// on the EigenDA smart contract. If required quorums are included here, an error will be returned.
	// The disperser will ensure that the encoded blobs for each quorum are all processed
	// within the same batch.
	CustomQuorumNumbers []uint32 `protobuf:"varint,2,rep,packed,name=custom_quorum_numbers,json=customQuorumNumbers,proto3" json:"custom_quorum_numbers,omitempty"`
	// The account ID of the client. This should be a hex-encoded string of the ECSDA public key
	// corresponding to the key used by the client to sign the BlobAuthHeader.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *DisperseBlobRequest) Reset() {
	*x = DisperseBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisperseBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisperseBlobRequest) ProtoMessage() {}

func (x *DisperseBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisperseBlobRequest.ProtoReflect.Descriptor instead.
func (*DisperseBlobRequest) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{4}
}

func (x *DisperseBlobRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DisperseBlobRequest) GetCustomQuorumNumbers() []uint32 {
	if x != nil {
		return x.CustomQuorumNumbers
	}
	return nil
}

func (x *DisperseBlobRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type DisperseBlobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the blob associated with the request_id.
	Result BlobStatus `protobuf:"varint,1,opt,name=result,proto3,enum=disperser.BlobStatus" json:"result,omitempty"`
	// The request ID generated by the disperser.
	// Once a request is accepted (although not processed), a unique request ID will be
	// generated.
	// Two different DisperseBlobRequests (determined by the hash of the DisperseBlobRequest)
	// will have different IDs, and the same DisperseBlobRequest sent repeatedly at different
	// times will also have different IDs.
	// The client should use this ID to query the processing status of the request (via
	// the GetBlobStatus API).
	RequestId []byte `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DisperseBlobReply) Reset() {
	*x = DisperseBlobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisperseBlobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisperseBlobReply) ProtoMessage() {}

func (x *DisperseBlobReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisperseBlobReply.ProtoReflect.Descriptor instead.
func (*DisperseBlobReply) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{5}
}

func (x *DisperseBlobReply) GetResult() BlobStatus {
	if x != nil {
		return x.Result
	}
	return BlobStatus_UNKNOWN
}

func (x *DisperseBlobReply) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

// BlobStatusRequest is used to query the status of a blob.
type BlobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BlobStatusRequest) Reset() {
	*x = BlobStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobStatusRequest) ProtoMessage() {}

func (x *BlobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobStatusRequest.ProtoReflect.Descriptor instead.
func (*BlobStatusRequest) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{6}
}

func (x *BlobStatusRequest) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

type BlobStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the blob.
	Status BlobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=disperser.BlobStatus" json:"status,omitempty"`
	// The blob info needed for clients to confirm the blob against the EigenDA contracts.
	Info *BlobInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *BlobStatusReply) Reset() {
	*x = BlobStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobStatusReply) ProtoMessage() {}

func (x *BlobStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobStatusReply.ProtoReflect.Descriptor instead.
func (*BlobStatusReply) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{7}
}

func (x *BlobStatusReply) GetStatus() BlobStatus {
	if x != nil {
		return x.Status
	}
	return BlobStatus_UNKNOWN
}

func (x *BlobStatusReply) GetInfo() *BlobInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// RetrieveBlobRequest contains parameters to retrieve the blob.
type RetrieveBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchHeaderHash []byte `protobuf:"bytes,1,opt,name=batch_header_hash,json=batchHeaderHash,proto3" json:"batch_header_hash,omitempty"`
	BlobIndex       uint32 `protobuf:"varint,2,opt,name=blob_index,json=blobIndex,proto3" json:"blob_index,omitempty"`
}

func (x *RetrieveBlobRequest) Reset() {
	*x = RetrieveBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBlobRequest) ProtoMessage() {}

func (x *RetrieveBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBlobRequest.ProtoReflect.Descriptor instead.
func (*RetrieveBlobRequest) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{8}
}

func (x *RetrieveBlobRequest) GetBatchHeaderHash() []byte {
	if x != nil {
		return x.BatchHeaderHash
	}
	return nil
}

func (x *RetrieveBlobRequest) GetBlobIndex() uint32 {
	if x != nil {
		return x.BlobIndex
	}
	return 0
}

// RetrieveBlobReply contains the retrieved blob data
type RetrieveBlobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RetrieveBlobReply) Reset() {
	*x = RetrieveBlobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveBlobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBlobReply) ProtoMessage() {}

func (x *RetrieveBlobReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBlobReply.ProtoReflect.Descriptor instead.
func (*RetrieveBlobReply) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{9}
}

func (x *RetrieveBlobReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// BlobInfo contains information needed to confirm the blob against the EigenDA contracts
type BlobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobHeader            *BlobHeader            `protobuf:"bytes,1,opt,name=blob_header,json=blobHeader,proto3" json:"blob_header,omitempty"`
	BlobVerificationProof *BlobVerificationProof `protobuf:"bytes,2,opt,name=blob_verification_proof,json=blobVerificationProof,proto3" json:"blob_verification_proof,omitempty"`
}

func (x *BlobInfo) Reset() {
	*x = BlobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobInfo) ProtoMessage() {}

func (x *BlobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobInfo.ProtoReflect.Descriptor instead.
func (*BlobInfo) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{10}
}

func (x *BlobInfo) GetBlobHeader() *BlobHeader {
	if x != nil {
		return x.BlobHeader
	}
	return nil
}

func (x *BlobInfo) GetBlobVerificationProof() *BlobVerificationProof {
	if x != nil {
		return x.BlobVerificationProof
	}
	return nil
}

type BlobHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KZG commitment of the blob.
	Commitment *common.G1Commitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// The length of the blob in symbols (each symbol is 32 bytes).
	DataLength uint32 `protobuf:"varint,2,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	// The params of the quorums that this blob participates in.
	BlobQuorumParams []*BlobQuorumParam `protobuf:"bytes,3,rep,name=blob_quorum_params,json=blobQuorumParams,proto3" json:"blob_quorum_params,omitempty"`
}

func (x *BlobHeader) Reset() {
	*x = BlobHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobHeader) ProtoMessage() {}

func (x *BlobHeader) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobHeader.ProtoReflect.Descriptor instead.
func (*BlobHeader) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{11}
}

func (x *BlobHeader) GetCommitment() *common.G1Commitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *BlobHeader) GetDataLength() uint32 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *BlobHeader) GetBlobQuorumParams() []*BlobQuorumParam {
	if x != nil {
		return x.BlobQuorumParams
	}
	return nil
}

type BlobQuorumParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the quorum.
	QuorumNumber uint32 `protobuf:"varint,1,opt,name=quorum_number,json=quorumNumber,proto3" json:"quorum_number,omitempty"`
	// The max percentage of stake within the quorum that can be held by or delegated
	// to adversarial operators. Currently, this and the next parameter are standardized
	// across the quorum using values read from the EigenDA contracts.
	AdversaryThresholdPercentage uint32 `protobuf:"varint,2,opt,name=adversary_threshold_percentage,json=adversaryThresholdPercentage,proto3" json:"adversary_threshold_percentage,omitempty"`
	// The min percentage of stake that must attest in order to consider
	// the dispersal is successful.
	ConfirmationThresholdPercentage uint32 `protobuf:"varint,3,opt,name=confirmation_threshold_percentage,json=confirmationThresholdPercentage,proto3" json:"confirmation_threshold_percentage,omitempty"`
	// The length of each chunk.
	ChunkLength uint32 `protobuf:"varint,4,opt,name=chunk_length,json=chunkLength,proto3" json:"chunk_length,omitempty"`
}

func (x *BlobQuorumParam) Reset() {
	*x = BlobQuorumParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobQuorumParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobQuorumParam) ProtoMessage() {}

func (x *BlobQuorumParam) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobQuorumParam.ProtoReflect.Descriptor instead.
func (*BlobQuorumParam) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{12}
}

func (x *BlobQuorumParam) GetQuorumNumber() uint32 {
	if x != nil {
		return x.QuorumNumber
	}
	return 0
}

func (x *BlobQuorumParam) GetAdversaryThresholdPercentage() uint32 {
	if x != nil {
		return x.AdversaryThresholdPercentage
	}
	return 0
}

func (x *BlobQuorumParam) GetConfirmationThresholdPercentage() uint32 {
	if x != nil {
		return x.ConfirmationThresholdPercentage
	}
	return 0
}

func (x *BlobQuorumParam) GetChunkLength() uint32 {
	if x != nil {
		return x.ChunkLength
	}
	return 0
}

type BlobVerificationProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// batch_id is an incremental ID assigned to a batch by EigenDAServiceManager
	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The index of the blob in the batch (which is logically an ordered list of blobs).
	BlobIndex     uint32         `protobuf:"varint,2,opt,name=blob_index,json=blobIndex,proto3" json:"blob_index,omitempty"`
	BatchMetadata *BatchMetadata `protobuf:"bytes,3,opt,name=batch_metadata,json=batchMetadata,proto3" json:"batch_metadata,omitempty"`
	// inclusion_proof is a merkle proof for a blob header's inclusion in a batch
	InclusionProof []byte `protobuf:"bytes,4,opt,name=inclusion_proof,json=inclusionProof,proto3" json:"inclusion_proof,omitempty"`
	// indexes of quorums in BatchHeader.quorum_numbers that match the quorums in BlobHeader.blob_quorum_params
	// Ex. BlobHeader.blob_quorum_params = [
	//
	//	{
	//		quorum_number = 0,
	//		...
	//	},
	//	{
	//		quorum_number = 3,
	//		...
	//	},
	//	{
	//		quorum_number = 5,
	//		...
	//	},
	//
	// ]
	// BatchHeader.quorum_numbers = [0, 5, 3] => 0x000503
	// Then, quorum_indexes = [0, 2, 1] => 0x000201
	QuorumIndexes []byte `protobuf:"bytes,5,opt,name=quorum_indexes,json=quorumIndexes,proto3" json:"quorum_indexes,omitempty"`
}

func (x *BlobVerificationProof) Reset() {
	*x = BlobVerificationProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobVerificationProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobVerificationProof) ProtoMessage() {}

func (x *BlobVerificationProof) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobVerificationProof.ProtoReflect.Descriptor instead.
func (*BlobVerificationProof) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{13}
}

func (x *BlobVerificationProof) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *BlobVerificationProof) GetBlobIndex() uint32 {
	if x != nil {
		return x.BlobIndex
	}
	return 0
}

func (x *BlobVerificationProof) GetBatchMetadata() *BatchMetadata {
	if x != nil {
		return x.BatchMetadata
	}
	return nil
}

func (x *BlobVerificationProof) GetInclusionProof() []byte {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *BlobVerificationProof) GetQuorumIndexes() []byte {
	if x != nil {
		return x.QuorumIndexes
	}
	return nil
}

type BatchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchHeader *BatchHeader `protobuf:"bytes,1,opt,name=batch_header,json=batchHeader,proto3" json:"batch_header,omitempty"`
	// The hash of all public keys of the operators that did not sign the batch.
	SignatoryRecordHash []byte `protobuf:"bytes,2,opt,name=signatory_record_hash,json=signatoryRecordHash,proto3" json:"signatory_record_hash,omitempty"`
	// The fee payment paid by users for dispersing this batch. It's the bytes
	// representation of a big.Int value.
	Fee []byte `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// The Ethereum block number at which the batch is confirmed onchain.
	ConfirmationBlockNumber uint32 `protobuf:"varint,4,opt,name=confirmation_block_number,json=confirmationBlockNumber,proto3" json:"confirmation_block_number,omitempty"`
	// This is the hash of the ReducedBatchHeader defined onchain, see:
	// https://github.com/Layr-Labs/eigenda/blob/master/contracts/src/interfaces/IEigenDAServiceManager.sol#L43
	// The is the message that the operators will sign their signatures on.
	BatchHeaderHash []byte `protobuf:"bytes,5,opt,name=batch_header_hash,json=batchHeaderHash,proto3" json:"batch_header_hash,omitempty"`
}

func (x *BatchMetadata) Reset() {
	*x = BatchMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMetadata) ProtoMessage() {}

func (x *BatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMetadata.ProtoReflect.Descriptor instead.
func (*BatchMetadata) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{14}
}

func (x *BatchMetadata) GetBatchHeader() *BatchHeader {
	if x != nil {
		return x.BatchHeader
	}
	return nil
}

func (x *BatchMetadata) GetSignatoryRecordHash() []byte {
	if x != nil {
		return x.SignatoryRecordHash
	}
	return nil
}

func (x *BatchMetadata) GetFee() []byte {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *BatchMetadata) GetConfirmationBlockNumber() uint32 {
	if x != nil {
		return x.ConfirmationBlockNumber
	}
	return 0
}

func (x *BatchMetadata) GetBatchHeaderHash() []byte {
	if x != nil {
		return x.BatchHeaderHash
	}
	return nil
}

type BatchHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root of the merkle tree with the hashes of blob headers as leaves.
	BatchRoot []byte `protobuf:"bytes,1,opt,name=batch_root,json=batchRoot,proto3" json:"batch_root,omitempty"`
	// All quorums associated with blobs in this batch. Sorted in ascending order.
	// Ex. [0, 2, 1] => 0x000102
	QuorumNumbers []byte `protobuf:"bytes,2,opt,name=quorum_numbers,json=quorumNumbers,proto3" json:"quorum_numbers,omitempty"`
	// The percentage of stake that has signed for this batch.
	// The quorum_signed_percentages[i] is percentage for the quorum_numbers[i].
	QuorumSignedPercentages []byte `protobuf:"bytes,3,opt,name=quorum_signed_percentages,json=quorumSignedPercentages,proto3" json:"quorum_signed_percentages,omitempty"`
	// The Ethereum block number at which the batch was created.
	// The Disperser will encode and disperse the blobs based on the onchain info
	// (e.g. operator stakes) at this block number.
	ReferenceBlockNumber uint32 `protobuf:"varint,4,opt,name=reference_block_number,json=referenceBlockNumber,proto3" json:"reference_block_number,omitempty"`
}

func (x *BatchHeader) Reset() {
	*x = BatchHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchHeader) ProtoMessage() {}

func (x *BatchHeader) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchHeader.ProtoReflect.Descriptor instead.
func (*BatchHeader) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{15}
}

func (x *BatchHeader) GetBatchRoot() []byte {
	if x != nil {
		return x.BatchRoot
	}
	return nil
}

func (x *BatchHeader) GetQuorumNumbers() []byte {
	if x != nil {
		return x.QuorumNumbers
	}
	return nil
}

func (x *BatchHeader) GetQuorumSignedPercentages() []byte {
	if x != nil {
		return x.QuorumSignedPercentages
	}
	return nil
}

func (x *BatchHeader) GetReferenceBlockNumber() uint32 {
	if x != nil {
		return x.ReferenceBlockNumber
	}
	return 0
}

// Request a specific chunk
type GetChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the blob's header.
	BlobHeaderHash []byte `protobuf:"bytes,1,opt,name=blob_header_hash,json=blobHeaderHash,proto3" json:"blob_header_hash,omitempty"`
	// The index of the chunk within the blob.
	ChunkIndex uint32 `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
}

func (x *GetChunkRequest) Reset() {
	*x = GetChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkRequest) ProtoMessage() {}

func (x *GetChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkRequest.ProtoReflect.Descriptor instead.
func (*GetChunkRequest) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{16}
}

func (x *GetChunkRequest) GetBlobHeaderHash() []byte {
	if x != nil {
		return x.BlobHeaderHash
	}
	return nil
}

func (x *GetChunkRequest) GetChunkIndex() uint32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

// Reply to GetChunkRequest
type GetChunkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chunk requested.
	Chunk *common.ChunkData `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *GetChunkReply) Reset() {
	*x = GetChunkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_disperser_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkReply) ProtoMessage() {}

func (x *GetChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_disperser_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkReply.ProtoReflect.Descriptor instead.
func (*GetChunkReply) Descriptor() ([]byte, []int) {
	return file_disperser_disperser_proto_rawDescGZIP(), []int{17}
}

func (x *GetChunkReply) GetChunk() *common.ChunkData {
	if x != nil {
		return x.Chunk
	}
	return nil
}

var File_disperser_disperser_proto protoreflect.FileDescriptor

var file_disperser_disperser_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x01, 0x0a, 0x14,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x50, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xad,
	0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62,
	0x41, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x62, 0x41, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x41,
	0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x22, 0x45, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x11, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a,
	0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x60, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x27, 0x0a, 0x11, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x36, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x6c,
	0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x15, 0x62, 0x6c, 0x6f,
	0x62, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0xad, 0x01, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x31, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x4a, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0xe2, 0x01, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x25,
	0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x38, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x2a, 0x80, 0x01, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x53, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x50, 0x45, 0x52, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x06, 0x32, 0x9d, 0x03, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x62, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x62, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x12,
	0x1e, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_disperser_disperser_proto_rawDescOnce sync.Once
	file_disperser_disperser_proto_rawDescData = file_disperser_disperser_proto_rawDesc
)

func file_disperser_disperser_proto_rawDescGZIP() []byte {
	file_disperser_disperser_proto_rawDescOnce.Do(func() {
		file_disperser_disperser_proto_rawDescData = protoimpl.X.CompressGZIP(file_disperser_disperser_proto_rawDescData)
	})
	return file_disperser_disperser_proto_rawDescData
}

var file_disperser_disperser_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_disperser_disperser_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_disperser_disperser_proto_goTypes = []interface{}{
	(BlobStatus)(0),               // 0: disperser.BlobStatus
	(*AuthenticatedRequest)(nil),  // 1: disperser.AuthenticatedRequest
	(*AuthenticatedReply)(nil),    // 2: disperser.AuthenticatedReply
	(*BlobAuthHeader)(nil),        // 3: disperser.BlobAuthHeader
	(*AuthenticationData)(nil),    // 4: disperser.AuthenticationData
	(*DisperseBlobRequest)(nil),   // 5: disperser.DisperseBlobRequest
	(*DisperseBlobReply)(nil),     // 6: disperser.DisperseBlobReply
	(*BlobStatusRequest)(nil),     // 7: disperser.BlobStatusRequest
	(*BlobStatusReply)(nil),       // 8: disperser.BlobStatusReply
	(*RetrieveBlobRequest)(nil),   // 9: disperser.RetrieveBlobRequest
	(*RetrieveBlobReply)(nil),     // 10: disperser.RetrieveBlobReply
	(*BlobInfo)(nil),              // 11: disperser.BlobInfo
	(*BlobHeader)(nil),            // 12: disperser.BlobHeader
	(*BlobQuorumParam)(nil),       // 13: disperser.BlobQuorumParam
	(*BlobVerificationProof)(nil), // 14: disperser.BlobVerificationProof
	(*BatchMetadata)(nil),         // 15: disperser.BatchMetadata
	(*BatchHeader)(nil),           // 16: disperser.BatchHeader
	(*GetChunkRequest)(nil),       // 17: disperser.GetChunkRequest
	(*GetChunkReply)(nil),         // 18: disperser.GetChunkReply
	(*common.G1Commitment)(nil),   // 19: common.G1Commitment
	(*common.ChunkData)(nil),      // 20: common.ChunkData
}
var file_disperser_disperser_proto_depIdxs = []int32{
	5,  // 0: disperser.AuthenticatedRequest.disperse_request:type_name -> disperser.DisperseBlobRequest
	4,  // 1: disperser.AuthenticatedRequest.authentication_data:type_name -> disperser.AuthenticationData
	3,  // 2: disperser.AuthenticatedReply.blob_auth_header:type_name -> disperser.BlobAuthHeader
	6,  // 3: disperser.AuthenticatedReply.disperse_reply:type_name -> disperser.DisperseBlobReply
	0,  // 4: disperser.DisperseBlobReply.result:type_name -> disperser.BlobStatus
	0,  // 5: disperser.BlobStatusReply.status:type_name -> disperser.BlobStatus
	11, // 6: disperser.BlobStatusReply.info:type_name -> disperser.BlobInfo
	12, // 7: disperser.BlobInfo.blob_header:type_name -> disperser.BlobHeader
	14, // 8: disperser.BlobInfo.blob_verification_proof:type_name -> disperser.BlobVerificationProof
	19, // 9: disperser.BlobHeader.commitment:type_name -> common.G1Commitment
	13, // 10: disperser.BlobHeader.blob_quorum_params:type_name -> disperser.BlobQuorumParam
	15, // 11: disperser.BlobVerificationProof.batch_metadata:type_name -> disperser.BatchMetadata
	16, // 12: disperser.BatchMetadata.batch_header:type_name -> disperser.BatchHeader
	20, // 13: disperser.GetChunkReply.chunk:type_name -> common.ChunkData
	5,  // 14: disperser.Disperser.DisperseBlob:input_type -> disperser.DisperseBlobRequest
	1,  // 15: disperser.Disperser.DisperseBlobAuthenticated:input_type -> disperser.AuthenticatedRequest
	7,  // 16: disperser.Disperser.GetBlobStatus:input_type -> disperser.BlobStatusRequest
	9,  // 17: disperser.Disperser.RetrieveBlob:input_type -> disperser.RetrieveBlobRequest
	17, // 18: disperser.Disperser.GetChunk:input_type -> disperser.GetChunkRequest
	6,  // 19: disperser.Disperser.DisperseBlob:output_type -> disperser.DisperseBlobReply
	2,  // 20: disperser.Disperser.DisperseBlobAuthenticated:output_type -> disperser.AuthenticatedReply
	8,  // 21: disperser.Disperser.GetBlobStatus:output_type -> disperser.BlobStatusReply
	10, // 22: disperser.Disperser.RetrieveBlob:output_type -> disperser.RetrieveBlobReply
	18, // 23: disperser.Disperser.GetChunk:output_type -> disperser.GetChunkReply
	19, // [19:24] is the sub-list for method output_type
	14, // [14:19] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_disperser_disperser_proto_init() }
func file_disperser_disperser_proto_init() {
	if File_disperser_disperser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_disperser_disperser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobAuthHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisperseBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisperseBlobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveBlobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobQuorumParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobVerificationProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_disperser_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChunkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_disperser_disperser_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AuthenticatedRequest_DisperseRequest)(nil),
		(*AuthenticatedRequest_AuthenticationData)(nil),
	}
	file_disperser_disperser_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AuthenticatedReply_BlobAuthHeader)(nil),
		(*AuthenticatedReply_DisperseReply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_disperser_disperser_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_disperser_disperser_proto_goTypes,
		DependencyIndexes: file_disperser_disperser_proto_depIdxs,
		EnumInfos:         file_disperser_disperser_proto_enumTypes,
		MessageInfos:      file_disperser_disperser_proto_msgTypes,
	}.Build()
	File_disperser_disperser_proto = out.File
	file_disperser_disperser_proto_rawDesc = nil
	file_disperser_disperser_proto_goTypes = nil
	file_disperser_disperser_proto_depIdxs = nil
}
