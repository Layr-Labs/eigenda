// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: disperser/v2/disperser_v2.proto

package v2

import (
	common "github.com/Layr-Labs/eigenda/api/grpc/common"
	v2 "github.com/Layr-Labs/eigenda/api/grpc/common/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlobStatus represents the status of a blob.
// The status of a blob is updated as the blob is processed by the disperser.
// The status of a blob can be queried by the client using the GetBlobStatus API.
// Intermediate states are states that the blob can be in while being processed, and it can be updated to a different state:
// - QUEUED
// - ENCODED
// - GATHERING_SIGNATURES
// Terminal states are states that will not be updated to a different state:
// - UNKNOWN
// - COMPLETE
// - FAILED
type BlobStatus int32

const (
	// UNKNOWN means that the status of the blob is unknown.
	// This is a catch all and should not be encountered absent a bug.
	//
	// This status is functionally equivalent to FAILED, but is used to indicate that the failure is due to an
	// unanticipated bug.
	BlobStatus_UNKNOWN BlobStatus = 0
	// QUEUED means that the blob has been queued by the disperser for processing.
	// The DisperseBlob API is asynchronous, meaning that after request validation, but before any processing,
	// the blob is stored in a queue of some sort, and a response immediately returned to the client.
	BlobStatus_QUEUED BlobStatus = 1
	// ENCODED means that the blob has been Reed-Solomon encoded into chunks and is ready to be dispersed to DA Nodes.
	BlobStatus_ENCODED BlobStatus = 2
	// GATHERING_SIGNATURES means that the blob chunks are currently actively being transmitted to validators,
	// and in doing so requesting that the validators sign to acknowledge receipt of the blob.
	// Requests that timeout or receive errors are resubmitted to DA nodes for some period of time set by the disperser,
	// after which the BlobStatus becomes COMPLETE.
	//
	// Note: this status is not currently implemented, and is a placeholder for future functionality.
	BlobStatus_GATHERING_SIGNATURES BlobStatus = 3
	// COMPLETE means the blob has been dispersed to DA nodes, and the GATHERING_SIGNATURES period of time has completed.
	// This status does not guarantee any signer percentage, so a client should check that the signature has met
	// its required threshold, and resubmit a new blob dispersal request if not.
	BlobStatus_COMPLETE BlobStatus = 4
	// FAILED means that the blob has failed permanently. Note that this is a terminal state, and in order to
	// retry the blob, the client must submit the blob again with different salt (blob key is required to be unique).
	BlobStatus_FAILED BlobStatus = 5
)

// Enum value maps for BlobStatus.
var (
	BlobStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "QUEUED",
		2: "ENCODED",
		3: "GATHERING_SIGNATURES",
		4: "COMPLETE",
		5: "FAILED",
	}
	BlobStatus_value = map[string]int32{
		"UNKNOWN":              0,
		"QUEUED":               1,
		"ENCODED":              2,
		"GATHERING_SIGNATURES": 3,
		"COMPLETE":             4,
		"FAILED":               5,
	}
)

func (x BlobStatus) Enum() *BlobStatus {
	p := new(BlobStatus)
	*p = x
	return p
}

func (x BlobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_disperser_v2_disperser_v2_proto_enumTypes[0].Descriptor()
}

func (BlobStatus) Type() protoreflect.EnumType {
	return &file_disperser_v2_disperser_v2_proto_enumTypes[0]
}

func (x BlobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobStatus.Descriptor instead.
func (BlobStatus) EnumDescriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{0}
}

// A request to disperse a blob.
type DisperseBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The blob to be dispersed.
	//
	// The size of this byte array may be any size as long as it does not exceed the maximum length of 16MiB.
	// While the data being dispersed is only required to be greater than 0 bytes, the blob size charged against the
	// payment method will be rounded up to the nearest multiple of `minNumSymbols` defined by the payment vault contract
	// (https://github.com/Layr-Labs/eigenda/blob/1430d56258b4e814b388e497320fd76354bfb478/contracts/src/payments/PaymentVaultStorage.sol#L9).
	//
	// Every 32 bytes of data is interpreted as an integer in big endian format where the lower address has more
	// significant bits. The integer must stay in the valid range to be interpreted as a field element on the bn254 curve.
	// The valid range is 0 <= x < 21888242871839275222246405745257275088548364400416034343698204186575808495617.
	// If any one of the 32 bytes elements is outside the range, the whole request is deemed as invalid, and rejected.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// The header contains metadata about the blob.
	//
	// This header can be thought of as an "eigenDA tx", in that it plays a purpose similar to an eth_tx to disperse a
	// 4844 blob. Note that a call to DisperseBlob requires the blob and the blobHeader, which is similar to how
	// dispersing a blob to ethereum requires sending a tx whose data contains the hash of the kzg commit of the blob,
	// which is dispersed separately.
	BlobHeader *v2.BlobHeader `protobuf:"bytes,2,opt,name=blob_header,json=blobHeader,proto3" json:"blob_header,omitempty"`
	// signature over keccak hash of the blob_header that can be verified by blob_header.payment_header.account_id
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DisperseBlobRequest) Reset() {
	*x = DisperseBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisperseBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisperseBlobRequest) ProtoMessage() {}

func (x *DisperseBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisperseBlobRequest.ProtoReflect.Descriptor instead.
func (*DisperseBlobRequest) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{0}
}

func (x *DisperseBlobRequest) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *DisperseBlobRequest) GetBlobHeader() *v2.BlobHeader {
	if x != nil {
		return x.BlobHeader
	}
	return nil
}

func (x *DisperseBlobRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A reply to a DisperseBlob request.
type DisperseBlobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the blob associated with the blob key.
	Result BlobStatus `protobuf:"varint,1,opt,name=result,proto3,enum=disperser.v2.BlobStatus" json:"result,omitempty"`
	// The unique 32 byte identifier for the blob.
	//
	// The blob_key is the keccak hash of the rlp serialization of the BlobHeader, as computed here:
	// https://github.com/Layr-Labs/eigenda/blob/0f14d1c90b86d29c30ff7e92cbadf2762c47f402/core/v2/serialization.go#L30
	// The blob_key must thus be unique for every request, even if the same blob is being dispersed.
	// Meaning the blob_header must be different for each request.
	//
	// Note that attempting to disperse a blob with the same blob key as a previously dispersed blob may cause
	// the disperser to reject the blob (DisperseBlob() RPC will return an error).
	BlobKey []byte `protobuf:"bytes,2,opt,name=blob_key,json=blobKey,proto3" json:"blob_key,omitempty"`
}

func (x *DisperseBlobReply) Reset() {
	*x = DisperseBlobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisperseBlobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisperseBlobReply) ProtoMessage() {}

func (x *DisperseBlobReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisperseBlobReply.ProtoReflect.Descriptor instead.
func (*DisperseBlobReply) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{1}
}

func (x *DisperseBlobReply) GetResult() BlobStatus {
	if x != nil {
		return x.Result
	}
	return BlobStatus_UNKNOWN
}

func (x *DisperseBlobReply) GetBlobKey() []byte {
	if x != nil {
		return x.BlobKey
	}
	return nil
}

// BlobStatusRequest is used to query the status of a blob.
type BlobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the blob.
	BlobKey []byte `protobuf:"bytes,1,opt,name=blob_key,json=blobKey,proto3" json:"blob_key,omitempty"`
}

func (x *BlobStatusRequest) Reset() {
	*x = BlobStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobStatusRequest) ProtoMessage() {}

func (x *BlobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobStatusRequest.ProtoReflect.Descriptor instead.
func (*BlobStatusRequest) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{2}
}

func (x *BlobStatusRequest) GetBlobKey() []byte {
	if x != nil {
		return x.BlobKey
	}
	return nil
}

// BlobStatusReply is the reply to a BlobStatusRequest.
type BlobStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the blob.
	Status BlobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=disperser.v2.BlobStatus" json:"status,omitempty"`
	// The signed batch. Only set if the blob status is GATHERING_SIGNATURES or COMPLETE.
	// signed_batch and blob_inclusion_info are only set if the blob status is GATHERING_SIGNATURES or COMPLETE.
	// When blob is in GATHERING_SIGNATURES status, the attestation object in signed_batch contains attestation information
	// at the point in time. As it gathers more signatures, attestation object will be updated according to the latest attestation status.
	// The client can use this intermediate attestation to verify a blob if it has gathered enough signatures.
	// Otherwise, it should should poll the GetBlobStatus API until the desired level of attestation has been gathered or status is COMPLETE.
	// When blob is in COMPLETE status, the attestation object in signed_batch contains the final attestation information.
	// If the final attestation does not meet the client's requirement, the client should try a new dispersal.
	SignedBatch *SignedBatch `protobuf:"bytes,2,opt,name=signed_batch,json=signedBatch,proto3" json:"signed_batch,omitempty"`
	// BlobInclusionInfo is the information needed to verify the inclusion of a blob in a batch.
	// Only set if the blob status is GATHERING_SIGNATURES or COMPLETE.
	BlobInclusionInfo *BlobInclusionInfo `protobuf:"bytes,3,opt,name=blob_inclusion_info,json=blobInclusionInfo,proto3" json:"blob_inclusion_info,omitempty"`
}

func (x *BlobStatusReply) Reset() {
	*x = BlobStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobStatusReply) ProtoMessage() {}

func (x *BlobStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobStatusReply.ProtoReflect.Descriptor instead.
func (*BlobStatusReply) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{3}
}

func (x *BlobStatusReply) GetStatus() BlobStatus {
	if x != nil {
		return x.Status
	}
	return BlobStatus_UNKNOWN
}

func (x *BlobStatusReply) GetSignedBatch() *SignedBatch {
	if x != nil {
		return x.SignedBatch
	}
	return nil
}

func (x *BlobStatusReply) GetBlobInclusionInfo() *BlobInclusionInfo {
	if x != nil {
		return x.BlobInclusionInfo
	}
	return nil
}

// The input for a BlobCommitmentRequest().
// This can be used to construct a BlobHeader.commitment.
type BlobCommitmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The blob data to compute the commitment for.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *BlobCommitmentRequest) Reset() {
	*x = BlobCommitmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobCommitmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobCommitmentRequest) ProtoMessage() {}

func (x *BlobCommitmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobCommitmentRequest.ProtoReflect.Descriptor instead.
func (*BlobCommitmentRequest) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{4}
}

func (x *BlobCommitmentRequest) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// The result of a BlobCommitmentRequest().
type BlobCommitmentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The commitment of the blob.
	BlobCommitment *common.BlobCommitment `protobuf:"bytes,1,opt,name=blob_commitment,json=blobCommitment,proto3" json:"blob_commitment,omitempty"`
}

func (x *BlobCommitmentReply) Reset() {
	*x = BlobCommitmentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobCommitmentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobCommitmentReply) ProtoMessage() {}

func (x *BlobCommitmentReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobCommitmentReply.ProtoReflect.Descriptor instead.
func (*BlobCommitmentReply) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{5}
}

func (x *BlobCommitmentReply) GetBlobCommitment() *common.BlobCommitment {
	if x != nil {
		return x.BlobCommitment
	}
	return nil
}

// GetPaymentStateRequest contains parameters to query the payment state of an account.
type GetPaymentStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the account being queried. This account ID is an eth wallet address of the user.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Signature over the account ID
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *GetPaymentStateRequest) Reset() {
	*x = GetPaymentStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentStateRequest) ProtoMessage() {}

func (x *GetPaymentStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentStateRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentStateRequest) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{6}
}

func (x *GetPaymentStateRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetPaymentStateRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// GetPaymentStateReply contains the payment state of an account.
type GetPaymentStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// global payment vault parameters
	PaymentGlobalParams *PaymentGlobalParams `protobuf:"bytes,1,opt,name=payment_global_params,json=paymentGlobalParams,proto3" json:"payment_global_params,omitempty"`
	// off-chain account reservation usage records
	PeriodRecords []*PeriodRecord `protobuf:"bytes,2,rep,name=period_records,json=periodRecords,proto3" json:"period_records,omitempty"`
	// on-chain account reservation setting
	Reservation *Reservation `protobuf:"bytes,3,opt,name=reservation,proto3" json:"reservation,omitempty"`
	// off-chain on-demand payment usage
	CumulativePayment []byte `protobuf:"bytes,4,opt,name=cumulative_payment,json=cumulativePayment,proto3" json:"cumulative_payment,omitempty"`
	// on-chain on-demand payment deposited
	OnchainCumulativePayment []byte `protobuf:"bytes,5,opt,name=onchain_cumulative_payment,json=onchainCumulativePayment,proto3" json:"onchain_cumulative_payment,omitempty"`
}

func (x *GetPaymentStateReply) Reset() {
	*x = GetPaymentStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentStateReply) ProtoMessage() {}

func (x *GetPaymentStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentStateReply.ProtoReflect.Descriptor instead.
func (*GetPaymentStateReply) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{7}
}

func (x *GetPaymentStateReply) GetPaymentGlobalParams() *PaymentGlobalParams {
	if x != nil {
		return x.PaymentGlobalParams
	}
	return nil
}

func (x *GetPaymentStateReply) GetPeriodRecords() []*PeriodRecord {
	if x != nil {
		return x.PeriodRecords
	}
	return nil
}

func (x *GetPaymentStateReply) GetReservation() *Reservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *GetPaymentStateReply) GetCumulativePayment() []byte {
	if x != nil {
		return x.CumulativePayment
	}
	return nil
}

func (x *GetPaymentStateReply) GetOnchainCumulativePayment() []byte {
	if x != nil {
		return x.OnchainCumulativePayment
	}
	return nil
}

// SignedBatch is a batch of blobs with a signature.
type SignedBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header contains metadata about the batch
	Header *v2.BatchHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// attestation on the batch
	Attestation *Attestation `protobuf:"bytes,2,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (x *SignedBatch) Reset() {
	*x = SignedBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBatch) ProtoMessage() {}

func (x *SignedBatch) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBatch.ProtoReflect.Descriptor instead.
func (*SignedBatch) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{8}
}

func (x *SignedBatch) GetHeader() *v2.BatchHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SignedBatch) GetAttestation() *Attestation {
	if x != nil {
		return x.Attestation
	}
	return nil
}

// BlobInclusionInfo is the information needed to verify the inclusion of a blob in a batch.
type BlobInclusionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobCertificate *v2.BlobCertificate `protobuf:"bytes,1,opt,name=blob_certificate,json=blobCertificate,proto3" json:"blob_certificate,omitempty"`
	// blob_index is the index of the blob in the batch
	BlobIndex uint32 `protobuf:"varint,2,opt,name=blob_index,json=blobIndex,proto3" json:"blob_index,omitempty"`
	// inclusion_proof is the inclusion proof of the blob in the batch
	InclusionProof []byte `protobuf:"bytes,3,opt,name=inclusion_proof,json=inclusionProof,proto3" json:"inclusion_proof,omitempty"`
}

func (x *BlobInclusionInfo) Reset() {
	*x = BlobInclusionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobInclusionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobInclusionInfo) ProtoMessage() {}

func (x *BlobInclusionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobInclusionInfo.ProtoReflect.Descriptor instead.
func (*BlobInclusionInfo) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{9}
}

func (x *BlobInclusionInfo) GetBlobCertificate() *v2.BlobCertificate {
	if x != nil {
		return x.BlobCertificate
	}
	return nil
}

func (x *BlobInclusionInfo) GetBlobIndex() uint32 {
	if x != nil {
		return x.BlobIndex
	}
	return 0
}

func (x *BlobInclusionInfo) GetInclusionProof() []byte {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

type Attestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized bytes of non signer public keys (G1 points)
	NonSignerPubkeys [][]byte `protobuf:"bytes,1,rep,name=non_signer_pubkeys,json=nonSignerPubkeys,proto3" json:"non_signer_pubkeys,omitempty"`
	// Serialized bytes of G2 point that represents aggregate public key of all signers
	ApkG2 []byte `protobuf:"bytes,2,opt,name=apk_g2,json=apkG2,proto3" json:"apk_g2,omitempty"`
	// Serialized bytes of aggregate public keys (G1 points) from all nodes for each quorum
	// The order of the quorum_apks should match the order of the quorum_numbers
	QuorumApks [][]byte `protobuf:"bytes,3,rep,name=quorum_apks,json=quorumApks,proto3" json:"quorum_apks,omitempty"`
	// Serialized bytes of aggregate signature
	Sigma []byte `protobuf:"bytes,4,opt,name=sigma,proto3" json:"sigma,omitempty"`
	// Relevant quorum numbers for the attestation
	QuorumNumbers []uint32 `protobuf:"varint,5,rep,packed,name=quorum_numbers,json=quorumNumbers,proto3" json:"quorum_numbers,omitempty"`
	// The attestation rate for each quorum. Each quorum's signing percentage is represented by
	// an 8 bit unsigned integer. The integer is the fraction of the quorum that has signed, with
	// 100 representing 100% of the quorum signing, and 0 representing 0% of the quorum signing. The first
	// byte in the byte array corresponds to the first quorum in the quorum_numbers array, the second byte
	// corresponds to the second quorum, and so on.
	QuorumSignedPercentages []byte `protobuf:"bytes,6,opt,name=quorum_signed_percentages,json=quorumSignedPercentages,proto3" json:"quorum_signed_percentages,omitempty"`
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{10}
}

func (x *Attestation) GetNonSignerPubkeys() [][]byte {
	if x != nil {
		return x.NonSignerPubkeys
	}
	return nil
}

func (x *Attestation) GetApkG2() []byte {
	if x != nil {
		return x.ApkG2
	}
	return nil
}

func (x *Attestation) GetQuorumApks() [][]byte {
	if x != nil {
		return x.QuorumApks
	}
	return nil
}

func (x *Attestation) GetSigma() []byte {
	if x != nil {
		return x.Sigma
	}
	return nil
}

func (x *Attestation) GetQuorumNumbers() []uint32 {
	if x != nil {
		return x.QuorumNumbers
	}
	return nil
}

func (x *Attestation) GetQuorumSignedPercentages() []byte {
	if x != nil {
		return x.QuorumSignedPercentages
	}
	return nil
}

// Global constant parameters defined by the payment vault.
type PaymentGlobalParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Global ratelimit for on-demand dispersals
	GlobalSymbolsPerSecond uint64 `protobuf:"varint,1,opt,name=global_symbols_per_second,json=globalSymbolsPerSecond,proto3" json:"global_symbols_per_second,omitempty"`
	// Minimum number of symbols accounted for all dispersals
	MinNumSymbols uint32 `protobuf:"varint,2,opt,name=min_num_symbols,json=minNumSymbols,proto3" json:"min_num_symbols,omitempty"`
	// Price charged per symbol for on-demand dispersals
	PricePerSymbol uint32 `protobuf:"varint,3,opt,name=price_per_symbol,json=pricePerSymbol,proto3" json:"price_per_symbol,omitempty"`
	// Reservation window for all reservations
	ReservationWindow uint32 `protobuf:"varint,4,opt,name=reservation_window,json=reservationWindow,proto3" json:"reservation_window,omitempty"`
	// quorums allowed to make on-demand dispersals
	OnDemandQuorumNumbers []uint32 `protobuf:"varint,5,rep,packed,name=on_demand_quorum_numbers,json=onDemandQuorumNumbers,proto3" json:"on_demand_quorum_numbers,omitempty"`
}

func (x *PaymentGlobalParams) Reset() {
	*x = PaymentGlobalParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentGlobalParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentGlobalParams) ProtoMessage() {}

func (x *PaymentGlobalParams) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentGlobalParams.ProtoReflect.Descriptor instead.
func (*PaymentGlobalParams) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{11}
}

func (x *PaymentGlobalParams) GetGlobalSymbolsPerSecond() uint64 {
	if x != nil {
		return x.GlobalSymbolsPerSecond
	}
	return 0
}

func (x *PaymentGlobalParams) GetMinNumSymbols() uint32 {
	if x != nil {
		return x.MinNumSymbols
	}
	return 0
}

func (x *PaymentGlobalParams) GetPricePerSymbol() uint32 {
	if x != nil {
		return x.PricePerSymbol
	}
	return 0
}

func (x *PaymentGlobalParams) GetReservationWindow() uint32 {
	if x != nil {
		return x.ReservationWindow
	}
	return 0
}

func (x *PaymentGlobalParams) GetOnDemandQuorumNumbers() []uint32 {
	if x != nil {
		return x.OnDemandQuorumNumbers
	}
	return nil
}

// Reservation parameters of an account, used to determine the rate limit for the account.
type Reservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rate limit for the account
	SymbolsPerSecond uint64 `protobuf:"varint,1,opt,name=symbols_per_second,json=symbolsPerSecond,proto3" json:"symbols_per_second,omitempty"`
	// start timestamp of the reservation
	StartTimestamp uint32 `protobuf:"varint,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// end timestamp of the reservation
	EndTimestamp uint32 `protobuf:"varint,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// quorums allowed to make reserved dispersals
	QuorumNumbers []uint32 `protobuf:"varint,4,rep,packed,name=quorum_numbers,json=quorumNumbers,proto3" json:"quorum_numbers,omitempty"`
	// quorum splits describes how the payment is split among the quorums
	QuorumSplits []uint32 `protobuf:"varint,5,rep,packed,name=quorum_splits,json=quorumSplits,proto3" json:"quorum_splits,omitempty"`
}

func (x *Reservation) Reset() {
	*x = Reservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reservation) ProtoMessage() {}

func (x *Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reservation.ProtoReflect.Descriptor instead.
func (*Reservation) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{12}
}

func (x *Reservation) GetSymbolsPerSecond() uint64 {
	if x != nil {
		return x.SymbolsPerSecond
	}
	return 0
}

func (x *Reservation) GetStartTimestamp() uint32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *Reservation) GetEndTimestamp() uint32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *Reservation) GetQuorumNumbers() []uint32 {
	if x != nil {
		return x.QuorumNumbers
	}
	return nil
}

func (x *Reservation) GetQuorumSplits() []uint32 {
	if x != nil {
		return x.QuorumSplits
	}
	return nil
}

// PeriodRecord is the usage record of an account in a bin. The API should return the active bin
// record and the subsequent two records that contains potential overflows.
type PeriodRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Period index of the reservation
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// symbol usage recorded
	Usage uint64 `protobuf:"varint,2,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *PeriodRecord) Reset() {
	*x = PeriodRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_disperser_v2_disperser_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodRecord) ProtoMessage() {}

func (x *PeriodRecord) ProtoReflect() protoreflect.Message {
	mi := &file_disperser_v2_disperser_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodRecord.ProtoReflect.Descriptor instead.
func (*PeriodRecord) Descriptor() ([]byte, []int) {
	return file_disperser_v2_disperser_v2_proto_rawDescGZIP(), []int{13}
}

func (x *PeriodRecord) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PeriodRecord) GetUsage() uint64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

var File_disperser_v2_disperser_v2_proto protoreflect.FileDescriptor

var file_disperser_v2_disperser_v2_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x64,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x7f, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x6c,
	0x6f, 0x62, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x60, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x4b,
	0x65, 0x79, 0x22, 0x2e, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x4b,
	0x65, 0x79, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6c, 0x6f, 0x62, 0x22, 0x56, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x15,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x7a, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a,
	0x11, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x45, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x62, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x22, 0xec, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x6e,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x6b, 0x5f, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x61, 0x70, 0x6b, 0x47, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x61, 0x70, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x41, 0x70, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x8a, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x4e, 0x75, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x66, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x32, 0xf2, 0x02, 0x0a, 0x09, 0x44, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x21, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x34,
	0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79,
	0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x65,
	0x72, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_disperser_v2_disperser_v2_proto_rawDescOnce sync.Once
	file_disperser_v2_disperser_v2_proto_rawDescData = file_disperser_v2_disperser_v2_proto_rawDesc
)

func file_disperser_v2_disperser_v2_proto_rawDescGZIP() []byte {
	file_disperser_v2_disperser_v2_proto_rawDescOnce.Do(func() {
		file_disperser_v2_disperser_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_disperser_v2_disperser_v2_proto_rawDescData)
	})
	return file_disperser_v2_disperser_v2_proto_rawDescData
}

var file_disperser_v2_disperser_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_disperser_v2_disperser_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_disperser_v2_disperser_v2_proto_goTypes = []interface{}{
	(BlobStatus)(0),                // 0: disperser.v2.BlobStatus
	(*DisperseBlobRequest)(nil),    // 1: disperser.v2.DisperseBlobRequest
	(*DisperseBlobReply)(nil),      // 2: disperser.v2.DisperseBlobReply
	(*BlobStatusRequest)(nil),      // 3: disperser.v2.BlobStatusRequest
	(*BlobStatusReply)(nil),        // 4: disperser.v2.BlobStatusReply
	(*BlobCommitmentRequest)(nil),  // 5: disperser.v2.BlobCommitmentRequest
	(*BlobCommitmentReply)(nil),    // 6: disperser.v2.BlobCommitmentReply
	(*GetPaymentStateRequest)(nil), // 7: disperser.v2.GetPaymentStateRequest
	(*GetPaymentStateReply)(nil),   // 8: disperser.v2.GetPaymentStateReply
	(*SignedBatch)(nil),            // 9: disperser.v2.SignedBatch
	(*BlobInclusionInfo)(nil),      // 10: disperser.v2.BlobInclusionInfo
	(*Attestation)(nil),            // 11: disperser.v2.Attestation
	(*PaymentGlobalParams)(nil),    // 12: disperser.v2.PaymentGlobalParams
	(*Reservation)(nil),            // 13: disperser.v2.Reservation
	(*PeriodRecord)(nil),           // 14: disperser.v2.PeriodRecord
	(*v2.BlobHeader)(nil),          // 15: common.v2.BlobHeader
	(*common.BlobCommitment)(nil),  // 16: common.BlobCommitment
	(*v2.BatchHeader)(nil),         // 17: common.v2.BatchHeader
	(*v2.BlobCertificate)(nil),     // 18: common.v2.BlobCertificate
}
var file_disperser_v2_disperser_v2_proto_depIdxs = []int32{
	15, // 0: disperser.v2.DisperseBlobRequest.blob_header:type_name -> common.v2.BlobHeader
	0,  // 1: disperser.v2.DisperseBlobReply.result:type_name -> disperser.v2.BlobStatus
	0,  // 2: disperser.v2.BlobStatusReply.status:type_name -> disperser.v2.BlobStatus
	9,  // 3: disperser.v2.BlobStatusReply.signed_batch:type_name -> disperser.v2.SignedBatch
	10, // 4: disperser.v2.BlobStatusReply.blob_inclusion_info:type_name -> disperser.v2.BlobInclusionInfo
	16, // 5: disperser.v2.BlobCommitmentReply.blob_commitment:type_name -> common.BlobCommitment
	12, // 6: disperser.v2.GetPaymentStateReply.payment_global_params:type_name -> disperser.v2.PaymentGlobalParams
	14, // 7: disperser.v2.GetPaymentStateReply.period_records:type_name -> disperser.v2.PeriodRecord
	13, // 8: disperser.v2.GetPaymentStateReply.reservation:type_name -> disperser.v2.Reservation
	17, // 9: disperser.v2.SignedBatch.header:type_name -> common.v2.BatchHeader
	11, // 10: disperser.v2.SignedBatch.attestation:type_name -> disperser.v2.Attestation
	18, // 11: disperser.v2.BlobInclusionInfo.blob_certificate:type_name -> common.v2.BlobCertificate
	1,  // 12: disperser.v2.Disperser.DisperseBlob:input_type -> disperser.v2.DisperseBlobRequest
	3,  // 13: disperser.v2.Disperser.GetBlobStatus:input_type -> disperser.v2.BlobStatusRequest
	5,  // 14: disperser.v2.Disperser.GetBlobCommitment:input_type -> disperser.v2.BlobCommitmentRequest
	7,  // 15: disperser.v2.Disperser.GetPaymentState:input_type -> disperser.v2.GetPaymentStateRequest
	2,  // 16: disperser.v2.Disperser.DisperseBlob:output_type -> disperser.v2.DisperseBlobReply
	4,  // 17: disperser.v2.Disperser.GetBlobStatus:output_type -> disperser.v2.BlobStatusReply
	6,  // 18: disperser.v2.Disperser.GetBlobCommitment:output_type -> disperser.v2.BlobCommitmentReply
	8,  // 19: disperser.v2.Disperser.GetPaymentState:output_type -> disperser.v2.GetPaymentStateReply
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_disperser_v2_disperser_v2_proto_init() }
func file_disperser_v2_disperser_v2_proto_init() {
	if File_disperser_v2_disperser_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_disperser_v2_disperser_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisperseBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisperseBlobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobCommitmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobCommitmentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobInclusionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentGlobalParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_disperser_v2_disperser_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_disperser_v2_disperser_v2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_disperser_v2_disperser_v2_proto_goTypes,
		DependencyIndexes: file_disperser_v2_disperser_v2_proto_depIdxs,
		EnumInfos:         file_disperser_v2_disperser_v2_proto_enumTypes,
		MessageInfos:      file_disperser_v2_disperser_v2_proto_msgTypes,
	}.Build()
	File_disperser_v2_disperser_v2_proto = out.File
	file_disperser_v2_disperser_v2_proto_rawDesc = nil
	file_disperser_v2_disperser_v2_proto_goTypes = nil
	file_disperser_v2_disperser_v2_proto_depIdxs = nil
}
