name: CI # this name appears in the badge on the README

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  MISE_VERSION: 2024.12.14

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - run: make lint

  # This checks that the flags in .env.exampleV1.holesky, .env.exampleV2.holesky, and .env.exampleV1AndV2.holesky are
  # valid, and allow the proxy to start.
  flags:
    strategy:
      matrix:
        env-file:
          [
            .env.exampleV1.holesky,
            .env.exampleV2.holesky,
            .env.exampleV1AndV2.holesky,
          ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - name: Run flag test
        run: ${{ github.workspace }}/scripts/test-proxy-startup-with-env-vars.sh ${{ matrix.env-file }}

  # This ensures that std output generated when running binary with `--help` is reflected in docs/help_out.txt
  help-output-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - run: make gen-static-help-output && git diff --exit-code

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - name: Install dependencies
        run: make deps
      - run: go mod download
      - run: make test-unit

  e2e-tests-local:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - name: Install dependencies
        run: make deps
      - run: go mod download
      - run: make test-e2e-local

  e2e-tests-testnet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - name: Install dependencies
        run: make deps
      - run: go mod download
      - run: make test-e2e-testnet
        env:
          SIGNER_PRIVATE_KEY: ${{ secrets.SIGNER_PRIVATE_KEY }}
          ETHEREUM_RPC: ${{ secrets.ETHEREUM_RPC }}

  e2e-tests-preprod:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - name: Install dependencies
        run: make deps
      - run: go mod download
      - run: make test-e2e-preprod
        env:
          SIGNER_PRIVATE_KEY: ${{ secrets.SIGNER_PRIVATE_KEY }}
          ETHEREUM_RPC: ${{ secrets.ETHEREUM_RPC }}

  fuzz:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - run: go mod download
      - run: make test-fuzz

  build-binary:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - run: make build

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/build-push-action@v5
        with:
          push: false
          context: .
          tags: eigenda-proxy
      # We also test that the docker container starts up correctly.
      - name: Run container as background process
        shell: bash
        run: |
          docker run -d \
          -p 6666:6666 \
          -e EIGENDA_PROXY_ADDR=0.0.0.0 \
          -e EIGENDA_PROXY_PORT=6666 \
          -e EIGENDA_PROXY_MEMSTORE_ENABLED=true \
          eigenda-proxy
      - name: Wait for rpc to come up
        shell: bash
        run: |
          ${{ github.workspace }}/scripts/wait-for.sh
