name: test-proxy # this name appears in the badge on the README

on:
  push:
    branches: 
      - master
  pull_request:
  merge_group:

env:
  MISE_VERSION: 2024.12.14

jobs:
  # This checks that the flags in .env.example are valid and allow the proxy to start.
  flags:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
          working_directory: api/proxy
      - name: Run flag test
        run: ${{ github.workspace }}/api/proxy/scripts/test-proxy-startup-with-env-vars.sh .env.example
        working-directory: api/proxy

  # This ensures that std output generated when running binary with `--help` is reflected in docs/help_out.txt
  help-output-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
          working_directory: api/proxy
      - run: make gen-static-help-output && git diff --exit-code
        working-directory: api/proxy

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
          working_directory: api/proxy
      - run: go mod download
        working-directory: api/proxy
      - run: make test-unit
        working-directory: api/proxy

  e2e-tests-local:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
          working_directory: api/proxy
      - run: go mod download
        working-directory: api/proxy
      - run: make test-e2e-local
        working-directory: api/proxy

  #  TODO: preprod relay and operators no longer expose a public DNS, to minimize egress costs.
  #        We need to run these tests from inside the cluster, either using a self-hosted runner or k8s cron job live test.
  # e2e-tests-preprod:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - uses: jdx/mise-action@v2
  #       with:
  #         version: ${{ env.MISE_VERSION }}
  #         experimental: true
  #         working_directory: api/proxy
  #     - run: go mod download
  #       working-directory: api/proxy
  #     - run: make test-e2e-preprod
  #       working-directory: api/proxy
  #       env:
  #         SIGNER_PRIVATE_KEY: ${{ secrets.SIGNER_PRIVATE_KEY }}
  #         ETHEREUM_RPC: ${{ secrets.ETHEREUM_RPC }}

  e2e-tests-sepolia:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
          working_directory: api/proxy
      - run: go mod download
        working-directory: api/proxy
      - run: make test-e2e-sepolia
        working-directory: api/proxy
        env:
          SIGNER_PRIVATE_KEY: ${{ secrets.SIGNER_SEPOLIA_PRIVATE_KEY }}
          ETHEREUM_RPC: ${{ secrets.ETHEREUM_SEPOLIA_RPC }}

  fuzz:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
          working_directory: api/proxy
      - run: go mod download
        working-directory: api/proxy
      - run: make test-fuzz
        working-directory: api/proxy

  build-binary:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
          working_directory: api/proxy
      - run: make build
        working-directory: api/proxy

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: BUILD_TAG=dev make docker-build
        working-directory: api/proxy
      # We also test that the docker container starts up correctly.
      - name: Run container as background process
        shell: bash
        run: |
          docker run -d \
          -p 6666:6666 \
          -e EIGENDA_PROXY_ADDR=0.0.0.0 \
          -e EIGENDA_PROXY_PORT=6666 \
          -e EIGENDA_PROXY_MEMSTORE_ENABLED=true \
          ghcr.io/layr-labs/eigenda-proxy:dev
        working-directory: api/proxy
      - name: Wait for rpc to come up
        shell: bash
        run: |
          ${{ github.workspace }}/api/proxy/scripts/wait-for.sh
