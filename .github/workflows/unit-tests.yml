name: unit-tests
on:
  push:
    branches:
      - master
  pull_request:
  merge_group:

env:
  MISE_VERSION: 2024.12.14

jobs:
  main-unit-tests:
    name: Main Tests
    runs-on: ubuntu-latest
    steps:
      - name: Add LocalStack AWS Credentials
        run: |
          mkdir -p ~/.aws
          touch ~/.aws/credentials

          echo '[default]' >> ~/.aws/credentials
          echo 'aws_access_key_id=localstack' >> ~/.aws/credentials
          echo 'aws_secret_access_key=localstack' >> ~/.aws/credentials

      - name: Set Test Profile to default
        run: |
          aws configure --profile test-profile set region us-east-1
          aws configure --profile test-profile set source_profile default

      - name: Checkout EigenDA
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2

      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - run: go version

      - name: Build and compile contracts
        run: make compile
        working-directory: contracts

      - name: Build
        run: make build

      - name: Test all
        run: COVERAGE_FILE=unit-tests-coverage.out make unit-tests
        env:
          COVERAGE_FILE: unit-tests-coverage.out

      - name: Upload coverage artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6
        with:
          name: main-unit-tests-coverage
          path: unit-tests-coverage.out

      - name: Extract coverage
        shell: bash
        run: |
          COVERAGE=$(go tool cover -func="unit-tests-coverage.out" | tail -1 | grep -Eo '[0-9]+\.[0-9]')
          echo "coverage: $COVERAGE% of statements"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: main-unit-tests-coverage
          files: unit-tests-coverage.out
          flags: unit-tests
          fail_ci_if_error: true
          verbose: true

  litt-unit-tests:
    name: LittDB Tests
    runs-on: ubuntu-latest
    steps:
      - name: Add LocalStack AWS Credentials
        run: |
          mkdir -p ~/.aws
          touch ~/.aws/credentials

          echo '[default]' >> ~/.aws/credentials
          echo 'aws_access_key_id=localstack' >> ~/.aws/credentials
          echo 'aws_secret_access_key=localstack' >> ~/.aws/credentials

      - name: Set Test Profile to default
        run: |
          aws configure --profile test-profile set region us-east-1
          aws configure --profile test-profile set source_profile default

      - name: Checkout EigenDA
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #4.2.2

      - uses: jdx/mise-action@v2
        with:
          version: ${{ env.MISE_VERSION }}
          experimental: true
      - run: go version

      - name: Build and compile contracts
        run: make compile
        working-directory: contracts

      - name: Build
        run: make build

      - name: Test LittDB
        run: COVERAGE_FILE=litt-unit-tests-coverage.out make litt-unit-tests
        env:
          COVERAGE_FILE: litt-unit-tests-coverage.out

      - name: Upload coverage artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6
        with:
          name: litt-unit-tests-coverage
          path: litt-unit-tests-coverage.out

      - name: Extract coverage
        shell: bash
        run: |
          COVERAGE=$(go tool cover -func="litt-unit-tests-coverage.out" | tail -1 | grep -Eo '[0-9]+\.[0-9]')
          echo "coverage: $COVERAGE% of statements"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: litt-unit-tests-coverage
          files: litt-unit-tests-coverage.out
          flags: litt-tests
          fail_ci_if_error: true
          verbose: true

  # Final job to satisfy branch protection rules
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [main-unit-tests, litt-unit-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.main-unit-tests.result }}" != "success" || "${{ needs.litt-unit-tests.result }}" != "success" ]]; then
            echo "One or more test jobs failed"
            exit 1
          fi
          echo "All test jobs passed successfully"

