// Code generated by MockGen. DO NOT EDIT.
// Source: core/payments/payment_vault.go
//
// Generated by this command:
//
//	mockgen -source=core/payments/payment_vault.go -destination=core/payments/mock/payment_vault.go -package=mock PaymentVault
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentVault is a mock of PaymentVault interface.
type MockPaymentVault struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentVaultMockRecorder
	isgomock struct{}
}

// MockPaymentVaultMockRecorder is the mock recorder for MockPaymentVault.
type MockPaymentVaultMockRecorder struct {
	mock *MockPaymentVault
}

// NewMockPaymentVault creates a new mock instance.
func NewMockPaymentVault(ctrl *gomock.Controller) *MockPaymentVault {
	mock := &MockPaymentVault{ctrl: ctrl}
	mock.recorder = &MockPaymentVaultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentVault) EXPECT() *MockPaymentVaultMockRecorder {
	return m.recorder
}

// GetGlobalSymbolsPerSecond mocks base method.
func (m *MockPaymentVault) GetGlobalSymbolsPerSecond(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalSymbolsPerSecond", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalSymbolsPerSecond indicates an expected call of GetGlobalSymbolsPerSecond.
func (mr *MockPaymentVaultMockRecorder) GetGlobalSymbolsPerSecond(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSymbolsPerSecond", reflect.TypeOf((*MockPaymentVault)(nil).GetGlobalSymbolsPerSecond), ctx)
}

// GetMinNumSymbols mocks base method.
func (m *MockPaymentVault) GetMinNumSymbols(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinNumSymbols", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinNumSymbols indicates an expected call of GetMinNumSymbols.
func (mr *MockPaymentVaultMockRecorder) GetMinNumSymbols(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinNumSymbols", reflect.TypeOf((*MockPaymentVault)(nil).GetMinNumSymbols), ctx)
}

// GetPricePerSymbol mocks base method.
func (m *MockPaymentVault) GetPricePerSymbol(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPricePerSymbol", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPricePerSymbol indicates an expected call of GetPricePerSymbol.
func (mr *MockPaymentVaultMockRecorder) GetPricePerSymbol(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPricePerSymbol", reflect.TypeOf((*MockPaymentVault)(nil).GetPricePerSymbol), ctx)
}

// GetTotalDeposit mocks base method.
func (m *MockPaymentVault) GetTotalDeposit(ctx context.Context, accountID common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalDeposit", ctx, accountID)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalDeposit indicates an expected call of GetTotalDeposit.
func (mr *MockPaymentVaultMockRecorder) GetTotalDeposit(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalDeposit", reflect.TypeOf((*MockPaymentVault)(nil).GetTotalDeposit), ctx, accountID)
}

// GetTotalDeposits mocks base method.
func (m *MockPaymentVault) GetTotalDeposits(ctx context.Context, accountIDs []common.Address) ([]*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalDeposits", ctx, accountIDs)
	ret0, _ := ret[0].([]*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalDeposits indicates an expected call of GetTotalDeposits.
func (mr *MockPaymentVaultMockRecorder) GetTotalDeposits(ctx, accountIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalDeposits", reflect.TypeOf((*MockPaymentVault)(nil).GetTotalDeposits), ctx, accountIDs)
}
