# Combined EigenDA V1 and V2 Configuration for Holesky Testnet

# === V1 Configuration ===

# Hex-encoded signer private key for V1
EIGENDA_PROXY_EIGENDA_SIGNER_PRIVATE_KEY_HEX="0000000000000000000100000000000000000000000000000000000000000000"

# JSON RPC node endpoint for the Ethereum network
EIGENDA_PROXY_EIGENDA_ETH_RPC=https://ethereum-holesky-rpc.publicnode.com

# RPC URL of the EigenDA disperser service for V1
EIGENDA_PROXY_EIGENDA_DISPERSER_RPC=disperser-testnet-holesky.eigenda.xyz:443

# The deployed EigenDA service manager address for V1
EIGENDA_PROXY_EIGENDA_SERVICE_MANAGER_ADDR=0xD4A7E1Bd8015057293f0D0A557088c286942e84b

# Custom quorum IDs for writing blobs. Should not include default quorums 0 or 1.
EIGENDA_PROXY_EIGENDA_CUSTOM_QUORUM_IDS=

# The number of Ethereum blocks of confirmation
EIGENDA_PROXY_EIGENDA_CONFIRMATION_DEPTH=6

# Disable point verification mode for V1
EIGENDA_PROXY_EIGENDA_DISABLE_POINT_VERIFICATION_MODE=false

# Disable TLS for gRPC communication with the EigenDA disperser (V1)
EIGENDA_PROXY_EIGENDA_GRPC_DISABLE_TLS=false

# Maximum blob length for V1. This value is permitted to be up to 16MiB
# This value is configured to be lower than the permitted maximum, since this configuration determines the amount of
# SRS data that will be read into memory. Reading in a large amount of SRS data can cause long startup times, and since
# you only actually need to read the amount of SRS data that corresponds to the size of the largest blob that will be
# sent, decreasing this value is a crude sort of optimization.
EIGENDA_PROXY_EIGENDA_MAX_BLOB_LENGTH=1MiB

# Blob encoding version to use when writing blobs from the high-level interface
EIGENDA_PROXY_EIGENDA_PUT_BLOB_ENCODING_VERSION=0

# Interval between retries when awaiting network blob finalization
EIGENDA_PROXY_EIGENDA_STATUS_QUERY_INTERVAL=5s

# Total time to wait for a response from the EigenDA disperser
EIGENDA_PROXY_EIGENDA_RESPONSE_TIMEOUT=10s

# Duration to wait for a blob to finalize after being sent for dispersal
EIGENDA_PROXY_EIGENDA_STATUS_QUERY_TIMEOUT=30m0s

# Number of times to retry blob dispersals for V1
EIGENDA_PROXY_EIGENDA_PUT_RETRIES=3

# === V2 Configuration ===

# Hex-encoded signer private key for payments with EigenDA disperser (V2)
EIGENDA_PROXY_EIGENDA_V2_SIGNER_PRIVATE_KEY_HEX="0000000000000000000100000000000000000000000000000000000000000000"

# JSON RPC node endpoint for the Ethereum network (V2)
EIGENDA_PROXY_EIGENDA_V2_ETH_RPC=https://ethereum-holesky-rpc.publicnode.com

# RPC endpoint of the EigenDA disperser (V2)
EIGENDA_PROXY_EIGENDA_V2_DISPERSER_RPC=disperser-testnet-holesky.eigenda.xyz:443

# Address of the EigenDACertVerifier contract for V2
EIGENDA_PROXY_EIGENDA_V2_CERT_VERIFIER_ADDR=0xFe52fE1940858DCb6e12153E2104aD0fDFbE1162

# Disable TLS for gRPC communication with the EigenDA disperser and retrieval subnet (V2)
EIGENDA_PROXY_EIGENDA_V2_GRPC_DISABLE_TLS=false

# Disable IFFT transformation during payload encoding (V2)
EIGENDA_PROXY_EIGENDA_V2_DISABLE_POINT_EVALUATION=false

# Number of times to retry blob dispersals for V2
EIGENDA_PROXY_EIGENDA_V2_PUT_RETRIES=3

# Maximum amount of time to wait for a blob to disperse against v2 protocol
EIGENDA_PROXY_EIGENDA_V2_DISPERSE_BLOB_TIMEOUT=2m

# Maximum amount of time to wait for blob certification against the on-chain EigenDACertVerifier
EIGENDA_PROXY_EIGENDA_V2_CERTIFY_BLOB_TIMEOUT=2m

# Duration to query for blob status updates during dispersal
EIGENDA_PROXY_EIGENDA_V2_BLOB_STATUS_POLL_INTERVAL=1s

# Timeout used when performing smart contract call operation (i.e, eth_call)
EIGENDA_PROXY_EIGENDA_V2_CONTRACT_CALL_TIMEOUT=5s

# Timeout used when querying an individual relay for blob contents
EIGENDA_PROXY_EIGENDA_V2_RELAY_TIMEOUT=5s

# Blob params version used when dispersing
EIGENDA_PROXY_EIGENDA_V2_BLOB_PARAMS_VERSION=0

# Maximum blob length for V2. This value is permitted to be up to 16MiB
# This value is configured to be lower than the permitted maximum, since this configuration determines the amount of
# SRS data that will be read into memory. Reading in a large amount of SRS data can cause long startup times, and since
# you only actually need to read the amount of SRS data that corresponds to the size of the largest blob that will be
# sent, decreasing this value is a crude sort of optimization.
EIGENDA_PROXY_EIGENDA_V2_MAX_BLOB_LENGTH=1MiB

# === Storage Configuration ===

EIGENDA_PROXY_STORAGE_BACKENDS_TO_ENABLE=V1,V2

# Enable blob dispersal and retrieval against EigenDA V2 protocol
EIGENDA_PROXY_STORAGE_DISPERSE_TO_V2=true

# === Shared KZG Configuration ===

# Directory path to SRS tables
EIGENDA_PROXY_EIGENDA_TARGET_CACHE_PATH=resources/SRSTables

# Directory path to g1.point file
EIGENDA_PROXY_EIGENDA_TARGET_KZG_G1_PATH=resources/g1.point

# Path to g2.point file
EIGENDA_PROXY_EIGENDA_TARGET_KZG_G2_PATH=resources/g2.point

# Path to g2.trailing.point file
EIGENDA_PROXY_EIGENDA_TARGET_KZG_G2_TRAILING_PATH=resources/g2.trailing.point

# Whether to read in G2 SRS points
EIGENDA_PROXY_EIGENDA_READ_G2_POINTS=true

# Whether to verify certificates received from EigenDA disperser
EIGENDA_PROXY_EIGENDA_CERT_VERIFICATION_DISABLED=false

# === Common Proxy Configuration ===

# Format the log output. Supported formats: 'text', 'terminal', 'logfmt', 'json', 'json-pretty'
EIGENDA_PROXY_LOG_FORMAT=text

# The lowest log level that will be output
EIGENDA_PROXY_LOG_LEVEL=INFO

# === Memstore Configuration ===

# Whether to use mem-store for DA logic
EIGENDA_PROXY_MEMSTORE_ENABLED=false

# Duration that a blob/commitment pair are allowed to live
EIGENDA_PROXY_MEMSTORE_EXPIRATION=25m0s

# === Metrics Configuration ===

# Metrics listening address
EIGENDA_PROXY_METRICS_ADDR=0.0.0.0

# Enable the metrics server
EIGENDA_PROXY_METRICS_ENABLED=false

# Metrics listening port
EIGENDA_PROXY_METRICS_PORT=7300

# === S3 Configuration (Optional) ===

# Access key id for S3 storage
EIGENDA_PROXY_S3_ACCESS_KEY_ID=

# Access key secret for S3 storage
EIGENDA_PROXY_S3_ACCESS_KEY_SECRET=

# Bucket name for S3 storage
EIGENDA_PROXY_S3_BUCKET=

# Endpoint for S3 storage
EIGENDA_PROXY_S3_ENDPOINT=

# Enable TLS connection to S3 endpoint
EIGENDA_PROXY_S3_ENABLE_TLS=false

# The way to authenticate to S3, options are [iam, static, public]
EIGENDA_PROXY_S3_CREDENTIAL_TYPE=static