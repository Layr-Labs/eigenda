// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractMockRollup

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// BatchHeader is an auto generated low-level Go binding around an user-defined struct.
type BatchHeader struct {
	BlobHeadersRoot       [32]byte
	QuorumNumbers         []byte
	SignedStakeForQuorums []byte
	ReferenceBlockNumber  uint32
}

// BatchMetadata is an auto generated low-level Go binding around an user-defined struct.
type BatchMetadata struct {
	BatchHeader             BatchHeader
	SignatoryRecordHash     [32]byte
	ConfirmationBlockNumber uint32
}

// BlobHeader is an auto generated low-level Go binding around an user-defined struct.
type BlobHeader struct {
	Commitment       BN254G1Point
	DataLength       uint32
	QuorumBlobParams []QuorumBlobParam
}

// BlobVerificationProof is an auto generated low-level Go binding around an user-defined struct.
type BlobVerificationProof struct {
	BatchId        uint32
	BlobIndex      uint32
	BatchMetadata  BatchMetadata
	InclusionProof []byte
	QuorumIndices  []byte
}

// QuorumBlobParam is an auto generated low-level Go binding around an user-defined struct.
type QuorumBlobParam struct {
	QuorumNumber                    uint8
	AdversaryThresholdPercentage    uint8
	ConfirmationThresholdPercentage uint8
	ChunkLength                     uint32
}

// ContractMockRollupMetaData contains all meta data concerning the ContractMockRollup contract.
var ContractMockRollupMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_eigenDAServiceManager\",\"type\":\"address\",\"internalType\":\"contractIEigenDAServiceManager\"},{\"name\":\"_tau\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"challengeCommitment\",\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"point\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"proof\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"challengeValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"commitments\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"confirmer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"dataLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"polynomialCommitment\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eigenDAServiceManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIEigenDAServiceManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"postCommitment\",\"inputs\":[{\"name\":\"blobHeader\",\"type\":\"tuple\",\"internalType\":\"structBlobHeader\",\"components\":[{\"name\":\"commitment\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"dataLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumBlobParams\",\"type\":\"tuple[]\",\"internalType\":\"structQuorumBlobParam[]\",\"components\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"adversaryThresholdPercentage\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"confirmationThresholdPercentage\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"chunkLength\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}]},{\"name\":\"blobVerificationProof\",\"type\":\"tuple\",\"internalType\":\"structBlobVerificationProof\",\"components\":[{\"name\":\"batchId\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"blobIndex\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"batchMetadata\",\"type\":\"tuple\",\"internalType\":\"structBatchMetadata\",\"components\":[{\"name\":\"batchHeader\",\"type\":\"tuple\",\"internalType\":\"structBatchHeader\",\"components\":[{\"name\":\"blobHeadersRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signedStakeForQuorums\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"referenceBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"signatoryRecordHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"confirmationBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]},{\"name\":\"inclusionProof\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"quorumIndices\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"tau\",\"inputs\":[],\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620032cb380380620032cb83398181016040528101906200003791906200024f565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060016000820151816000015560208201518160010155905050505062000296565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d582620000a8565b9050919050565b6000620000e982620000c8565b9050919050565b620000fb81620000dc565b81146200010757600080fd5b50565b6000815190506200011b81620000f0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001718262000126565b810181811067ffffffffffffffff8211171562000193576200019262000137565b5b80604052505050565b6000620001a862000099565b9050620001b6828262000166565b919050565b6000819050919050565b620001d081620001bb565b8114620001dc57600080fd5b50565b600081519050620001f081620001c5565b92915050565b6000604082840312156200020f576200020e62000121565b5b6200021b60406200019c565b905060006200022d84828501620001df565b60008301525060206200024384828501620001df565b60208301525092915050565b60008060608385031215620002695762000268620000a3565b5b600062000279858286016200010a565b92505060206200028c85828601620001f6565b9150509250929050565b61302580620002a66000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806349ce89971461005c578063b5144c731461008e578063cfc4af55146100aa578063d2d16eb2146100c9578063fc30cad0146100f9575b600080fd5b61007660048036038101906100719190611601565b610117565b604051610085939291906116cc565b60405180910390f35b6100a860048036038101906100a39190611d0e565b61018f565b005b6100b26102a0565b6040516100c0929190611d95565b60405180910390f35b6100e360048036038101906100de9190611ebf565b6102b2565b6040516100f09190611f41565b60405180910390f35b610101610475565b60405161010e9190611fbb565b60405180910390f35b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900463ffffffff16908060010160405180604001604052908160008201548152602001600182015481525050905083565b6101ba8260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610499565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001836020015163ffffffff16815260200183600001518152506003600042815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff160217905550604082015181600101600082015181600001556020820151816001015550509050505050565b60018060000154908060010154905082565b600080600360008781526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160405180604001604052908160008201548152602001600182015481525050815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e490612059565b60405180910390fd5b806020015163ffffffff168510610439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043090612111565b60405180910390fd5b61046a85846001604051806040016040529081600082015481526020016001820154815250508460400151886109cb565b915050949350505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8173ffffffffffffffffffffffffffffffffffffffff1663eccbbfc982600001516040518263ffffffff1660e01b81526004016104d69190612131565b602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190612161565b6105248260400151610a47565b14610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90612226565b60405180910390fd5b6105b881606001518260400151600001516000015161058286610a8d565b6040516020016105929190612267565b60405160208183030381529060405280519060200120846020015163ffffffff16610abd565b6105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee906122f4565b60405180910390fd5b600080600090505b846040015151811015610900578460400151818151811061062357610622612314565b5b60200260200101516000015160ff16836040015160000151602001518460800151838151811061065657610655612314565b5b602001015160f81c60f81b60f81c60ff168151811061067857610677612314565b5b602001015160f81c60f81b60f81c60ff16146106c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c0906123b5565b60405180910390fd5b846040015181815181106106e0576106df612314565b5b60200260200101516040015160ff168560400151828151811061070657610705612314565b5b60200260200101516020015160ff1610610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c9061246d565b60405180910390fd5b6000610786858760400151848151811061077257610771612314565b5b60200260200101516000015160ff16610ad6565b905060008160ff161115610800578060ff16866040015183815181106107af576107ae612314565b5b60200260200101516020015160ff1610156107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f690612525565b60405180910390fd5b5b8560400151828151811061081757610816612314565b5b60200260200101516040015160ff16846040015160000151604001518560800151848151811061084a57610849612314565b5b602001015160f81c60f81b60f81c60ff168151811061086c5761086b612314565b5b602001015160f81c60f81b60f81c60ff1610156108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b5906125dd565b60405180910390fd5b6108ea83876040015184815181106108d9576108d8612314565b5b602002602001015160000151610bf1565b92505080806108f89061262c565b9150506105ff565b506109866109808473ffffffffffffffffffffffffffffffffffffffff1663e15234ff6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610952573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061097b9190612718565b610c05565b82610d2c565b6109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc906127f9565b60405180910390fd5b50505050565b6000806109de6109d9610d3b565b610d5f565b9050610a3b610a086109f98984610e1d90919063ffffffff16565b87610efa90919063ffffffff16565b84610a2e610a1f8a86610e1d90919063ffffffff16565b88610efa90919063ffffffff16565b610a36610ffd565b6110c7565b91505095945050505050565b6000610a868260000151604051602001610a6191906128f6565b60405160208183030381529060405280519060200120836020015184604001516113c6565b9050919050565b600081604051602001610aa09190612aaa565b604051602081830303815290604052805190602001209050919050565b600083610acb8685856113fc565b149050949350505050565b6000818373ffffffffffffffffffffffffffffffffffffffff16638687feae6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b24573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b4d9190612718565b511115610beb578273ffffffffffffffffffffffffffffffffffffffff16638687feae6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b9f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bc89190612718565b8281518110610bda57610bd9612314565b5b602001015160f81c60f81b60f81c90505b92915050565b60008160ff166001901b8317905092915050565b600061010082511115610c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4490612b64565b60405180910390fd5b600082511415610c605760009050610d27565b60008083600081518110610c7757610c76612314565b5b602001015160f81c60f81b60f81c60ff166001901b91506000600190505b8451811015610d2057848181518110610cb157610cb0612314565b5b602001015160f81c60f81b60f81c60ff166001901b9150828211610d0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0190612c1c565b60405180910390fd5b818317925080610d199061262c565b9050610c95565b5081925050505b919050565b60008282841614905092915050565b610d436114cc565b6040518060400160405280600181526020016002815250905090565b610d676114cc565b60008260000151148015610d7f575060008260200151145b15610da25760405180604001604052806000815260200160008152509050610e18565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478460200151610de79190612c6b565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610e129190612c9c565b81525090505b919050565b610e256114cc565b610e2d6114e6565b836000015181600060038110610e4657610e45612314565b5b602002018181525050836020015181600160038110610e6857610e67612314565b5b6020020181815250508281600260038110610e8657610e85612314565b5b602002018181525050600060408360608460076107d05a03fa90508060008114610eaf57610eb1565bfe5b5080610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee990612d1c565b60405180910390fd5b505092915050565b610f026114cc565b610f0a611508565b836000015181600060048110610f2357610f22612314565b5b602002018181525050836020015181600160048110610f4557610f44612314565b5b602002018181525050826000015181600260048110610f6757610f66612314565b5b602002018181525050826020015181600360048110610f8957610f88612314565b5b602002018181525050600060408360808460066107d05a03fa90508060008114610fb257610fb4565bfe5b5080610ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fec90612d88565b60405180910390fd5b505092915050565b61100561152a565b604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815250815250905090565b600080604051806040016040528087815260200185815250905060006040518060400160405280878152602001858152509050611102611550565b60005b600281101561132b57600060068261111d9190612da8565b905084826002811061113257611131612314565b5b602002015160000151836000836111499190612e02565b600c811061115a57611159612314565b5b60200201818152505084826002811061117657611175612314565b5b6020020151602001518360018361118d9190612e02565b600c811061119e5761119d612314565b5b6020020181815250508382600281106111ba576111b9612314565b5b6020020151600001516000600281106111d6576111d5612314565b5b6020020151836002836111e99190612e02565b600c81106111fa576111f9612314565b5b60200201818152505083826002811061121657611215612314565b5b60200201516000015160016002811061123257611231612314565b5b6020020151836003836112459190612e02565b600c811061125657611255612314565b5b60200201818152505083826002811061127257611271612314565b5b60200201516020015160006002811061128e5761128d612314565b5b6020020151836004836112a19190612e02565b600c81106112b2576112b1612314565b5b6020020181815250508382600281106112ce576112cd612314565b5b6020020151602001516001600281106112ea576112e9612314565b5b6020020151836005836112fd9190612e02565b600c811061130e5761130d612314565b5b6020020181815250505080806113239061262c565b915050611105565b50611334611573565b60006020826020600c028560086107d05a03fa9050806000811461135757611359565bfe5b508061139a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139190612ea4565b60405180910390fd5b6000826000600181106113b0576113af612314565b5b6020020151141595505050505050949350505050565b60008383836040516020016113dd93929190612efa565b6040516020818303038152906040528051906020012090509392505050565b6000806020855161140d9190612c6b565b1461144d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144490612fcf565b60405180910390fd5b60008390506000602090505b855181116114c05760006002856114709190612c6b565b1415611493578160005280860151602052604060002091506002840493506114ac565b8086015160005281602052604060002091506002840493505b6020816114b99190612e02565b9050611459565b50809150509392505050565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b604051806040016040528061153d611595565b815260200161154a611595565b81525090565b604051806101800160405280600c90602082028036833780820191505090505090565b6040518060200160405280600190602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6115de816115cb565b81146115e957600080fd5b50565b6000813590506115fb816115d5565b92915050565b600060208284031215611617576116166115c1565b5b6000611625848285016115ec565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116598261162e565b9050919050565b6116698161164e565b82525050565b600063ffffffff82169050919050565b6116888161166f565b82525050565b611697816115cb565b82525050565b6040820160008201516116b3600085018261168e565b5060208201516116c6602085018261168e565b50505050565b60006080820190506116e16000830186611660565b6116ee602083018561167f565b6116fb604083018461169d565b949350505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61175182611708565b810181811067ffffffffffffffff821117156117705761176f611719565b5b80604052505050565b60006117836115b7565b905061178f8282611748565b919050565b600080fd5b6000604082840312156117af576117ae611703565b5b6117b96040611779565b905060006117c9848285016115ec565b60008301525060206117dd848285016115ec565b60208301525092915050565b6117f28161166f565b81146117fd57600080fd5b50565b60008135905061180f816117e9565b92915050565b600080fd5b600067ffffffffffffffff82111561183557611834611719565b5b602082029050602081019050919050565b600080fd5b600060ff82169050919050565b6118618161184b565b811461186c57600080fd5b50565b60008135905061187e81611858565b92915050565b60006080828403121561189a57611899611703565b5b6118a46080611779565b905060006118b48482850161186f565b60008301525060206118c88482850161186f565b60208301525060406118dc8482850161186f565b60408301525060606118f084828501611800565b60608301525092915050565b600061190f61190a8461181a565b611779565b9050808382526020820190506080840283018581111561193257611931611846565b5b835b8181101561195b57806119478882611884565b845260208401935050608081019050611934565b5050509392505050565b600082601f83011261197a57611979611815565b5b813561198a8482602086016118fc565b91505092915050565b6000608082840312156119a9576119a8611703565b5b6119b36060611779565b905060006119c384828501611799565b60008301525060406119d784828501611800565b602083015250606082013567ffffffffffffffff8111156119fb576119fa611794565b5b611a0784828501611965565b60408301525092915050565b6000819050919050565b611a2681611a13565b8114611a3157600080fd5b50565b600081359050611a4381611a1d565b92915050565b600080fd5b600067ffffffffffffffff821115611a6957611a68611719565b5b611a7282611708565b9050602081019050919050565b82818337600083830152505050565b6000611aa1611a9c84611a4e565b611779565b905082815260208101848484011115611abd57611abc611a49565b5b611ac8848285611a7f565b509392505050565b600082601f830112611ae557611ae4611815565b5b8135611af5848260208601611a8e565b91505092915050565b600060808284031215611b1457611b13611703565b5b611b1e6080611779565b90506000611b2e84828501611a34565b600083015250602082013567ffffffffffffffff811115611b5257611b51611794565b5b611b5e84828501611ad0565b602083015250604082013567ffffffffffffffff811115611b8257611b81611794565b5b611b8e84828501611ad0565b6040830152506060611ba284828501611800565b60608301525092915050565b600060608284031215611bc457611bc3611703565b5b611bce6060611779565b9050600082013567ffffffffffffffff811115611bee57611bed611794565b5b611bfa84828501611afe565b6000830152506020611c0e84828501611a34565b6020830152506040611c2284828501611800565b60408301525092915050565b600060a08284031215611c4457611c43611703565b5b611c4e60a0611779565b90506000611c5e84828501611800565b6000830152506020611c7284828501611800565b602083015250604082013567ffffffffffffffff811115611c9657611c95611794565b5b611ca284828501611bae565b604083015250606082013567ffffffffffffffff811115611cc657611cc5611794565b5b611cd284828501611ad0565b606083015250608082013567ffffffffffffffff811115611cf657611cf5611794565b5b611d0284828501611ad0565b60808301525092915050565b60008060408385031215611d2557611d246115c1565b5b600083013567ffffffffffffffff811115611d4357611d426115c6565b5b611d4f85828601611993565b925050602083013567ffffffffffffffff811115611d7057611d6f6115c6565b5b611d7c85828601611c2e565b9150509250929050565b611d8f816115cb565b82525050565b6000604082019050611daa6000830185611d86565b611db76020830184611d86565b9392505050565b600067ffffffffffffffff821115611dd957611dd8611719565b5b602082029050919050565b6000611df7611df284611dbe565b611779565b90508060208402830185811115611e1157611e10611846565b5b835b81811015611e3a5780611e2688826115ec565b845260208401935050602081019050611e13565b5050509392505050565b600082601f830112611e5957611e58611815565b5b6002611e66848285611de4565b91505092915050565b600060808284031215611e8557611e84611703565b5b611e8f6040611779565b90506000611e9f84828501611e44565b6000830152506040611eb384828501611e44565b60208301525092915050565b60008060008060e08587031215611ed957611ed86115c1565b5b6000611ee7878288016115ec565b9450506020611ef8878288016115ec565b9350506040611f0987828801611e6f565b92505060c0611f1a878288016115ec565b91505092959194509250565b60008115159050919050565b611f3b81611f26565b82525050565b6000602082019050611f566000830184611f32565b92915050565b6000819050919050565b6000611f81611f7c611f778461162e565b611f5c565b61162e565b9050919050565b6000611f9382611f66565b9050919050565b6000611fa582611f88565b9050919050565b611fb581611f9a565b82525050565b6000602082019050611fd06000830184611fac565b92915050565b600082825260208201905092915050565b7f4d6f636b526f6c6c75702e6368616c6c656e6765436f6d6d69746d656e743a2060008201527f436f6d6d69746d656e74206e6f7420706f737465640000000000000000000000602082015250565b6000612043603583611fd6565b915061204e82611fe7565b604082019050919050565b6000602082019050818103600083015261207281612036565b9050919050565b7f4d6f636b526f6c6c75702e6368616c6c656e6765436f6d6d69746d656e743a2060008201527f506f696e74206d757374206265206c657373207468616e2064617461206c656e60208201527f6774680000000000000000000000000000000000000000000000000000000000604082015250565b60006120fb604383611fd6565b915061210682612079565b606082019050919050565b6000602082019050818103600083015261212a816120ee565b9050919050565b6000602082019050612146600083018461167f565b92915050565b60008151905061215b81611a1d565b92915050565b600060208284031215612177576121766115c1565b5b60006121858482850161214c565b91505092915050565b7f456967656e4441526f6c6c75705574696c732e766572696679426c6f623a206260008201527f617463684d6574616461746120646f6573206e6f74206d617463682073746f7260208201527f6564206d65746164617461000000000000000000000000000000000000000000604082015250565b6000612210604b83611fd6565b915061221b8261218e565b606082019050919050565b6000602082019050818103600083015261223f81612203565b9050919050565b6000819050919050565b61226161225c82611a13565b612246565b82525050565b60006122738284612250565b60208201915081905092915050565b7f456967656e4441526f6c6c75705574696c732e766572696679426c6f623a206960008201527f6e636c7573696f6e2070726f6f6620697320696e76616c696400000000000000602082015250565b60006122de603983611fd6565b91506122e982612282565b604082019050919050565b6000602082019050818103600083015261230d816122d1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f456967656e4441526f6c6c75705574696c732e766572696679426c6f623a207160008201527f756f72756d4e756d62657220646f6573206e6f74206d61746368000000000000602082015250565b600061239f603a83611fd6565b91506123aa82612343565b604082019050919050565b600060208201905081810360008301526123ce81612392565b9050919050565b7f456967656e4441526f6c6c75705574696c732e766572696679426c6f623a206160008201527f64766572736172795468726573686f6c6450657263656e74616765206973206e60208201527f6f742076616c6964000000000000000000000000000000000000000000000000604082015250565b6000612457604883611fd6565b9150612462826123d5565b606082019050919050565b600060208201905081810360008301526124868161244a565b9050919050565b7f456967656e4441526f6c6c75705574696c732e766572696679426c6f623a206160008201527f64766572736172795468726573686f6c6450657263656e74616765206973206e60208201527f6f74206d65740000000000000000000000000000000000000000000000000000604082015250565b600061250f604683611fd6565b915061251a8261248d565b606082019050919050565b6000602082019050818103600083015261253e81612502565b9050919050565b7f456967656e4441526f6c6c75705574696c732e766572696679426c6f623a206360008201527f6f6e6669726d6174696f6e5468726573686f6c6450657263656e74616765206960208201527f73206e6f74206d65740000000000000000000000000000000000000000000000604082015250565b60006125c7604983611fd6565b91506125d282612545565b606082019050919050565b600060208201905081810360008301526125f6816125ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612637826115cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561266a576126696125fd565b5b600182019050919050565b60005b83811015612693578082015181840152602081019050612678565b838111156126a2576000848401525b50505050565b60006126bb6126b684611a4e565b611779565b9050828152602081018484840111156126d7576126d6611a49565b5b6126e2848285612675565b509392505050565b600082601f8301126126ff576126fe611815565b5b815161270f8482602086016126a8565b91505092915050565b60006020828403121561272e5761272d6115c1565b5b600082015167ffffffffffffffff81111561274c5761274b6115c6565b5b612758848285016126ea565b91505092915050565b7f456967656e4441526f6c6c75705574696c732e766572696679426c6f623a207260008201527f657175697265642071756f72756d7320617265206e6f7420612073756273657460208201527f206f662074686520636f6e6669726d65642071756f72756d7300000000000000604082015250565b60006127e3605983611fd6565b91506127ee82612761565b606082019050919050565b60006020820190508181036000830152612812816127d6565b9050919050565b61282281611a13565b82525050565b600081519050919050565b600082825260208201905092915050565b600061284f82612828565b6128598185612833565b9350612869818560208601612675565b61287281611708565b840191505092915050565b6128868161166f565b82525050565b60006080830160008301516128a46000860182612819565b50602083015184820360208601526128bc8282612844565b915050604083015184820360408601526128d68282612844565b91505060608301516128eb606086018261287d565b508091505092915050565b60006020820190508181036000830152612910818461288c565b905092915050565b60408201600082015161292e600085018261168e565b506020820151612941602085018261168e565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61297c8161184b565b82525050565b6080820160008201516129986000850182612973565b5060208201516129ab6020850182612973565b5060408201516129be6040850182612973565b5060608201516129d1606085018261287d565b50505050565b60006129e38383612982565b60808301905092915050565b6000602082019050919050565b6000612a0782612947565b612a118185612952565b9350612a1c83612963565b8060005b83811015612a4d578151612a3488826129d7565b9750612a3f836129ef565b925050600181019050612a20565b5085935050505092915050565b6000608083016000830151612a726000860182612918565b506020830151612a85604086018261287d565b5060408301518482036060860152612a9d82826129fc565b9150508091505092915050565b60006020820190508181036000830152612ac48184612a5a565b905092915050565b7f4269746d61705574696c732e6f72646572656442797465734172726179546f4260008201527f69746d61703a206f7264657265644279746573417272617920697320746f6f2060208201527f6c6f6e6700000000000000000000000000000000000000000000000000000000604082015250565b6000612b4e604483611fd6565b9150612b5982612acc565b606082019050919050565b60006020820190508181036000830152612b7d81612b41565b9050919050565b7f4269746d61705574696c732e6f72646572656442797465734172726179546f4260008201527f69746d61703a206f72646572656442797465734172726179206973206e6f742060208201527f6f72646572656400000000000000000000000000000000000000000000000000604082015250565b6000612c06604783611fd6565b9150612c1182612b84565b606082019050919050565b60006020820190508181036000830152612c3581612bf9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c76826115cb565b9150612c81836115cb565b925082612c9157612c90612c3c565b5b828206905092915050565b6000612ca7826115cb565b9150612cb2836115cb565b925082821015612cc557612cc46125fd565b5b828203905092915050565b7f65632d6d756c2d6661696c656400000000000000000000000000000000000000600082015250565b6000612d06600d83611fd6565b9150612d1182612cd0565b602082019050919050565b60006020820190508181036000830152612d3581612cf9565b9050919050565b7f65632d6164642d6661696c656400000000000000000000000000000000000000600082015250565b6000612d72600d83611fd6565b9150612d7d82612d3c565b602082019050919050565b60006020820190508181036000830152612da181612d65565b9050919050565b6000612db3826115cb565b9150612dbe836115cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612df757612df66125fd565b5b828202905092915050565b6000612e0d826115cb565b9150612e18836115cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e4d57612e4c6125fd565b5b828201905092915050565b7f70616972696e672d6f70636f64652d6661696c65640000000000000000000000600082015250565b6000612e8e601583611fd6565b9150612e9982612e58565b602082019050919050565b60006020820190508181036000830152612ebd81612e81565b9050919050565b60008160e01b9050919050565b6000612edc82612ec4565b9050919050565b612ef4612eef8261166f565b612ed1565b82525050565b6000612f068286612250565b602082019150612f168285612250565b602082019150612f268284612ee3565b600482019150819050949350505050565b7f4d65726b6c652e70726f63657373496e636c7573696f6e50726f6f664b65636360008201527f616b3a2070726f6f66206c656e6774682073686f756c642062652061206d756c60208201527f7469706c65206f66203332000000000000000000000000000000000000000000604082015250565b6000612fb9604b83611fd6565b9150612fc482612f37565b606082019050919050565b60006020820190508181036000830152612fe881612fac565b905091905056fea26469706673582212202eed978c23e68f1ba8fe85055db5df2d7ba9cc4accfe2cbc3a4555d298501e6664736f6c634300080c0033",
}

// ContractMockRollupABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMockRollupMetaData.ABI instead.
var ContractMockRollupABI = ContractMockRollupMetaData.ABI

// ContractMockRollupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMockRollupMetaData.Bin instead.
var ContractMockRollupBin = ContractMockRollupMetaData.Bin

// DeployContractMockRollup deploys a new Ethereum contract, binding an instance of ContractMockRollup to it.
func DeployContractMockRollup(auth *bind.TransactOpts, backend bind.ContractBackend, _eigenDAServiceManager common.Address, _tau BN254G1Point) (common.Address, *types.Transaction, *ContractMockRollup, error) {
	parsed, err := ContractMockRollupMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractMockRollupBin), backend, _eigenDAServiceManager, _tau)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractMockRollup{ContractMockRollupCaller: ContractMockRollupCaller{contract: contract}, ContractMockRollupTransactor: ContractMockRollupTransactor{contract: contract}, ContractMockRollupFilterer: ContractMockRollupFilterer{contract: contract}}, nil
}

// ContractMockRollup is an auto generated Go binding around an Ethereum contract.
type ContractMockRollup struct {
	ContractMockRollupCaller     // Read-only binding to the contract
	ContractMockRollupTransactor // Write-only binding to the contract
	ContractMockRollupFilterer   // Log filterer for contract events
}

// ContractMockRollupCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractMockRollupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMockRollupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractMockRollupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMockRollupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractMockRollupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMockRollupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractMockRollupSession struct {
	Contract     *ContractMockRollup // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractMockRollupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractMockRollupCallerSession struct {
	Contract *ContractMockRollupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ContractMockRollupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractMockRollupTransactorSession struct {
	Contract     *ContractMockRollupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ContractMockRollupRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractMockRollupRaw struct {
	Contract *ContractMockRollup // Generic contract binding to access the raw methods on
}

// ContractMockRollupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractMockRollupCallerRaw struct {
	Contract *ContractMockRollupCaller // Generic read-only contract binding to access the raw methods on
}

// ContractMockRollupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractMockRollupTransactorRaw struct {
	Contract *ContractMockRollupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractMockRollup creates a new instance of ContractMockRollup, bound to a specific deployed contract.
func NewContractMockRollup(address common.Address, backend bind.ContractBackend) (*ContractMockRollup, error) {
	contract, err := bindContractMockRollup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractMockRollup{ContractMockRollupCaller: ContractMockRollupCaller{contract: contract}, ContractMockRollupTransactor: ContractMockRollupTransactor{contract: contract}, ContractMockRollupFilterer: ContractMockRollupFilterer{contract: contract}}, nil
}

// NewContractMockRollupCaller creates a new read-only instance of ContractMockRollup, bound to a specific deployed contract.
func NewContractMockRollupCaller(address common.Address, caller bind.ContractCaller) (*ContractMockRollupCaller, error) {
	contract, err := bindContractMockRollup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMockRollupCaller{contract: contract}, nil
}

// NewContractMockRollupTransactor creates a new write-only instance of ContractMockRollup, bound to a specific deployed contract.
func NewContractMockRollupTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractMockRollupTransactor, error) {
	contract, err := bindContractMockRollup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMockRollupTransactor{contract: contract}, nil
}

// NewContractMockRollupFilterer creates a new log filterer instance of ContractMockRollup, bound to a specific deployed contract.
func NewContractMockRollupFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractMockRollupFilterer, error) {
	contract, err := bindContractMockRollup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractMockRollupFilterer{contract: contract}, nil
}

// bindContractMockRollup binds a generic wrapper to an already deployed contract.
func bindContractMockRollup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMockRollupMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMockRollup *ContractMockRollupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMockRollup.Contract.ContractMockRollupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMockRollup *ContractMockRollupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMockRollup.Contract.ContractMockRollupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMockRollup *ContractMockRollupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMockRollup.Contract.ContractMockRollupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMockRollup *ContractMockRollupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMockRollup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMockRollup *ContractMockRollupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMockRollup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMockRollup *ContractMockRollupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMockRollup.Contract.contract.Transact(opts, method, params...)
}

// Commitments is a free data retrieval call binding the contract method 0x49ce8997.
//
// Solidity: function commitments(uint256 ) view returns(address confirmer, uint32 dataLength, (uint256,uint256) polynomialCommitment)
func (_ContractMockRollup *ContractMockRollupCaller) Commitments(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Confirmer            common.Address
	DataLength           uint32
	PolynomialCommitment BN254G1Point
}, error) {
	var out []interface{}
	err := _ContractMockRollup.contract.Call(opts, &out, "commitments", arg0)

	outstruct := new(struct {
		Confirmer            common.Address
		DataLength           uint32
		PolynomialCommitment BN254G1Point
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Confirmer = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.DataLength = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.PolynomialCommitment = *abi.ConvertType(out[2], new(BN254G1Point)).(*BN254G1Point)

	return *outstruct, err

}

// Commitments is a free data retrieval call binding the contract method 0x49ce8997.
//
// Solidity: function commitments(uint256 ) view returns(address confirmer, uint32 dataLength, (uint256,uint256) polynomialCommitment)
func (_ContractMockRollup *ContractMockRollupSession) Commitments(arg0 *big.Int) (struct {
	Confirmer            common.Address
	DataLength           uint32
	PolynomialCommitment BN254G1Point
}, error) {
	return _ContractMockRollup.Contract.Commitments(&_ContractMockRollup.CallOpts, arg0)
}

// Commitments is a free data retrieval call binding the contract method 0x49ce8997.
//
// Solidity: function commitments(uint256 ) view returns(address confirmer, uint32 dataLength, (uint256,uint256) polynomialCommitment)
func (_ContractMockRollup *ContractMockRollupCallerSession) Commitments(arg0 *big.Int) (struct {
	Confirmer            common.Address
	DataLength           uint32
	PolynomialCommitment BN254G1Point
}, error) {
	return _ContractMockRollup.Contract.Commitments(&_ContractMockRollup.CallOpts, arg0)
}

// EigenDAServiceManager is a free data retrieval call binding the contract method 0xfc30cad0.
//
// Solidity: function eigenDAServiceManager() view returns(address)
func (_ContractMockRollup *ContractMockRollupCaller) EigenDAServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMockRollup.contract.Call(opts, &out, "eigenDAServiceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EigenDAServiceManager is a free data retrieval call binding the contract method 0xfc30cad0.
//
// Solidity: function eigenDAServiceManager() view returns(address)
func (_ContractMockRollup *ContractMockRollupSession) EigenDAServiceManager() (common.Address, error) {
	return _ContractMockRollup.Contract.EigenDAServiceManager(&_ContractMockRollup.CallOpts)
}

// EigenDAServiceManager is a free data retrieval call binding the contract method 0xfc30cad0.
//
// Solidity: function eigenDAServiceManager() view returns(address)
func (_ContractMockRollup *ContractMockRollupCallerSession) EigenDAServiceManager() (common.Address, error) {
	return _ContractMockRollup.Contract.EigenDAServiceManager(&_ContractMockRollup.CallOpts)
}

// Tau is a free data retrieval call binding the contract method 0xcfc4af55.
//
// Solidity: function tau() view returns(uint256 X, uint256 Y)
func (_ContractMockRollup *ContractMockRollupCaller) Tau(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _ContractMockRollup.contract.Call(opts, &out, "tau")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Tau is a free data retrieval call binding the contract method 0xcfc4af55.
//
// Solidity: function tau() view returns(uint256 X, uint256 Y)
func (_ContractMockRollup *ContractMockRollupSession) Tau() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _ContractMockRollup.Contract.Tau(&_ContractMockRollup.CallOpts)
}

// Tau is a free data retrieval call binding the contract method 0xcfc4af55.
//
// Solidity: function tau() view returns(uint256 X, uint256 Y)
func (_ContractMockRollup *ContractMockRollupCallerSession) Tau() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _ContractMockRollup.Contract.Tau(&_ContractMockRollup.CallOpts)
}

// ChallengeCommitment is a paid mutator transaction binding the contract method 0xd2d16eb2.
//
// Solidity: function challengeCommitment(uint256 timestamp, uint256 point, (uint256[2],uint256[2]) proof, uint256 challengeValue) returns(bool)
func (_ContractMockRollup *ContractMockRollupTransactor) ChallengeCommitment(opts *bind.TransactOpts, timestamp *big.Int, point *big.Int, proof BN254G2Point, challengeValue *big.Int) (*types.Transaction, error) {
	return _ContractMockRollup.contract.Transact(opts, "challengeCommitment", timestamp, point, proof, challengeValue)
}

// ChallengeCommitment is a paid mutator transaction binding the contract method 0xd2d16eb2.
//
// Solidity: function challengeCommitment(uint256 timestamp, uint256 point, (uint256[2],uint256[2]) proof, uint256 challengeValue) returns(bool)
func (_ContractMockRollup *ContractMockRollupSession) ChallengeCommitment(timestamp *big.Int, point *big.Int, proof BN254G2Point, challengeValue *big.Int) (*types.Transaction, error) {
	return _ContractMockRollup.Contract.ChallengeCommitment(&_ContractMockRollup.TransactOpts, timestamp, point, proof, challengeValue)
}

// ChallengeCommitment is a paid mutator transaction binding the contract method 0xd2d16eb2.
//
// Solidity: function challengeCommitment(uint256 timestamp, uint256 point, (uint256[2],uint256[2]) proof, uint256 challengeValue) returns(bool)
func (_ContractMockRollup *ContractMockRollupTransactorSession) ChallengeCommitment(timestamp *big.Int, point *big.Int, proof BN254G2Point, challengeValue *big.Int) (*types.Transaction, error) {
	return _ContractMockRollup.Contract.ChallengeCommitment(&_ContractMockRollup.TransactOpts, timestamp, point, proof, challengeValue)
}

// PostCommitment is a paid mutator transaction binding the contract method 0xb5144c73.
//
// Solidity: function postCommitment(((uint256,uint256),uint32,(uint8,uint8,uint8,uint32)[]) blobHeader, (uint32,uint32,((bytes32,bytes,bytes,uint32),bytes32,uint32),bytes,bytes) blobVerificationProof) returns()
func (_ContractMockRollup *ContractMockRollupTransactor) PostCommitment(opts *bind.TransactOpts, blobHeader BlobHeader, blobVerificationProof BlobVerificationProof) (*types.Transaction, error) {
	return _ContractMockRollup.contract.Transact(opts, "postCommitment", blobHeader, blobVerificationProof)
}

// PostCommitment is a paid mutator transaction binding the contract method 0xb5144c73.
//
// Solidity: function postCommitment(((uint256,uint256),uint32,(uint8,uint8,uint8,uint32)[]) blobHeader, (uint32,uint32,((bytes32,bytes,bytes,uint32),bytes32,uint32),bytes,bytes) blobVerificationProof) returns()
func (_ContractMockRollup *ContractMockRollupSession) PostCommitment(blobHeader BlobHeader, blobVerificationProof BlobVerificationProof) (*types.Transaction, error) {
	return _ContractMockRollup.Contract.PostCommitment(&_ContractMockRollup.TransactOpts, blobHeader, blobVerificationProof)
}

// PostCommitment is a paid mutator transaction binding the contract method 0xb5144c73.
//
// Solidity: function postCommitment(((uint256,uint256),uint32,(uint8,uint8,uint8,uint32)[]) blobHeader, (uint32,uint32,((bytes32,bytes,bytes,uint32),bytes32,uint32),bytes,bytes) blobVerificationProof) returns()
func (_ContractMockRollup *ContractMockRollupTransactorSession) PostCommitment(blobHeader BlobHeader, blobVerificationProof BlobVerificationProof) (*types.Transaction, error) {
	return _ContractMockRollup.Contract.PostCommitment(&_ContractMockRollup.TransactOpts, blobHeader, blobVerificationProof)
}
