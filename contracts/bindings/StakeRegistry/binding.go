// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractStakeRegistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakeRegistryOperatorStakeUpdate is an auto generated low-level Go binding around an user-defined struct.
type IStakeRegistryOperatorStakeUpdate struct {
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
	Stake                 *big.Int
}

// IVoteWeigherStrategyAndWeightingMultiplier is an auto generated low-level Go binding around an user-defined struct.
type IVoteWeigherStrategyAndWeightingMultiplier struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ContractStakeRegistryMetaData contains all meta data concerning the ContractStakeRegistry contract.
var ContractStakeRegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"},{\"name\":\"_strategyManager\",\"type\":\"address\",\"internalType\":\"contractIStrategyManager\"},{\"name\":\"_serviceManager\",\"type\":\"address\",\"internalType\":\"contractIServiceManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"MAX_QUORUM_COUNT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MAX_WEIGHING_FUNCTION_LENGTH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"WEIGHTING_DIVISOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addStrategiesConsideredAndMultipliers\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"_newStrategiesConsideredAndMultipliers\",\"type\":\"tuple[]\",\"internalType\":\"structIVoteWeigher.StrategyAndWeightingMultiplier[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createQuorum\",\"inputs\":[{\"name\":\"_strategiesConsideredAndMultipliers\",\"type\":\"tuple[]\",\"internalType\":\"structIVoteWeigher.StrategyAndWeightingMultiplier[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperator\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getCurrentOperatorStakeForQuorum\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentTotalStakeForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLengthOfOperatorIdStakeHistoryForQuorum\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLengthOfTotalStakeHistoryForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMostRecentStakeUpdateByOperatorId\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIStakeRegistry.OperatorStakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorIdToStakeHistory\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIStakeRegistry.OperatorStakeUpdate[]\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeForOperatorIdForQuorumAtBlockNumber\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeForQuorumAtBlockNumberFromOperatorIdAndIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeUpdateForQuorumFromOperatorIdAndIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIStakeRegistry.OperatorStakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeAtBlockNumberFromIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeIndicesByQuorumNumbersAtBlockNumber\",\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeUpdateForQuorumFromIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIStakeRegistry.OperatorStakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_minimumStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"_quorumStrategiesConsideredAndMultipliers\",\"type\":\"tuple[][]\",\"internalType\":\"structIVoteWeigher.StrategyAndWeightingMultiplier[][]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"minimumStakeForQuorum\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"modifyStrategyWeights\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"strategyIndices\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"newMultipliers\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"quorumCount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeStrategiesConsideredAndMultipliers\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"indicesToRemove\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"serviceManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIServiceManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setMinimumStakeForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slasher\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractISlasher\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategiesConsideredAndMultipliers\",\"inputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategiesConsideredAndMultipliersLength\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyAndWeightingMultiplierForQuorumByIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIVoteWeigher.StrategyAndWeightingMultiplier\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategyManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"updateStakes\",\"inputs\":[{\"name\":\"operators\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"weightOfOperatorForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MinimumStakeForQuorumUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QuorumCreated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StakeUpdate\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"stake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyAddedToQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyMultiplierUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyRemovedFromQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"}],\"anonymous\":false}]",
	Bin: "0x6101206040523480156200001257600080fd5b50604051620040a0380380620040a083398101604081905262000035916200024a565b8282828181816001600160a01b031660a0816001600160a01b031681525050816001600160a01b031663df5cf7236040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000093573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b991906200029e565b6001600160a01b03166080816001600160a01b031681525050816001600160a01b031663b13442716040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013791906200029e565b6001600160a01b0390811660c052811660e052620001546200016f565b505050506001600160a01b03166101005250620002c5915050565b600054610100900460ff1615620001dc5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156200022f576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200024757600080fd5b50565b6000806000606084860312156200026057600080fd5b83516200026d8162000231565b6020850151909350620002808162000231565b6040850151909250620002938162000231565b809150509250925092565b600060208284031215620002b157600080fd5b8151620002be8162000231565b9392505050565b60805160a05160c05160e05161010051613d506200035060003960008181610395015281816108de015281816117fd01528181611bb40152611c940152600081816102c401528181610b9a01528181610f2c015281816114f4015281816116480152611734015260006104f20152600061030301526000818161059e01526107790152613d506000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806399eed4ee11610125578063c8294c56116100ad578063df5cf7231161007c578063df5cf72314610599578063e192e9ad146105c0578063e25427dd146105e0578063e89c0a00146105f3578063eb92199c1461060657600080fd5b8063c8294c561461054d578063c8f739d014610560578063cd050d9c14610573578063ce977ec31461058657600080fd5b8063a6734667116100f4578063a6734667146104e5578063b1344271146104ed578063bba549fa14610514578063bc9a40c314610527578063bd29b8cd1461053a57600080fd5b806399eed4ee146104755780639aa1653d146104885780639e8ca620146104af578063a43cde89146104d257600080fd5b80635e5a6775116101a85780636e8f03ca116101775780636e8f03ca146103b75780637c172347146103e85780637cc0d75f146104025780637ed9430f14610442578063944472a91461045557600080fd5b80635e5a67751461034d5780635f2948ec1461036a5780636ab538d41461037d5780636d14a9871461039057600080fd5b80632b3d8816116101ef5780632b3d8816146102995780632c2a5d2b146102ac5780633998fdd3146102bf57806339b70e38146102fe578063480858661461032557600080fd5b80631b327225146102215780631f9b74e014610251578063248d6573146102645780632550477714610284575b600080fd5b61023461022f366004613133565b610627565b6040516001600160601b0390911681526020015b60405180910390f35b61023461025f366004613184565b61068b565b6102776102723660046131bb565b61083a565b60405161024891906131ee565b61029761029236600461326b565b6108d3565b005b6102976102a736600461330a565b610b98565b6102976102ba36600461335c565b610f2a565b6102e67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610248565b6102e67f000000000000000000000000000000000000000000000000000000000000000081565b610338610333366004613133565b611260565b60405163ffffffff9091168152602001610248565b61035c670de0b6b3a764000081565b604051908152602001610248565b6102976103783660046135a2565b611275565b61023461038b366004613661565b61138a565b6102e67f000000000000000000000000000000000000000000000000000000000000000081565b61035c6103c5366004613661565b60009182526101b36020908152604080842060ff93909316845291905290205490565b6103f0602081565b60405160ff9091168152602001610248565b61041561041036600461368d565b6113a5565b6040805182516001600160a01b031681526020928301516001600160601b03169281019290925201610248565b6102346104503660046136b7565b61141f565b610468610463366004613661565b611453565b60405161024891906136d0565b610297610483366004613748565b6114f2565b60005461049c9062010000900461ffff1681565b60405161ffff9091168152602001610248565b61035c6104bd36600461377c565b60ff1660009081526001602052604090205490565b6102346104e0366004613797565b6115b0565b6103f060c081565b6102e67f000000000000000000000000000000000000000000000000000000000000000081565b6102976105223660046137d9565b611646565b61029761053536600461381c565b611732565b610297610548366004613846565b6117f2565b61023461055b366004613884565b611989565b61023461056e36600461377c565b611a18565b610277610581366004613661565b611a89565b6102976105943660046138c0565b611b70565b6102e67f000000000000000000000000000000000000000000000000000000000000000081565b6105d36105ce366004613901565b611e50565b604051610248919061393a565b6102776105ee36600461368d565b6120bd565b61035c61060136600461377c565b612155565b61061961061436600461368d565b612176565b604051610248929190613978565b60008381526101b36020908152604080832060ff86168452909152812061064f8585856121bf565b63ffffffff16815481106106655761066561399a565b600091825260209091200154600160401b90046001600160601b031690505b9392505050565b60008054839062010000900461ffff1660ff8216106106c55760405162461bcd60e51b81526004016106bc906139b0565b60405180910390fd5b60ff84166000908152600160209081526040808320548151808301909252838252918101839052825b8281101561082e5760ff8816600090815260016020526040902080548290811061071a5761071a61399a565b6000918252602080832060408051808201825293909101546001600160a01b03808216808652600160a01b9092046001600160601b031693850193909352905163778e55f360e01b81528b8316600482015260248101919091529194507f0000000000000000000000000000000000000000000000000000000000000000169063778e55f390604401602060405180830381865afa1580156107c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e49190613a0d565b9050801561082557670de0b6b3a764000083602001516001600160601b03168261080e9190613a3c565b6108189190613a5b565b6108229086613a7d565b94505b506001016106ee565b50919695505050505050565b60408051606081018252600080825260208083018290528284018290528582526101b3815283822060ff881683529052919091208054839081106108805761088061399a565b600091825260209182902060408051606081018252929091015463ffffffff8082168452600160201b82041693830193909352600160401b9092046001600160601b031691810191909152949350505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461091b5760405162461bcd60e51b81526004016106bc90613aa8565b60005462010000900461ffff168282610935600182613b1a565b8181106109445761094461399a565b9050013560f81c60f81b60f81c60ff16106109e45760405162461bcd60e51b815260206004820152605460248201527f5374616b6552656769737472792e5f72656769737465724f70657261746f723a60448201527f2067726561746573742071756f72756d4e756d626572206d757374206265206c606482015273195cdcc81d1a185b881c5d5bdc9d5b50dbdd5b9d60621b608482015260a4016106bc565b604080516060810182526000602082018190529181018290524363ffffffff168152905b60ff8116831115610b9057600084848360ff16818110610a2a57610a2a61399a565b919091013560f81c915060009050610a438888846124e6565b9150506001600160601b038116610ae85760405162461bcd60e51b815260206004820152605c60248201527f5374616b6552656769737472792e5f72656769737465724f70657261746f723a60448201527f204f70657261746f7220646f6573206e6f74206d656574206d696e696d756d2060648201527f7374616b6520726571756972656d656e7420666f722071756f72756d00000000608482015260a4016106bc565b600060b38360ff166101008110610b0157610b0161399a565b01549050818115610b685760b38460ff166101008110610b2357610b2361399a565b01610b2f600184613b1a565b81548110610b3f57610b3f61399a565b600091825260209091200154610b6590600160401b90046001600160601b031682613a7d565b90505b6001600160601b0381166040870152610b8184876125eb565b84600101945050505050610a08565b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a9190613b31565b6001600160a01b0316336001600160a01b031614610c4a5760405162461bcd60e51b81526004016106bc90613b4e565b600054839062010000900461ffff1660ff821610610c7a5760405162461bcd60e51b81526004016106bc906139b0565b8180610d145760405162461bcd60e51b815260206004820152605760248201527f566f746557656967686572426173652e72656d6f76655374726174656769657360448201527f436f6e73696465726564416e644d756c7469706c696572733a206e6f20696e6460648201527f6963657320746f2072656d6f76652070726f7669646564000000000000000000608482015260a4016106bc565b60005b81811015610b905760ff861660008181526001602052604090207f31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f790878785818110610d6557610d6561399a565b9050602002013581548110610d7c57610d7c61399a565b600091825260209182902001546040516001600160a01b0390911681520160405180910390a260ff861660008181526001602052604090207f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a7590878785818110610de857610de861399a565b9050602002013581548110610dff57610dff61399a565b600091825260208083209190910154604080516001600160a01b039092168252918101929092520160405180910390a260ff8616600090815260016020819052604090912080549091610e5191613b1a565b81548110610e6157610e6161399a565b6000918252602080832060ff8a16845260019091526040909220910190868684818110610e9057610e9061399a565b9050602002013581548110610ea757610ea761399a565b600091825260208083208454920180546001600160a01b0319166001600160a01b03909316928317815593546001600160601b03600160a01b91829004160290911790925560ff88168152600190915260409020805480610f0a57610f0a613bca565b600082815260208120820160001990810191909155019055600101610d17565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac9190613b31565b6001600160a01b0316336001600160a01b031614610fdc5760405162461bcd60e51b81526004016106bc90613b4e565b600054859062010000900461ffff1660ff82161061100c5760405162461bcd60e51b81526004016106bc906139b0565b838061108c5760405162461bcd60e51b815260206004820152604360248201527f566f746557656967686572426173652e6d6f646966795374726174656779576560448201527f69676874733a206e6f20737472617465677920696e64696365732070726f766960648201526219195960ea1b608482015260a4016106bc565b8281146111015760405162461bcd60e51b815260206004820152603c60248201527f566f746557656967686572426173652e6d6f646966795374726174656779576560448201527f69676874733a20696e707574206c656e677468206d69736d617463680000000060648201526084016106bc565b60005b818110156112565784848281811061111e5761111e61399a565b90506020020160208101906111339190613be0565b60ff891660009081526001602052604090208888848181106111575761115761399a565b905060200201358154811061116e5761116e61399a565b6000918252602080832090910180546001600160601b0394909416600160a01b026001600160a01b039094169390931790925560ff8a168082526001909252604090207f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75908989858181106111e5576111e561399a565b90506020020135815481106111fc576111fc61399a565b6000918252602090912001546001600160a01b03168787858181106112235761122361399a565b90506020020160208101906112389190613be0565b604051611246929190613978565b60405180910390a2600101611104565b5050505050505050565b600061126d8484846121bf565b949350505050565b600054610100900460ff16158080156112955750600054600160ff909116105b806112af5750303b1580156112af575060005460ff166001145b6113125760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106bc565b6000805460ff191660011790558015611335576000805461ff0019166101001790555b61133f8383612705565b8015611385576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000806113978484611a89565b604001519150505b92915050565b604080518082019091526000808252602082015260ff831660009081526001602052604090208054839081106113dd576113dd61399a565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b90046001600160601b0316918101919091529392505050565b603381610100811061143057600080fd5b60029182820401919006600c02915054906101000a90046001600160601b031681565b60008281526101b36020908152604080832060ff851684528252808320805482518185028101850190935280835260609492939192909184015b828210156114e6576000848152602090819020604080516060810182529185015463ffffffff8082168452600160201b82041683850152600160401b90046001600160601b03169082015282526001909201910161148d565b50505050905092915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611550573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115749190613b31565b6001600160a01b0316336001600160a01b0316146115a45760405162461bcd60e51b81526004016106bc90613b4e565b6115ad81612849565b50565b60008281526101b36020908152604080832060ff8816845290915281208054829190849081106115e2576115e261399a565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b909304929092169082015290506116398186612949565b6040015195945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190613b31565b6001600160a01b0316336001600160a01b0316146116f85760405162461bcd60e51b81526004016106bc90613b4e565b600054829062010000900461ffff1660ff8216106117285760405162461bcd60e51b81526004016106bc906139b0565b6113858383612aca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190613b31565b6001600160a01b0316336001600160a01b0316146117e45760405162461bcd60e51b81526004016106bc90613b4e565b6117ee8282612efc565b5050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461183a5760405162461bcd60e51b81526004016106bc90613aa8565b60408051606080820183526000602080840182905283850182905263ffffffff43168085528551938401865290830182905293820181905292815290915b60ff8116841115610b9057600085858360ff1681811061189a5761189a61399a565b919091013560f81c9150600090506118b3888387612f91565b90508060b38360ff1661010081106118cd576118cd61399a565b01600160b38560ff1661010081106118e7576118e761399a565b01546118f39190613b1a565b815481106119035761190361399a565b6000918252602090912001546119299190600160401b90046001600160601b0316613bfb565b6001600160601b0316604085015261194182856125eb565b6040805160ff841681526000602082015289917fe7c60c52692f0e0ff8d1c289ffe63cb02e79373f35e3000cafe7cca898885934910160405180910390a25050600101611878565b60008060b38560ff1661010081106119a3576119a361399a565b0183815481106119b5576119b561399a565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b90930492909216908201529050611a0c8185612949565b60400151949350505050565b600060b38260ff166101008110611a3157611a3161399a565b01600160b38460ff166101008110611a4b57611a4b61399a565b0154611a579190613b1a565b81548110611a6757611a6761399a565b600091825260209091200154600160401b90046001600160601b031692915050565b6040805160608082018352600080835260208084018290528385018290528682526101b3815284822060ff87168352815284822054855193840186528284529083018290529382015290919081611ae357915061139f9050565b60008581526101b36020908152604080832060ff881684529091529020611b0b600184613b1a565b81548110611b1b57611b1b61399a565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b9093049290921690820152925061139f915050565b60005b60005462010000900461ffff1660ff821610156113855760408051606081018252600080825260208201819052918101829052905b83811015611e2f5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166313542a4e878785818110611bf357611bf361399a565b9050602002016020810190611c089190613c23565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c709190613a0d565b604051633431af2560e01b8152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633431af2590602401602060405180830381865afa158015611cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cff9190613c40565b905060016001600160c01b03821660ff87161c81161415611e2557835163ffffffff16611dc15760b38560ff166101008110611d3d57611d3d61399a565b01600160b38760ff166101008110611d5757611d5761399a565b0154611d639190613b1a565b81548110611d7357611d7361399a565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b909304929092169082015293505b600080611df5898987818110611dd957611dd961399a565b9050602002016020810190611dee9190613c23565b85896124e6565b9150915080828760400151611e0a9190613bfb565b611e149190613a7d565b6001600160601b0316604087015250505b5050600101611ba8565b50805163ffffffff1615611e4757611e4782826125eb565b50600101611b73565b60606000826001600160401b03811115611e6c57611e6c6133dc565b604051908082528060200260200182016040528015611e95578160200160208202803683370190505b50905060005b838110156120b4576000858583818110611eb757611eb761399a565b919091013560f81c91505063ffffffff871660b3826101008110611edd57611edd61399a565b01600081548110611ef057611ef061399a565b60009182526020909120015463ffffffff161115611faf5760405162461bcd60e51b815260206004820152606a60248201527f5374616b6552656769737472792e676574546f74616c5374616b65496e64696360448201527f6573427951756f72756d4e756d626572734174426c6f636b4e756d6265723a2060648201527f71756f72756d20686173206e6f207374616b6520686973746f727920617420626084820152693637b1b5a73ab6b132b960b11b60a482015260c4016106bc565b600060b38260ff166101008110611fc857611fc861399a565b0154905060005b8163ffffffff168163ffffffff16101561209e578863ffffffff1660b38460ff1661010081106120015761200161399a565b01600161200e8486613c69565b6120189190613c69565b63ffffffff168154811061202e5761202e61399a565b60009182526020909120015463ffffffff161161208c5760016120518284613c69565b61205b9190613c69565b85858151811061206d5761206d61399a565b602002602001019063ffffffff16908163ffffffff168152505061209e565b8061209681613c86565b915050611fcf565b50505080806120ac90613caa565b915050611e9b565b50949350505050565b604080516060810182526000808252602082018190529181019190915260b38360ff1661010081106120f1576120f161399a565b0182815481106121035761210361399a565b600091825260209182902060408051606081018252929091015463ffffffff8082168452600160201b82041693830193909352600160401b9092046001600160601b0316918101919091529392505050565b600060b38260ff16610100811061216e5761216e61399a565b015492915050565b6001602052816000526040600020818154811061219257600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b90046001600160601b0316905082565b60008381526101b36020908152604080832060ff86168452909152812054815b8163ffffffff168163ffffffff1610156124165760008681526101b36020908152604080832060ff89168452909152902063ffffffff85169060016122248486613c69565b61222e9190613c69565b63ffffffff16815481106122445761224461399a565b60009182526020909120015463ffffffff16116124045760008681526101b36020908152604080832060ff89168452909152902060016122848385613c69565b61228e9190613c69565b63ffffffff16815481106122a4576122a461399a565b600091825260209091200154600160201b900463ffffffff161580612330575060008681526101b36020908152604080832060ff89168452909152902063ffffffff85169060016122f58486613c69565b6122ff9190613c69565b63ffffffff16815481106123155761231561399a565b600091825260209091200154600160201b900463ffffffff16115b6123e55760405162461bcd60e51b815260206004820152607460248201527f5374616b6552656769737472792e5f6765745374616b65557064617465496e6460448201527f6578466f724f70657261746f724964466f7251756f72756d4174426c6f636b4e60648201527f756d6265723a206f70657261746f72496420686173206e6f207374616b652075608482015273383230ba329030ba10313637b1b5a73ab6b132b960611b60a482015260c4016106bc565b60016123f18284613c69565b6123fb9190613c69565b92505050610684565b8061240e81613c86565b9150506121df565b5060405162461bcd60e51b815260206004820152608c60248201527f5374616b6552656769737472792e5f6765745374616b65557064617465496e6460448201527f6578466f724f70657261746f724964466f7251756f72756d4174426c6f636b4e60648201527f756d6265723a206e6f207374616b652075706461746520666f756e6420666f7260848201527f206f70657261746f72496420616e642071756f72756d4e756d6265722061742060a48201526b313637b1b590373ab6b132b960a11b60c482015260e4016106bc565b604080516060810182526000602082018190529181018290524363ffffffff1681528190612514848761068b565b6001600160601b03166040820152603360ff851661010081106125395761253961399a565b60029182820401919006600c029054906101000a90046001600160601b03166001600160601b031681604001516001600160601b0316101561257d57600060408201525b600061258a868684612f91565b604080840151815160ff891681526001600160601b03909116602082015291925087917fe7c60c52692f0e0ff8d1c289ffe63cb02e79373f35e3000cafe7cca898885934910160405180910390a26040909101519092509050935093915050565b600060b38360ff1661010081106126045761260461399a565b01549050801561266e574360b38460ff1661010081106126265761262661399a565b01612632600184613b1a565b815481106126425761264261399a565b9060005260206000200160000160046101000a81548163ffffffff021916908363ffffffff1602179055505b63ffffffff4316825260b360ff8416610100811061268e5761268e61399a565b0180546001810182556000918252602091829020845191018054928501516040909501516001600160601b0316600160401b026bffffffffffffffffffffffff60401b1963ffffffff968716600160201b0267ffffffffffffffff1990951696909316959095179290921716929092179091555050565b600054610100900460ff166127705760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016106bc565b80518251146127e75760405162461bcd60e51b815260206004820152603b60248201527f52656769737472792e5f696e697469616c697a653a206d696e696d756d53746160448201527f6b65466f7251756f72756d206c656e677468206d69736d61746368000000000060648201526084016106bc565b60005b81518160ff1610156113855761281c81848360ff168151811061280f5761280f61399a565b6020026020010151612efc565b612841828260ff16815181106128345761283461399a565b6020026020010151612849565b6001016127ea565b60005462010000900461ffff1660c081106128e45760405162461bcd60e51b815260206004820152604f60248201527f566f746557656967686572426173652e5f63726561746551756f72756d3a206e60448201527f756d626572206f662071756f72756d732063616e6e6f7420657863656564204d60648201526e105617d45553d4955357d0d3d55395608a1b608482015260a4016106bc565b806128f0816001613cc5565b600060026101000a81548161ffff021916908361ffff1602179055506129168184612aca565b60405160ff8216907f831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b490600090a2505050565b815163ffffffff808316911611156129ef5760405162461bcd60e51b815260206004820152606060248201527f5374616b6552656769737472792e5f76616c69646174654f70657261746f725360448201527f74616b654174426c6f636b4e756d6265723a206f70657261746f725374616b6560648201527f5570646174652069732066726f6d20616674657220626c6f636b4e756d626572608482015260a4016106bc565b602082015163ffffffff161580612a1557508063ffffffff16826020015163ffffffff16115b6117ee5760405162461bcd60e51b815260206004820152607460248201527f5374616b6552656769737472792e5f76616c69646174654f70657261746f725360448201527f74616b654174426c6f636b4e756d6265723a2074686572652069732061206e6560648201527f776572206f70657261746f725374616b6555706461746520617661696c61626c60848201527332903132b337b93290313637b1b5a73ab6b132b960611b60a482015260c4016106bc565b6000815111612b465760405162461bcd60e51b815260206004820152604e6024820152600080516020613cfb83398151915260448201527f6e73696465726564416e644d756c7469706c696572733a206e6f20737472617460648201526d1959da595cc81c1c9bdd9a59195960921b608482015260a4016106bc565b805160ff831660009081526001602090815260409091205490612b698383613ce2565b1115612bf15760405162461bcd60e51b815260206004820152605b6024820152600080516020613cfb83398151915260448201527f6e73696465726564416e644d756c7469706c696572733a20657863656564204d60648201527f41585f5745494748494e475f46554e4354494f4e5f4c454e4754480000000000608482015260a4016106bc565b60005b82811015612ef55760005b612c098284613ce2565b811015612cfc57848281518110612c2257612c2261399a565b6020026020010151600001516001600160a01b0316600160008860ff1660ff1681526020019081526020016000208281548110612c6157612c6161399a565b6000918252602090912001546001600160a01b03161415612cf45760405162461bcd60e51b81526020600482015260536024820152600080516020613cfb83398151915260448201527f6e73696465726564416e644d756c7469706c696572733a2063616e6e6f7420616064820152720c8c840e6c2daca40e6e8e4c2e8cacef24064f606b1b608482015260a4016106bc565b600101612bff565b506000848281518110612d1157612d1161399a565b6020026020010151602001516001600160601b031611612dad5760405162461bcd60e51b815260206004820152605c6024820152600080516020613cfb83398151915260448201527f6e73696465726564416e644d756c7469706c696572733a2063616e6e6f74206160648201527f64642073747261746567792077697468207a65726f2077656967687400000000608482015260a4016106bc565b60ff851660009081526001602052604090208451859083908110612dd357612dd361399a565b6020908102919091018101518254600181018455600093845292829020815191909201516001600160601b0316600160a01b026001600160a01b0390911617910155835160ff8616907f10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f540490869084908110612e5057612e5061399a565b602090810291909101810151516040516001600160a01b0390911681520160405180910390a28460ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75858381518110612ead57612ead61399a565b602002602001015160000151868481518110612ecb57612ecb61399a565b602002602001015160200151604051612ee5929190613978565b60405180910390a2600101612bf4565b5050505050565b8060338360ff166101008110612f1457612f1461399a565b60029182820401919006600c026101000a8154816001600160601b0302191690836001600160601b031602179055508160ff167f26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf82604051612f8591906001600160601b0391909116815260200190565b60405180910390a25050565b60008381526101b36020908152604080832060ff86168452909152812054819080156130745760008681526101b36020908152604080832060ff8916845290915290204390612fe1600184613b1a565b81548110612ff157612ff161399a565b60009182526020808320909101805463ffffffff94909416600160201b0267ffffffff0000000019909416939093179092558781526101b38252604080822060ff8916835290925220613045600183613b1a565b815481106130555761305561399a565b600091825260209091200154600160401b90046001600160601b031691505b5060008581526101b36020908152604080832060ff88168452825280832080546001810182559084529282902086519301805492870151918701516001600160601b0316600160401b026bffffffffffffffffffffffff60401b1963ffffffff938416600160201b0267ffffffffffffffff199095169390951692909217929092179290921691909117905590509392505050565b803560ff8116811461311a57600080fd5b919050565b803563ffffffff8116811461311a57600080fd5b60008060006060848603121561314857600080fd5b8335925061315860208501613109565b91506131666040850161311f565b90509250925092565b6001600160a01b03811681146115ad57600080fd5b6000806040838503121561319757600080fd5b6131a083613109565b915060208301356131b08161316f565b809150509250929050565b6000806000606084860312156131d057600080fd5b6131d984613109565b95602085013595506040909401359392505050565b815163ffffffff9081168252602080840151909116908201526040808301516001600160601b0316908201526060810161139f565b60008083601f84011261323557600080fd5b5081356001600160401b0381111561324c57600080fd5b60208301915083602082850101111561326457600080fd5b9250929050565b6000806000806060858703121561328157600080fd5b843561328c8161316f565b93506020850135925060408501356001600160401b038111156132ae57600080fd5b6132ba87828801613223565b95989497509550505050565b60008083601f8401126132d857600080fd5b5081356001600160401b038111156132ef57600080fd5b6020830191508360208260051b850101111561326457600080fd5b60008060006040848603121561331f57600080fd5b61332884613109565b925060208401356001600160401b0381111561334357600080fd5b61334f868287016132c6565b9497909650939450505050565b60008060008060006060868803121561337457600080fd5b61337d86613109565b945060208601356001600160401b038082111561339957600080fd5b6133a589838a016132c6565b909650945060408801359150808211156133be57600080fd5b506133cb888289016132c6565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613414576134146133dc565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613442576134426133dc565b604052919050565b60006001600160401b03821115613463576134636133dc565b5060051b60200190565b80356001600160601b038116811461311a57600080fd5b600082601f83011261349557600080fd5b813560206134aa6134a58361344a565b61341a565b82815260069290921b840181019181810190868411156134c957600080fd5b8286015b8481101561351857604081890312156134e65760008081fd5b6134ee6133f2565b81356134f98161316f565b815261350682860161346d565b818601528352918301916040016134cd565b509695505050505050565b600082601f83011261353457600080fd5b813560206135446134a58361344a565b82815260059290921b8401810191818101908684111561356357600080fd5b8286015b848110156135185780356001600160401b038111156135865760008081fd5b6135948986838b0101613484565b845250918301918301613567565b600080604083850312156135b557600080fd5b82356001600160401b03808211156135cc57600080fd5b818501915085601f8301126135e057600080fd5b813560206135f06134a58361344a565b82815260059290921b8401810191818101908984111561360f57600080fd5b948201945b83861015613634576136258661346d565b82529482019490820190613614565b9650508601359250508082111561364a57600080fd5b5061365785828601613523565b9150509250929050565b6000806040838503121561367457600080fd5b8235915061368460208401613109565b90509250929050565b600080604083850312156136a057600080fd5b6136a983613109565b946020939093013593505050565b6000602082840312156136c957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561373c5761372983855163ffffffff808251168352806020830151166020840152506001600160601b0360408201511660408301525050565b92840192606092909201916001016136ec565b50909695505050505050565b60006020828403121561375a57600080fd5b81356001600160401b0381111561377057600080fd5b61126d84828501613484565b60006020828403121561378e57600080fd5b61068482613109565b600080600080608085870312156137ad57600080fd5b6137b685613109565b93506137c46020860161311f565b93969395505050506040820135916060013590565b600080604083850312156137ec57600080fd5b6137f583613109565b915060208301356001600160401b0381111561381057600080fd5b61365785828601613484565b6000806040838503121561382f57600080fd5b61383883613109565b91506136846020840161346d565b60008060006040848603121561385b57600080fd5b8335925060208401356001600160401b0381111561387857600080fd5b61334f86828701613223565b60008060006060848603121561389957600080fd5b6138a284613109565b92506138b06020850161311f565b9150604084013590509250925092565b600080602083850312156138d357600080fd5b82356001600160401b038111156138e957600080fd5b6138f5858286016132c6565b90969095509350505050565b60008060006040848603121561391657600080fd5b61391f8461311f565b925060208401356001600160401b0381111561387857600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561373c57835163ffffffff1683529284019291840191600101613956565b6001600160a01b039290921682526001600160601b0316602082015260400190565b634e487b7160e01b600052603260045260246000fd5b6020808252603c908201527f566f746557656967686572426173652e76616c696451756f72756d4e756d626560408201527f723a2071756f72756d4e756d626572206973206e6f742076616c696400000000606082015260800190565b600060208284031215613a1f57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613a5657613a56613a26565b500290565b600082613a7857634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160601b03808316818516808303821115613a9f57613a9f613a26565b01949350505050565b6020808252604c908201527f5374616b6552656769737472792e6f6e6c795265676973747279436f6f72646960408201527f6e61746f723a2063616c6c6572206973206e6f7420746865205265676973747260608201526b3ca1b7b7b93234b730ba37b960a11b608082015260a00190565b600082821015613b2c57613b2c613a26565b500390565b600060208284031215613b4357600080fd5b81516106848161316f565b60208082526056908201527f566f746557656967686572426173652e6f6e6c79536572766963654d616e616760408201527f65724f776e65723a2063616c6c6572206973206e6f7420746865206f776e65726060820152751037b3103a34329039b2b93b34b1b2a6b0b730b3b2b960511b608082015260a00190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613bf257600080fd5b6106848261346d565b60006001600160601b0383811690831681811015613c1b57613c1b613a26565b039392505050565b600060208284031215613c3557600080fd5b81356106848161316f565b600060208284031215613c5257600080fd5b81516001600160c01b038116811461068457600080fd5b600063ffffffff83811690831681811015613c1b57613c1b613a26565b600063ffffffff80831681811415613ca057613ca0613a26565b6001019392505050565b6000600019821415613cbe57613cbe613a26565b5060010190565b600061ffff808316818516808303821115613a9f57613a9f613a26565b60008219821115613cf557613cf5613a26565b50019056fe566f746557656967686572426173652e5f61646453747261746567696573436fa26469706673582212208f116ebb338ee5f7425227cde6a2a0a7da4564e9e852451c370abcbdca5e516c64736f6c634300080c0033",
}

// ContractStakeRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractStakeRegistryMetaData.ABI instead.
var ContractStakeRegistryABI = ContractStakeRegistryMetaData.ABI

// ContractStakeRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractStakeRegistryMetaData.Bin instead.
var ContractStakeRegistryBin = ContractStakeRegistryMetaData.Bin

// DeployContractStakeRegistry deploys a new Ethereum contract, binding an instance of ContractStakeRegistry to it.
func DeployContractStakeRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address, _strategyManager common.Address, _serviceManager common.Address) (common.Address, *types.Transaction, *ContractStakeRegistry, error) {
	parsed, err := ContractStakeRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractStakeRegistryBin), backend, _registryCoordinator, _strategyManager, _serviceManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractStakeRegistry{ContractStakeRegistryCaller: ContractStakeRegistryCaller{contract: contract}, ContractStakeRegistryTransactor: ContractStakeRegistryTransactor{contract: contract}, ContractStakeRegistryFilterer: ContractStakeRegistryFilterer{contract: contract}}, nil
}

// ContractStakeRegistry is an auto generated Go binding around an Ethereum contract.
type ContractStakeRegistry struct {
	ContractStakeRegistryCaller     // Read-only binding to the contract
	ContractStakeRegistryTransactor // Write-only binding to the contract
	ContractStakeRegistryFilterer   // Log filterer for contract events
}

// ContractStakeRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractStakeRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractStakeRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractStakeRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractStakeRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractStakeRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractStakeRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractStakeRegistrySession struct {
	Contract     *ContractStakeRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ContractStakeRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractStakeRegistryCallerSession struct {
	Contract *ContractStakeRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ContractStakeRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractStakeRegistryTransactorSession struct {
	Contract     *ContractStakeRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ContractStakeRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractStakeRegistryRaw struct {
	Contract *ContractStakeRegistry // Generic contract binding to access the raw methods on
}

// ContractStakeRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractStakeRegistryCallerRaw struct {
	Contract *ContractStakeRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ContractStakeRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractStakeRegistryTransactorRaw struct {
	Contract *ContractStakeRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractStakeRegistry creates a new instance of ContractStakeRegistry, bound to a specific deployed contract.
func NewContractStakeRegistry(address common.Address, backend bind.ContractBackend) (*ContractStakeRegistry, error) {
	contract, err := bindContractStakeRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistry{ContractStakeRegistryCaller: ContractStakeRegistryCaller{contract: contract}, ContractStakeRegistryTransactor: ContractStakeRegistryTransactor{contract: contract}, ContractStakeRegistryFilterer: ContractStakeRegistryFilterer{contract: contract}}, nil
}

// NewContractStakeRegistryCaller creates a new read-only instance of ContractStakeRegistry, bound to a specific deployed contract.
func NewContractStakeRegistryCaller(address common.Address, caller bind.ContractCaller) (*ContractStakeRegistryCaller, error) {
	contract, err := bindContractStakeRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryCaller{contract: contract}, nil
}

// NewContractStakeRegistryTransactor creates a new write-only instance of ContractStakeRegistry, bound to a specific deployed contract.
func NewContractStakeRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractStakeRegistryTransactor, error) {
	contract, err := bindContractStakeRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryTransactor{contract: contract}, nil
}

// NewContractStakeRegistryFilterer creates a new log filterer instance of ContractStakeRegistry, bound to a specific deployed contract.
func NewContractStakeRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractStakeRegistryFilterer, error) {
	contract, err := bindContractStakeRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryFilterer{contract: contract}, nil
}

// bindContractStakeRegistry binds a generic wrapper to an already deployed contract.
func bindContractStakeRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractStakeRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractStakeRegistry *ContractStakeRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractStakeRegistry.Contract.ContractStakeRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractStakeRegistry *ContractStakeRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.ContractStakeRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractStakeRegistry *ContractStakeRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.ContractStakeRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractStakeRegistry *ContractStakeRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractStakeRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractStakeRegistry *ContractStakeRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractStakeRegistry *ContractStakeRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.contract.Transact(opts, method, params...)
}

// MAXQUORUMCOUNT is a free data retrieval call binding the contract method 0xa6734667.
//
// Solidity: function MAX_QUORUM_COUNT() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) MAXQUORUMCOUNT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "MAX_QUORUM_COUNT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MAXQUORUMCOUNT is a free data retrieval call binding the contract method 0xa6734667.
//
// Solidity: function MAX_QUORUM_COUNT() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistrySession) MAXQUORUMCOUNT() (uint8, error) {
	return _ContractStakeRegistry.Contract.MAXQUORUMCOUNT(&_ContractStakeRegistry.CallOpts)
}

// MAXQUORUMCOUNT is a free data retrieval call binding the contract method 0xa6734667.
//
// Solidity: function MAX_QUORUM_COUNT() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) MAXQUORUMCOUNT() (uint8, error) {
	return _ContractStakeRegistry.Contract.MAXQUORUMCOUNT(&_ContractStakeRegistry.CallOpts)
}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) MAXWEIGHINGFUNCTIONLENGTH(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "MAX_WEIGHING_FUNCTION_LENGTH")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistrySession) MAXWEIGHINGFUNCTIONLENGTH() (uint8, error) {
	return _ContractStakeRegistry.Contract.MAXWEIGHINGFUNCTIONLENGTH(&_ContractStakeRegistry.CallOpts)
}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) MAXWEIGHINGFUNCTIONLENGTH() (uint8, error) {
	return _ContractStakeRegistry.Contract.MAXWEIGHINGFUNCTIONLENGTH(&_ContractStakeRegistry.CallOpts)
}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) WEIGHTINGDIVISOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "WEIGHTING_DIVISOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistrySession) WEIGHTINGDIVISOR() (*big.Int, error) {
	return _ContractStakeRegistry.Contract.WEIGHTINGDIVISOR(&_ContractStakeRegistry.CallOpts)
}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) WEIGHTINGDIVISOR() (*big.Int, error) {
	return _ContractStakeRegistry.Contract.WEIGHTINGDIVISOR(&_ContractStakeRegistry.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) Delegation() (common.Address, error) {
	return _ContractStakeRegistry.Contract.Delegation(&_ContractStakeRegistry.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) Delegation() (common.Address, error) {
	return _ContractStakeRegistry.Contract.Delegation(&_ContractStakeRegistry.CallOpts)
}

// GetCurrentOperatorStakeForQuorum is a free data retrieval call binding the contract method 0x6ab538d4.
//
// Solidity: function getCurrentOperatorStakeForQuorum(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetCurrentOperatorStakeForQuorum(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getCurrentOperatorStakeForQuorum", operatorId, quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentOperatorStakeForQuorum is a free data retrieval call binding the contract method 0x6ab538d4.
//
// Solidity: function getCurrentOperatorStakeForQuorum(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetCurrentOperatorStakeForQuorum(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetCurrentOperatorStakeForQuorum(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetCurrentOperatorStakeForQuorum is a free data retrieval call binding the contract method 0x6ab538d4.
//
// Solidity: function getCurrentOperatorStakeForQuorum(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetCurrentOperatorStakeForQuorum(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetCurrentOperatorStakeForQuorum(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetCurrentTotalStakeForQuorum is a free data retrieval call binding the contract method 0xc8f739d0.
//
// Solidity: function getCurrentTotalStakeForQuorum(uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetCurrentTotalStakeForQuorum(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getCurrentTotalStakeForQuorum", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentTotalStakeForQuorum is a free data retrieval call binding the contract method 0xc8f739d0.
//
// Solidity: function getCurrentTotalStakeForQuorum(uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetCurrentTotalStakeForQuorum(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetCurrentTotalStakeForQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// GetCurrentTotalStakeForQuorum is a free data retrieval call binding the contract method 0xc8f739d0.
//
// Solidity: function getCurrentTotalStakeForQuorum(uint8 quorumNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetCurrentTotalStakeForQuorum(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetCurrentTotalStakeForQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// GetLengthOfOperatorIdStakeHistoryForQuorum is a free data retrieval call binding the contract method 0x6e8f03ca.
//
// Solidity: function getLengthOfOperatorIdStakeHistoryForQuorum(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetLengthOfOperatorIdStakeHistoryForQuorum(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getLengthOfOperatorIdStakeHistoryForQuorum", operatorId, quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLengthOfOperatorIdStakeHistoryForQuorum is a free data retrieval call binding the contract method 0x6e8f03ca.
//
// Solidity: function getLengthOfOperatorIdStakeHistoryForQuorum(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetLengthOfOperatorIdStakeHistoryForQuorum(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetLengthOfOperatorIdStakeHistoryForQuorum(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetLengthOfOperatorIdStakeHistoryForQuorum is a free data retrieval call binding the contract method 0x6e8f03ca.
//
// Solidity: function getLengthOfOperatorIdStakeHistoryForQuorum(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetLengthOfOperatorIdStakeHistoryForQuorum(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetLengthOfOperatorIdStakeHistoryForQuorum(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetLengthOfTotalStakeHistoryForQuorum is a free data retrieval call binding the contract method 0xe89c0a00.
//
// Solidity: function getLengthOfTotalStakeHistoryForQuorum(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetLengthOfTotalStakeHistoryForQuorum(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getLengthOfTotalStakeHistoryForQuorum", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLengthOfTotalStakeHistoryForQuorum is a free data retrieval call binding the contract method 0xe89c0a00.
//
// Solidity: function getLengthOfTotalStakeHistoryForQuorum(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetLengthOfTotalStakeHistoryForQuorum(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetLengthOfTotalStakeHistoryForQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// GetLengthOfTotalStakeHistoryForQuorum is a free data retrieval call binding the contract method 0xe89c0a00.
//
// Solidity: function getLengthOfTotalStakeHistoryForQuorum(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetLengthOfTotalStakeHistoryForQuorum(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetLengthOfTotalStakeHistoryForQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// GetMostRecentStakeUpdateByOperatorId is a free data retrieval call binding the contract method 0xcd050d9c.
//
// Solidity: function getMostRecentStakeUpdateByOperatorId(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetMostRecentStakeUpdateByOperatorId(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (IStakeRegistryOperatorStakeUpdate, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getMostRecentStakeUpdateByOperatorId", operatorId, quorumNumber)

	if err != nil {
		return *new(IStakeRegistryOperatorStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeRegistryOperatorStakeUpdate)).(*IStakeRegistryOperatorStakeUpdate)

	return out0, err

}

// GetMostRecentStakeUpdateByOperatorId is a free data retrieval call binding the contract method 0xcd050d9c.
//
// Solidity: function getMostRecentStakeUpdateByOperatorId(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetMostRecentStakeUpdateByOperatorId(operatorId [32]byte, quorumNumber uint8) (IStakeRegistryOperatorStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetMostRecentStakeUpdateByOperatorId(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetMostRecentStakeUpdateByOperatorId is a free data retrieval call binding the contract method 0xcd050d9c.
//
// Solidity: function getMostRecentStakeUpdateByOperatorId(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetMostRecentStakeUpdateByOperatorId(operatorId [32]byte, quorumNumber uint8) (IStakeRegistryOperatorStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetMostRecentStakeUpdateByOperatorId(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetOperatorIdToStakeHistory is a free data retrieval call binding the contract method 0x944472a9.
//
// Solidity: function getOperatorIdToStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetOperatorIdToStakeHistory(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) ([]IStakeRegistryOperatorStakeUpdate, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getOperatorIdToStakeHistory", operatorId, quorumNumber)

	if err != nil {
		return *new([]IStakeRegistryOperatorStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new([]IStakeRegistryOperatorStakeUpdate)).(*[]IStakeRegistryOperatorStakeUpdate)

	return out0, err

}

// GetOperatorIdToStakeHistory is a free data retrieval call binding the contract method 0x944472a9.
//
// Solidity: function getOperatorIdToStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetOperatorIdToStakeHistory(operatorId [32]byte, quorumNumber uint8) ([]IStakeRegistryOperatorStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetOperatorIdToStakeHistory(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetOperatorIdToStakeHistory is a free data retrieval call binding the contract method 0x944472a9.
//
// Solidity: function getOperatorIdToStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetOperatorIdToStakeHistory(operatorId [32]byte, quorumNumber uint8) ([]IStakeRegistryOperatorStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetOperatorIdToStakeHistory(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeForOperatorIdForQuorumAtBlockNumber is a free data retrieval call binding the contract method 0x1b327225.
//
// Solidity: function getStakeForOperatorIdForQuorumAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeForOperatorIdForQuorumAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeForOperatorIdForQuorumAtBlockNumber", operatorId, quorumNumber, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeForOperatorIdForQuorumAtBlockNumber is a free data retrieval call binding the contract method 0x1b327225.
//
// Solidity: function getStakeForOperatorIdForQuorumAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeForOperatorIdForQuorumAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeForOperatorIdForQuorumAtBlockNumber(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeForOperatorIdForQuorumAtBlockNumber is a free data retrieval call binding the contract method 0x1b327225.
//
// Solidity: function getStakeForOperatorIdForQuorumAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeForOperatorIdForQuorumAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeForOperatorIdForQuorumAtBlockNumber(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeForQuorumAtBlockNumberFromOperatorIdAndIndex is a free data retrieval call binding the contract method 0xa43cde89.
//
// Solidity: function getStakeForQuorumAtBlockNumberFromOperatorIdAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeForQuorumAtBlockNumberFromOperatorIdAndIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeForQuorumAtBlockNumberFromOperatorIdAndIndex", quorumNumber, blockNumber, operatorId, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeForQuorumAtBlockNumberFromOperatorIdAndIndex is a free data retrieval call binding the contract method 0xa43cde89.
//
// Solidity: function getStakeForQuorumAtBlockNumberFromOperatorIdAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeForQuorumAtBlockNumberFromOperatorIdAndIndex(quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeForQuorumAtBlockNumberFromOperatorIdAndIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, blockNumber, operatorId, index)
}

// GetStakeForQuorumAtBlockNumberFromOperatorIdAndIndex is a free data retrieval call binding the contract method 0xa43cde89.
//
// Solidity: function getStakeForQuorumAtBlockNumberFromOperatorIdAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeForQuorumAtBlockNumberFromOperatorIdAndIndex(quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetStakeForQuorumAtBlockNumberFromOperatorIdAndIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, blockNumber, operatorId, index)
}

// GetStakeUpdateForQuorumFromOperatorIdAndIndex is a free data retrieval call binding the contract method 0x248d6573.
//
// Solidity: function getStakeUpdateForQuorumFromOperatorIdAndIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeUpdateForQuorumFromOperatorIdAndIndex(opts *bind.CallOpts, quorumNumber uint8, operatorId [32]byte, index *big.Int) (IStakeRegistryOperatorStakeUpdate, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeUpdateForQuorumFromOperatorIdAndIndex", quorumNumber, operatorId, index)

	if err != nil {
		return *new(IStakeRegistryOperatorStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeRegistryOperatorStakeUpdate)).(*IStakeRegistryOperatorStakeUpdate)

	return out0, err

}

// GetStakeUpdateForQuorumFromOperatorIdAndIndex is a free data retrieval call binding the contract method 0x248d6573.
//
// Solidity: function getStakeUpdateForQuorumFromOperatorIdAndIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeUpdateForQuorumFromOperatorIdAndIndex(quorumNumber uint8, operatorId [32]byte, index *big.Int) (IStakeRegistryOperatorStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetStakeUpdateForQuorumFromOperatorIdAndIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, operatorId, index)
}

// GetStakeUpdateForQuorumFromOperatorIdAndIndex is a free data retrieval call binding the contract method 0x248d6573.
//
// Solidity: function getStakeUpdateForQuorumFromOperatorIdAndIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeUpdateForQuorumFromOperatorIdAndIndex(quorumNumber uint8, operatorId [32]byte, index *big.Int) (IStakeRegistryOperatorStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetStakeUpdateForQuorumFromOperatorIdAndIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, operatorId, index)
}

// GetStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber is a free data retrieval call binding the contract method 0x48085866.
//
// Solidity: function getStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber", operatorId, quorumNumber, blockNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber is a free data retrieval call binding the contract method 0x48085866.
//
// Solidity: function getStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	return _ContractStakeRegistry.Contract.GetStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber is a free data retrieval call binding the contract method 0x48085866.
//
// Solidity: function getStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	return _ContractStakeRegistry.Contract.GetStakeUpdateIndexForOperatorIdForQuorumAtBlockNumber(&_ContractStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetTotalStakeAtBlockNumberFromIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getTotalStakeAtBlockNumberFromIndex", quorumNumber, blockNumber, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetTotalStakeAtBlockNumberFromIndex(quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeAtBlockNumberFromIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, blockNumber, index)
}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetTotalStakeAtBlockNumberFromIndex(quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeAtBlockNumberFromIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, blockNumber, index)
}

// GetTotalStakeIndicesByQuorumNumbersAtBlockNumber is a free data retrieval call binding the contract method 0xe192e9ad.
//
// Solidity: function getTotalStakeIndicesByQuorumNumbersAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetTotalStakeIndicesByQuorumNumbersAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getTotalStakeIndicesByQuorumNumbersAtBlockNumber", blockNumber, quorumNumbers)

	if err != nil {
		return *new([]uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint32)).(*[]uint32)

	return out0, err

}

// GetTotalStakeIndicesByQuorumNumbersAtBlockNumber is a free data retrieval call binding the contract method 0xe192e9ad.
//
// Solidity: function getTotalStakeIndicesByQuorumNumbersAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetTotalStakeIndicesByQuorumNumbersAtBlockNumber(blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeIndicesByQuorumNumbersAtBlockNumber(&_ContractStakeRegistry.CallOpts, blockNumber, quorumNumbers)
}

// GetTotalStakeIndicesByQuorumNumbersAtBlockNumber is a free data retrieval call binding the contract method 0xe192e9ad.
//
// Solidity: function getTotalStakeIndicesByQuorumNumbersAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetTotalStakeIndicesByQuorumNumbersAtBlockNumber(blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeIndicesByQuorumNumbersAtBlockNumber(&_ContractStakeRegistry.CallOpts, blockNumber, quorumNumbers)
}

// GetTotalStakeUpdateForQuorumFromIndex is a free data retrieval call binding the contract method 0xe25427dd.
//
// Solidity: function getTotalStakeUpdateForQuorumFromIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCaller) GetTotalStakeUpdateForQuorumFromIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IStakeRegistryOperatorStakeUpdate, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "getTotalStakeUpdateForQuorumFromIndex", quorumNumber, index)

	if err != nil {
		return *new(IStakeRegistryOperatorStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeRegistryOperatorStakeUpdate)).(*IStakeRegistryOperatorStakeUpdate)

	return out0, err

}

// GetTotalStakeUpdateForQuorumFromIndex is a free data retrieval call binding the contract method 0xe25427dd.
//
// Solidity: function getTotalStakeUpdateForQuorumFromIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistrySession) GetTotalStakeUpdateForQuorumFromIndex(quorumNumber uint8, index *big.Int) (IStakeRegistryOperatorStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeUpdateForQuorumFromIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, index)
}

// GetTotalStakeUpdateForQuorumFromIndex is a free data retrieval call binding the contract method 0xe25427dd.
//
// Solidity: function getTotalStakeUpdateForQuorumFromIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) GetTotalStakeUpdateForQuorumFromIndex(quorumNumber uint8, index *big.Int) (IStakeRegistryOperatorStakeUpdate, error) {
	return _ContractStakeRegistry.Contract.GetTotalStakeUpdateForQuorumFromIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, index)
}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0x7ed9430f.
//
// Solidity: function minimumStakeForQuorum(uint256 ) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) MinimumStakeForQuorum(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "minimumStakeForQuorum", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0x7ed9430f.
//
// Solidity: function minimumStakeForQuorum(uint256 ) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) MinimumStakeForQuorum(arg0 *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.MinimumStakeForQuorum(&_ContractStakeRegistry.CallOpts, arg0)
}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0x7ed9430f.
//
// Solidity: function minimumStakeForQuorum(uint256 ) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) MinimumStakeForQuorum(arg0 *big.Int) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.MinimumStakeForQuorum(&_ContractStakeRegistry.CallOpts, arg0)
}

// QuorumCount is a free data retrieval call binding the contract method 0x9aa1653d.
//
// Solidity: function quorumCount() view returns(uint16)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) QuorumCount(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "quorumCount")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// QuorumCount is a free data retrieval call binding the contract method 0x9aa1653d.
//
// Solidity: function quorumCount() view returns(uint16)
func (_ContractStakeRegistry *ContractStakeRegistrySession) QuorumCount() (uint16, error) {
	return _ContractStakeRegistry.Contract.QuorumCount(&_ContractStakeRegistry.CallOpts)
}

// QuorumCount is a free data retrieval call binding the contract method 0x9aa1653d.
//
// Solidity: function quorumCount() view returns(uint16)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) QuorumCount() (uint16, error) {
	return _ContractStakeRegistry.Contract.QuorumCount(&_ContractStakeRegistry.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) RegistryCoordinator() (common.Address, error) {
	return _ContractStakeRegistry.Contract.RegistryCoordinator(&_ContractStakeRegistry.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractStakeRegistry.Contract.RegistryCoordinator(&_ContractStakeRegistry.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) ServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "serviceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) ServiceManager() (common.Address, error) {
	return _ContractStakeRegistry.Contract.ServiceManager(&_ContractStakeRegistry.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) ServiceManager() (common.Address, error) {
	return _ContractStakeRegistry.Contract.ServiceManager(&_ContractStakeRegistry.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) Slasher() (common.Address, error) {
	return _ContractStakeRegistry.Contract.Slasher(&_ContractStakeRegistry.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) Slasher() (common.Address, error) {
	return _ContractStakeRegistry.Contract.Slasher(&_ContractStakeRegistry.CallOpts)
}

// StrategiesConsideredAndMultipliers is a free data retrieval call binding the contract method 0xeb92199c.
//
// Solidity: function strategiesConsideredAndMultipliers(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StrategiesConsideredAndMultipliers(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "strategiesConsideredAndMultipliers", arg0, arg1)

	outstruct := new(struct {
		Strategy   common.Address
		Multiplier *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Strategy = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Multiplier = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// StrategiesConsideredAndMultipliers is a free data retrieval call binding the contract method 0xeb92199c.
//
// Solidity: function strategiesConsideredAndMultipliers(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistrySession) StrategiesConsideredAndMultipliers(arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _ContractStakeRegistry.Contract.StrategiesConsideredAndMultipliers(&_ContractStakeRegistry.CallOpts, arg0, arg1)
}

// StrategiesConsideredAndMultipliers is a free data retrieval call binding the contract method 0xeb92199c.
//
// Solidity: function strategiesConsideredAndMultipliers(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StrategiesConsideredAndMultipliers(arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _ContractStakeRegistry.Contract.StrategiesConsideredAndMultipliers(&_ContractStakeRegistry.CallOpts, arg0, arg1)
}

// StrategiesConsideredAndMultipliersLength is a free data retrieval call binding the contract method 0x9e8ca620.
//
// Solidity: function strategiesConsideredAndMultipliersLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StrategiesConsideredAndMultipliersLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "strategiesConsideredAndMultipliersLength", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StrategiesConsideredAndMultipliersLength is a free data retrieval call binding the contract method 0x9e8ca620.
//
// Solidity: function strategiesConsideredAndMultipliersLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistrySession) StrategiesConsideredAndMultipliersLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.StrategiesConsideredAndMultipliersLength(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// StrategiesConsideredAndMultipliersLength is a free data retrieval call binding the contract method 0x9e8ca620.
//
// Solidity: function strategiesConsideredAndMultipliersLength(uint8 quorumNumber) view returns(uint256)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StrategiesConsideredAndMultipliersLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.StrategiesConsideredAndMultipliersLength(&_ContractStakeRegistry.CallOpts, quorumNumber)
}

// StrategyAndWeightingMultiplierForQuorumByIndex is a free data retrieval call binding the contract method 0x7cc0d75f.
//
// Solidity: function strategyAndWeightingMultiplierForQuorumByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StrategyAndWeightingMultiplierForQuorumByIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IVoteWeigherStrategyAndWeightingMultiplier, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "strategyAndWeightingMultiplierForQuorumByIndex", quorumNumber, index)

	if err != nil {
		return *new(IVoteWeigherStrategyAndWeightingMultiplier), err
	}

	out0 := *abi.ConvertType(out[0], new(IVoteWeigherStrategyAndWeightingMultiplier)).(*IVoteWeigherStrategyAndWeightingMultiplier)

	return out0, err

}

// StrategyAndWeightingMultiplierForQuorumByIndex is a free data retrieval call binding the contract method 0x7cc0d75f.
//
// Solidity: function strategyAndWeightingMultiplierForQuorumByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractStakeRegistry *ContractStakeRegistrySession) StrategyAndWeightingMultiplierForQuorumByIndex(quorumNumber uint8, index *big.Int) (IVoteWeigherStrategyAndWeightingMultiplier, error) {
	return _ContractStakeRegistry.Contract.StrategyAndWeightingMultiplierForQuorumByIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, index)
}

// StrategyAndWeightingMultiplierForQuorumByIndex is a free data retrieval call binding the contract method 0x7cc0d75f.
//
// Solidity: function strategyAndWeightingMultiplierForQuorumByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StrategyAndWeightingMultiplierForQuorumByIndex(quorumNumber uint8, index *big.Int) (IVoteWeigherStrategyAndWeightingMultiplier, error) {
	return _ContractStakeRegistry.Contract.StrategyAndWeightingMultiplierForQuorumByIndex(&_ContractStakeRegistry.CallOpts, quorumNumber, index)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) StrategyManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "strategyManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistrySession) StrategyManager() (common.Address, error) {
	return _ContractStakeRegistry.Contract.StrategyManager(&_ContractStakeRegistry.CallOpts)
}

// StrategyManager is a free data retrieval call binding the contract method 0x39b70e38.
//
// Solidity: function strategyManager() view returns(address)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) StrategyManager() (common.Address, error) {
	return _ContractStakeRegistry.Contract.StrategyManager(&_ContractStakeRegistry.CallOpts)
}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCaller) WeightOfOperatorForQuorum(opts *bind.CallOpts, quorumNumber uint8, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractStakeRegistry.contract.Call(opts, &out, "weightOfOperatorForQuorum", quorumNumber, operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistrySession) WeightOfOperatorForQuorum(quorumNumber uint8, operator common.Address) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.WeightOfOperatorForQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber, operator)
}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractStakeRegistry *ContractStakeRegistryCallerSession) WeightOfOperatorForQuorum(quorumNumber uint8, operator common.Address) (*big.Int, error) {
	return _ContractStakeRegistry.Contract.WeightOfOperatorForQuorum(&_ContractStakeRegistry.CallOpts, quorumNumber, operator)
}

// AddStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0xbba549fa.
//
// Solidity: function addStrategiesConsideredAndMultipliers(uint8 quorumNumber, (address,uint96)[] _newStrategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) AddStrategiesConsideredAndMultipliers(opts *bind.TransactOpts, quorumNumber uint8, _newStrategiesConsideredAndMultipliers []IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "addStrategiesConsideredAndMultipliers", quorumNumber, _newStrategiesConsideredAndMultipliers)
}

// AddStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0xbba549fa.
//
// Solidity: function addStrategiesConsideredAndMultipliers(uint8 quorumNumber, (address,uint96)[] _newStrategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) AddStrategiesConsideredAndMultipliers(quorumNumber uint8, _newStrategiesConsideredAndMultipliers []IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.AddStrategiesConsideredAndMultipliers(&_ContractStakeRegistry.TransactOpts, quorumNumber, _newStrategiesConsideredAndMultipliers)
}

// AddStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0xbba549fa.
//
// Solidity: function addStrategiesConsideredAndMultipliers(uint8 quorumNumber, (address,uint96)[] _newStrategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) AddStrategiesConsideredAndMultipliers(quorumNumber uint8, _newStrategiesConsideredAndMultipliers []IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.AddStrategiesConsideredAndMultipliers(&_ContractStakeRegistry.TransactOpts, quorumNumber, _newStrategiesConsideredAndMultipliers)
}

// CreateQuorum is a paid mutator transaction binding the contract method 0x99eed4ee.
//
// Solidity: function createQuorum((address,uint96)[] _strategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) CreateQuorum(opts *bind.TransactOpts, _strategiesConsideredAndMultipliers []IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "createQuorum", _strategiesConsideredAndMultipliers)
}

// CreateQuorum is a paid mutator transaction binding the contract method 0x99eed4ee.
//
// Solidity: function createQuorum((address,uint96)[] _strategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) CreateQuorum(_strategiesConsideredAndMultipliers []IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.CreateQuorum(&_ContractStakeRegistry.TransactOpts, _strategiesConsideredAndMultipliers)
}

// CreateQuorum is a paid mutator transaction binding the contract method 0x99eed4ee.
//
// Solidity: function createQuorum((address,uint96)[] _strategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) CreateQuorum(_strategiesConsideredAndMultipliers []IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.CreateQuorum(&_ContractStakeRegistry.TransactOpts, _strategiesConsideredAndMultipliers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) DeregisterOperator(opts *bind.TransactOpts, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "deregisterOperator", operatorId, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) DeregisterOperator(operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.DeregisterOperator(&_ContractStakeRegistry.TransactOpts, operatorId, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) DeregisterOperator(operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.DeregisterOperator(&_ContractStakeRegistry.TransactOpts, operatorId, quorumNumbers)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f2948ec.
//
// Solidity: function initialize(uint96[] _minimumStakeForQuorum, (address,uint96)[][] _quorumStrategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) Initialize(opts *bind.TransactOpts, _minimumStakeForQuorum []*big.Int, _quorumStrategiesConsideredAndMultipliers [][]IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "initialize", _minimumStakeForQuorum, _quorumStrategiesConsideredAndMultipliers)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f2948ec.
//
// Solidity: function initialize(uint96[] _minimumStakeForQuorum, (address,uint96)[][] _quorumStrategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) Initialize(_minimumStakeForQuorum []*big.Int, _quorumStrategiesConsideredAndMultipliers [][]IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.Initialize(&_ContractStakeRegistry.TransactOpts, _minimumStakeForQuorum, _quorumStrategiesConsideredAndMultipliers)
}

// Initialize is a paid mutator transaction binding the contract method 0x5f2948ec.
//
// Solidity: function initialize(uint96[] _minimumStakeForQuorum, (address,uint96)[][] _quorumStrategiesConsideredAndMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) Initialize(_minimumStakeForQuorum []*big.Int, _quorumStrategiesConsideredAndMultipliers [][]IVoteWeigherStrategyAndWeightingMultiplier) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.Initialize(&_ContractStakeRegistry.TransactOpts, _minimumStakeForQuorum, _quorumStrategiesConsideredAndMultipliers)
}

// ModifyStrategyWeights is a paid mutator transaction binding the contract method 0x2c2a5d2b.
//
// Solidity: function modifyStrategyWeights(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) ModifyStrategyWeights(opts *bind.TransactOpts, quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "modifyStrategyWeights", quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyWeights is a paid mutator transaction binding the contract method 0x2c2a5d2b.
//
// Solidity: function modifyStrategyWeights(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) ModifyStrategyWeights(quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.ModifyStrategyWeights(&_ContractStakeRegistry.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyWeights is a paid mutator transaction binding the contract method 0x2c2a5d2b.
//
// Solidity: function modifyStrategyWeights(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) ModifyStrategyWeights(quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.ModifyStrategyWeights(&_ContractStakeRegistry.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) RegisterOperator(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "registerOperator", operator, operatorId, quorumNumbers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) RegisterOperator(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.RegisterOperator(&_ContractStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) RegisterOperator(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.RegisterOperator(&_ContractStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// RemoveStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0x2b3d8816.
//
// Solidity: function removeStrategiesConsideredAndMultipliers(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) RemoveStrategiesConsideredAndMultipliers(opts *bind.TransactOpts, quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "removeStrategiesConsideredAndMultipliers", quorumNumber, indicesToRemove)
}

// RemoveStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0x2b3d8816.
//
// Solidity: function removeStrategiesConsideredAndMultipliers(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) RemoveStrategiesConsideredAndMultipliers(quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.RemoveStrategiesConsideredAndMultipliers(&_ContractStakeRegistry.TransactOpts, quorumNumber, indicesToRemove)
}

// RemoveStrategiesConsideredAndMultipliers is a paid mutator transaction binding the contract method 0x2b3d8816.
//
// Solidity: function removeStrategiesConsideredAndMultipliers(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) RemoveStrategiesConsideredAndMultipliers(quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.RemoveStrategiesConsideredAndMultipliers(&_ContractStakeRegistry.TransactOpts, quorumNumber, indicesToRemove)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) SetMinimumStakeForQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "setMinimumStakeForQuorum", quorumNumber, minimumStake)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) SetMinimumStakeForQuorum(quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.SetMinimumStakeForQuorum(&_ContractStakeRegistry.TransactOpts, quorumNumber, minimumStake)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) SetMinimumStakeForQuorum(quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.SetMinimumStakeForQuorum(&_ContractStakeRegistry.TransactOpts, quorumNumber, minimumStake)
}

// UpdateStakes is a paid mutator transaction binding the contract method 0xce977ec3.
//
// Solidity: function updateStakes(address[] operators) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactor) UpdateStakes(opts *bind.TransactOpts, operators []common.Address) (*types.Transaction, error) {
	return _ContractStakeRegistry.contract.Transact(opts, "updateStakes", operators)
}

// UpdateStakes is a paid mutator transaction binding the contract method 0xce977ec3.
//
// Solidity: function updateStakes(address[] operators) returns()
func (_ContractStakeRegistry *ContractStakeRegistrySession) UpdateStakes(operators []common.Address) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.UpdateStakes(&_ContractStakeRegistry.TransactOpts, operators)
}

// UpdateStakes is a paid mutator transaction binding the contract method 0xce977ec3.
//
// Solidity: function updateStakes(address[] operators) returns()
func (_ContractStakeRegistry *ContractStakeRegistryTransactorSession) UpdateStakes(operators []common.Address) (*types.Transaction, error) {
	return _ContractStakeRegistry.Contract.UpdateStakes(&_ContractStakeRegistry.TransactOpts, operators)
}

// ContractStakeRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryInitializedIterator struct {
	Event *ContractStakeRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryInitialized represents a Initialized event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractStakeRegistryInitializedIterator, error) {

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryInitializedIterator{contract: _ContractStakeRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryInitialized)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseInitialized(log types.Log) (*ContractStakeRegistryInitialized, error) {
	event := new(ContractStakeRegistryInitialized)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator is returned from FilterMinimumStakeForQuorumUpdated and is used to iterate over the raw logs and unpacked data for MinimumStakeForQuorumUpdated events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator struct {
	Event *ContractStakeRegistryMinimumStakeForQuorumUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryMinimumStakeForQuorumUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryMinimumStakeForQuorumUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryMinimumStakeForQuorumUpdated represents a MinimumStakeForQuorumUpdated event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryMinimumStakeForQuorumUpdated struct {
	QuorumNumber uint8
	MinimumStake *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMinimumStakeForQuorumUpdated is a free log retrieval operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterMinimumStakeForQuorumUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "MinimumStakeForQuorumUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryMinimumStakeForQuorumUpdatedIterator{contract: _ContractStakeRegistry.contract, event: "MinimumStakeForQuorumUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumStakeForQuorumUpdated is a free log subscription operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchMinimumStakeForQuorumUpdated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryMinimumStakeForQuorumUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "MinimumStakeForQuorumUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryMinimumStakeForQuorumUpdated)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "MinimumStakeForQuorumUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumStakeForQuorumUpdated is a log parse operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseMinimumStakeForQuorumUpdated(log types.Log) (*ContractStakeRegistryMinimumStakeForQuorumUpdated, error) {
	event := new(ContractStakeRegistryMinimumStakeForQuorumUpdated)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "MinimumStakeForQuorumUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryQuorumCreatedIterator is returned from FilterQuorumCreated and is used to iterate over the raw logs and unpacked data for QuorumCreated events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryQuorumCreatedIterator struct {
	Event *ContractStakeRegistryQuorumCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryQuorumCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryQuorumCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryQuorumCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryQuorumCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryQuorumCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryQuorumCreated represents a QuorumCreated event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryQuorumCreated struct {
	QuorumNumber uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterQuorumCreated is a free log retrieval operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterQuorumCreated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryQuorumCreatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "QuorumCreated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryQuorumCreatedIterator{contract: _ContractStakeRegistry.contract, event: "QuorumCreated", logs: logs, sub: sub}, nil
}

// WatchQuorumCreated is a free log subscription operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchQuorumCreated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryQuorumCreated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "QuorumCreated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryQuorumCreated)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "QuorumCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuorumCreated is a log parse operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseQuorumCreated(log types.Log) (*ContractStakeRegistryQuorumCreated, error) {
	event := new(ContractStakeRegistryQuorumCreated)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "QuorumCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryStakeUpdateIterator is returned from FilterStakeUpdate and is used to iterate over the raw logs and unpacked data for StakeUpdate events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStakeUpdateIterator struct {
	Event *ContractStakeRegistryStakeUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryStakeUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryStakeUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryStakeUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryStakeUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryStakeUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryStakeUpdate represents a StakeUpdate event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStakeUpdate struct {
	OperatorId   [32]byte
	QuorumNumber uint8
	Stake        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStakeUpdate is a free log retrieval operation binding the contract event 0xe7c60c52692f0e0ff8d1c289ffe63cb02e79373f35e3000cafe7cca898885934.
//
// Solidity: event StakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterStakeUpdate(opts *bind.FilterOpts, operatorId [][32]byte) (*ContractStakeRegistryStakeUpdateIterator, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "StakeUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryStakeUpdateIterator{contract: _ContractStakeRegistry.contract, event: "StakeUpdate", logs: logs, sub: sub}, nil
}

// WatchStakeUpdate is a free log subscription operation binding the contract event 0xe7c60c52692f0e0ff8d1c289ffe63cb02e79373f35e3000cafe7cca898885934.
//
// Solidity: event StakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchStakeUpdate(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStakeUpdate, operatorId [][32]byte) (event.Subscription, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "StakeUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryStakeUpdate)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "StakeUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeUpdate is a log parse operation binding the contract event 0xe7c60c52692f0e0ff8d1c289ffe63cb02e79373f35e3000cafe7cca898885934.
//
// Solidity: event StakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseStakeUpdate(log types.Log) (*ContractStakeRegistryStakeUpdate, error) {
	event := new(ContractStakeRegistryStakeUpdate)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "StakeUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryStrategyAddedToQuorumIterator is returned from FilterStrategyAddedToQuorum and is used to iterate over the raw logs and unpacked data for StrategyAddedToQuorum events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyAddedToQuorumIterator struct {
	Event *ContractStakeRegistryStrategyAddedToQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryStrategyAddedToQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryStrategyAddedToQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryStrategyAddedToQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryStrategyAddedToQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryStrategyAddedToQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryStrategyAddedToQuorum represents a StrategyAddedToQuorum event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyAddedToQuorum struct {
	QuorumNumber uint8
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyAddedToQuorum is a free log retrieval operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterStrategyAddedToQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyAddedToQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryStrategyAddedToQuorumIterator{contract: _ContractStakeRegistry.contract, event: "StrategyAddedToQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyAddedToQuorum is a free log subscription operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchStrategyAddedToQuorum(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyAddedToQuorum, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryStrategyAddedToQuorum)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyAddedToQuorum is a log parse operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseStrategyAddedToQuorum(log types.Log) (*ContractStakeRegistryStrategyAddedToQuorum, error) {
	event := new(ContractStakeRegistryStrategyAddedToQuorum)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryStrategyMultiplierUpdatedIterator is returned from FilterStrategyMultiplierUpdated and is used to iterate over the raw logs and unpacked data for StrategyMultiplierUpdated events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyMultiplierUpdatedIterator struct {
	Event *ContractStakeRegistryStrategyMultiplierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryStrategyMultiplierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryStrategyMultiplierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryStrategyMultiplierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryStrategyMultiplierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryStrategyMultiplierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryStrategyMultiplierUpdated represents a StrategyMultiplierUpdated event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyMultiplierUpdated struct {
	QuorumNumber uint8
	Strategy     common.Address
	Multiplier   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyMultiplierUpdated is a free log retrieval operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterStrategyMultiplierUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyMultiplierUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "StrategyMultiplierUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryStrategyMultiplierUpdatedIterator{contract: _ContractStakeRegistry.contract, event: "StrategyMultiplierUpdated", logs: logs, sub: sub}, nil
}

// WatchStrategyMultiplierUpdated is a free log subscription operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchStrategyMultiplierUpdated(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyMultiplierUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "StrategyMultiplierUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryStrategyMultiplierUpdated)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyMultiplierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyMultiplierUpdated is a log parse operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseStrategyMultiplierUpdated(log types.Log) (*ContractStakeRegistryStrategyMultiplierUpdated, error) {
	event := new(ContractStakeRegistryStrategyMultiplierUpdated)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyMultiplierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractStakeRegistryStrategyRemovedFromQuorumIterator is returned from FilterStrategyRemovedFromQuorum and is used to iterate over the raw logs and unpacked data for StrategyRemovedFromQuorum events raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyRemovedFromQuorumIterator struct {
	Event *ContractStakeRegistryStrategyRemovedFromQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractStakeRegistryStrategyRemovedFromQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStakeRegistryStrategyRemovedFromQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractStakeRegistryStrategyRemovedFromQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractStakeRegistryStrategyRemovedFromQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractStakeRegistryStrategyRemovedFromQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractStakeRegistryStrategyRemovedFromQuorum represents a StrategyRemovedFromQuorum event raised by the ContractStakeRegistry contract.
type ContractStakeRegistryStrategyRemovedFromQuorum struct {
	QuorumNumber uint8
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyRemovedFromQuorum is a free log retrieval operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) FilterStrategyRemovedFromQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractStakeRegistryStrategyRemovedFromQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.FilterLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakeRegistryStrategyRemovedFromQuorumIterator{contract: _ContractStakeRegistry.contract, event: "StrategyRemovedFromQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyRemovedFromQuorum is a free log subscription operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) WatchStrategyRemovedFromQuorum(opts *bind.WatchOpts, sink chan<- *ContractStakeRegistryStrategyRemovedFromQuorum, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractStakeRegistry.contract.WatchLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractStakeRegistryStrategyRemovedFromQuorum)
				if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyRemovedFromQuorum is a log parse operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractStakeRegistry *ContractStakeRegistryFilterer) ParseStrategyRemovedFromQuorum(log types.Log) (*ContractStakeRegistryStrategyRemovedFromQuorum, error) {
	event := new(ContractStakeRegistryStrategyRemovedFromQuorum)
	if err := _ContractStakeRegistry.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
