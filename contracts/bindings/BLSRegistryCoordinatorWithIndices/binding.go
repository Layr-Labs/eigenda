// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractBLSRegistryCoordinatorWithIndices

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// IBLSRegistryCoordinatorWithIndicesOperatorKickParam is an auto generated low-level Go binding around an user-defined struct.
type IBLSRegistryCoordinatorWithIndicesOperatorKickParam struct {
	QuorumNumber uint8
	Operator     common.Address
	Pubkey       BN254G1Point
}

// IBLSRegistryCoordinatorWithIndicesOperatorSetParam is an auto generated low-level Go binding around an user-defined struct.
type IBLSRegistryCoordinatorWithIndicesOperatorSetParam struct {
	MaxOperatorCount        uint32
	KickBIPsOfOperatorStake uint16
	KickBIPsOfTotalStake    uint16
}

// IRegistryCoordinatorOperator is an auto generated low-level Go binding around an user-defined struct.
type IRegistryCoordinatorOperator struct {
	OperatorId [32]byte
	Status     uint8
}

// IRegistryCoordinatorQuorumBitmapUpdate is an auto generated low-level Go binding around an user-defined struct.
type IRegistryCoordinatorQuorumBitmapUpdate struct {
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
	QuorumBitmap          *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// ContractBLSRegistryCoordinatorWithIndicesMetaData contains all meta data concerning the ContractBLSRegistryCoordinatorWithIndices contract.
var ContractBLSRegistryCoordinatorWithIndicesMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_slasher\",\"type\":\"address\",\"internalType\":\"contractISlasher\"},{\"name\":\"_serviceManager\",\"type\":\"address\",\"internalType\":\"contractIServiceManager\"},{\"name\":\"_stakeRegistry\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"},{\"name\":\"_blsPubkeyRegistry\",\"type\":\"address\",\"internalType\":\"contractIBLSPubkeyRegistry\"},{\"name\":\"_indexRegistry\",\"type\":\"address\",\"internalType\":\"contractIIndexRegistry\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"OPERATOR_CHURN_APPROVAL_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"blsPubkeyRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBLSPubkeyRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"calculateOperatorChurnApprovalDigestHash\",\"inputs\":[{\"name\":\"registeringOperatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"operatorKickParams\",\"type\":\"tuple[]\",\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorKickParam[]\",\"components\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pubkey\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"churnApprover\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperatorWithCoordinator\",\"inputs\":[{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterOperatorWithCoordinator\",\"inputs\":[{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"deregistrationData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ejectOperatorFromCoordinator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"ejector\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentQuorumBitmapByOperatorId\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint192\",\"internalType\":\"uint192\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIRegistryCoordinator.Operator\",\"components\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enumIRegistryCoordinator.OperatorStatus\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorFromId\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorId\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorSetParams\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorSetParam\",\"components\":[{\"name\":\"maxOperatorCount\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\",\"internalType\":\"uint16\"},{\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\",\"internalType\":\"uint16\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOperatorStatus\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumIRegistryCoordinator.OperatorStatus\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getQuorumBitmapByOperatorIdAtBlockNumberByIndex\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint192\",\"internalType\":\"uint192\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getQuorumBitmapIndicesByOperatorIdsAtBlockNumber\",\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"operatorIds\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getQuorumBitmapUpdateByOperatorIdByIndex\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIRegistryCoordinator.QuorumBitmapUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumBitmap\",\"type\":\"uint192\",\"internalType\":\"uint192\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getQuorumBitmapUpdateByOperatorIdLength\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"indexRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIIndexRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_churnApprover\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_ejector\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_operatorSetParams\",\"type\":\"tuple[]\",\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorSetParam[]\",\"components\":[{\"name\":\"maxOperatorCount\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\",\"internalType\":\"uint16\"},{\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\",\"internalType\":\"uint16\"}]},{\"name\":\"_pauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"_initialPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isChurnApproverSaltUsed\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"numRegistries\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorWithCoordinator\",\"inputs\":[{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"socket\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"operatorKickParams\",\"type\":\"tuple[]\",\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorKickParam[]\",\"components\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pubkey\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]},{\"name\":\"signatureWithSaltAndExpiry\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerOperatorWithCoordinator\",\"inputs\":[{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"registrationData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerOperatorWithCoordinator\",\"inputs\":[{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"pubkey\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"socket\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registries\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"serviceManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIServiceManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setChurnApprover\",\"inputs\":[{\"name\":\"_churnApprover\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setEjector\",\"inputs\":[{\"name\":\"_ejector\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setOperatorSetParams\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operatorSetParam\",\"type\":\"tuple\",\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorSetParam\",\"components\":[{\"name\":\"maxOperatorCount\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\",\"internalType\":\"uint16\"},{\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\",\"internalType\":\"uint16\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"slasher\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractISlasher\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateSocket\",\"inputs\":[{\"name\":\"socket\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ChurnApproverUpdated\",\"inputs\":[{\"name\":\"prevChurnApprover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newChurnApprover\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EjectorUpdated\",\"inputs\":[{\"name\":\"prevEjector\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newEjector\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorDeregistered\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRegistered\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorSetParamsUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"operatorSetParams\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorSetParam\",\"components\":[{\"name\":\"maxOperatorCount\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\",\"internalType\":\"uint16\"},{\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\",\"internalType\":\"uint16\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorSocketUpdate\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"socket\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x6101e06040523480156200001257600080fd5b50604051620051bf380380620051bf833981016040819052620000359162000183565b604080518082018252601681527f4156535265676973747279436f6f7264696e61746f720000000000000000000060208083019182528351808501909452600684526576302e302e3160d01b908401528151902060e08190527f6bda7e3f385e48841048390444cced5cc795af87758af67622e5f4f0882c4a996101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200012d8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c05261012052505050506001600160a01b0394851661014052928416610160529083166101a052821661018052166101c05262000203565b6001600160a01b03811681146200018057600080fd5b50565b600080600080600060a086880312156200019c57600080fd5b8551620001a9816200016a565b6020870151909550620001bc816200016a565b6040870151909450620001cf816200016a565b6060870151909350620001e2816200016a565b6080870151909250620001f5816200016a565b809150509295509295909350565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051614ec5620002fa600039600081816105890152818161187801528181612646015261302601526000818161052901528181610d7b01528181610e6201528181610ed301528181611802015281816125c10152612fa601526000818161042d0152818161120901528181611841015281816125290152612f260152600081816104540152818161127e015281816113390152611ba1015260006105c3015260006139d001526000613a1f015260006139fa015260006139530152600061397d015260006139a70152614ec56000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80635865c60c1161013b578063ab269b2d116100b8578063ca0de8821161007c578063ca0de8821461061e578063d72d8dd614610645578063e65797ad1461064d578063fabc1cbc146106f0578063fd39105a1461070357600080fd5b8063ab269b2d146105ab578063b1344271146105be578063b8347acc146105e5578063c66ab9ca146105f8578063c81b1ff41461060b57600080fd5b80636347c900116100ff5780636347c90014610511578063683048351461052457806385020d491461054b578063886f11951461056b5780639e9923c21461058457600080fd5b80635865c60c146104af578063595c6a67146104cf5780635ac86ab7146104d75780635b0b829f146104f65780635c975abb1461050957600080fd5b8063296bb064116101c95780633561deb11161018d5780633561deb1146104285780633998fdd31461044f578063455a43fc146104765780634b76b9d514610489578063526ea94e1461049c57600080fd5b8063296bb064146103b157806329d1e0c3146103c45780632cdd1e86146103d75780633064620d146103ea5780633431af251461041557600080fd5b806313542a4e1161021057806313542a4e1461031c578063136439dd146103455780631478851f14610358578063250075761461038b57806328f61b311461039e57600080fd5b80630159f1ce1461024d578063054310e61461029b578063055a62b6146102c65780630cf4b767146102f457806310d67a2f14610309575b600080fd5b61026061025b366004613dda565b61073f565b60408051825163ffffffff908116825260208085015190911690820152918101516001600160c01b0316908201526060015b60405180910390f35b6037546102ae906001600160a01b031681565b6040516001600160a01b039091168152602001610292565b6102e66102d4366004613dfc565b60009081526033602052604090205490565b604051908152602001610292565b610307610302366004613f01565b6107d0565b005b610307610317366004613f5a565b6108d1565b6102e661032a366004613f5a565b6001600160a01b031660009081526034602052604090205490565b610307610353366004613dfc565b610984565b61037b610366366004613dfc565b60356020526000908152604090205460ff1681565b6040519015158152602001610292565b610307610399366004614075565b610ac1565b6038546102ae906001600160a01b031681565b6102ae6103bf366004613dfc565b6111f0565b6103076103d2366004613f5a565b61127c565b6103076103e5366004613f5a565b611337565b6103fd6103f8366004614189565b6113f2565b6040516001600160c01b039091168152602001610292565b6103fd610423366004613dfc565b6115f3565b6102ae7f000000000000000000000000000000000000000000000000000000000000000081565b6102ae7f000000000000000000000000000000000000000000000000000000000000000081565b6103076104843660046141c1565b6116a9565b61030761049736600461429d565b6116e2565b6103076104aa36600461437a565b611a0e565b6104c26104bd366004613f5a565b611a5f565b604051610292919061441d565b610307611ad3565b61037b6104e5366004614450565b6001805460ff9092161b9081161490565b61030761050436600461446b565b611b9f565b6001546102e6565b6102ae61051f366004613dfc565b611c5f565b6102ae7f000000000000000000000000000000000000000000000000000000000000000081565b61055e61055936600461449f565b611c89565b6040516102929190614544565b6000546102ae906201000090046001600160a01b031681565b6102ae7f000000000000000000000000000000000000000000000000000000000000000081565b6102e66105b93660046145d5565b611fc4565b6102ae7f000000000000000000000000000000000000000000000000000000000000000081565b6103076105f3366004614689565b612028565b6103076106063660046146f0565b6120b3565b61030761061936600461437a565b61211e565b6102e67fae63aa1318751f64ef850e045417f86811eaecee1cebc226904d237b80704d9281565b6036546102e6565b6106bc61065b366004614450565b60408051606080820183526000808352602080840182905292840181905260ff9490941684526032825292829020825193840183525463ffffffff8116845261ffff600160201b8204811692850192909252600160301b9004169082015290565b60408051825163ffffffff16815260208084015161ffff908116918301919091529282015190921690820152606001610292565b6103076106fe366004613dfc565b612161565b610732610711366004613f5a565b6001600160a01b031660009081526034602052604090206001015460ff1690565b6040516102929190614774565b6040805160608101825260008082526020820181905291810191909152600083815260336020526040902080548390811061077c5761077c614782565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160c01b03600160401b909304929092169082015290505b92915050565b60013360009081526034602052604090206001015460ff1660028111156107f9576107f96143e5565b146108855760405162461bcd60e51b815260206004820152604b60248201527f424c535265676973747279436f6f7264696e61746f7257697468496e6469636960448201527f65732e757064617465536f636b65743a206f70657261746f72206973206e6f7460648201526a081c9959da5cdd195c995960aa1b608482015260a4015b60405180910390fd5b33600090815260346020526040908190205490517fec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa906108c69084906147f0565b60405180910390a250565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190614803565b6001600160a01b0316336001600160a01b0316146109785760405162461bcd60e51b815260040161087c90614820565b610981816122bd565b50565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f5919061486a565b610a115760405162461bcd60e51b815260040161087c9061488c565b60015481811614610a8a5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c6974790000000000000000606482015260840161087c565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020016108c6565b600180546000919081161415610ae95760405162461bcd60e51b815260040161087c906148d4565b6000610b2e338b8b8b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506123c292505050565b6040805160018082528183019092529192506000919060208083019080368337019050509050610b5d89612a15565b81600081518110610b7057610b70614782565b602002602001018181525050610bf381600081518110610b9257610b92614782565b60200260200101518787808060200260200160405190810160405280939291908181526020016000905b82821015610be857610bd96080830286013681900381019061490b565b81526020019060010190610bbc565b505050505086612a58565b6000805b8b8110156111e15760008d8d83818110610c1357610c13614782565b919091013560f81c6000818152603260209081526040918290208251606081018452905463ffffffff811680835261ffff600160201b8304811694840194909452600160301b90910490921692810192909252885192945090925090879085908110610c8157610c81614782565b602002602001015163ffffffff1611610c9b5750506111cf565b8160ff168a8a86818110610cb157610cb1614782565b610cc79260206080909202019081019150614450565b60ff1614610d605760405162461bcd60e51b81526020600482015260666024820152600080516020614e7083398151915260448201527f732e72656769737465724f70657261746f7257697468436f6f7264696e61746f60648201527f723a2071756f72756d4e756d626572206e6f74207468652073616d65206173206084820152651cda59db995960d21b60a482015260c40161087c565b604051630c8f739d60e41b815260ff831660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c8f739d090602401602060405180830381865afa158015610dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dee9190614927565b90506000603460008d8d89818110610e0857610e08614782565b9050608002016020016020810190610e209190613f5a565b6001600160a01b039081168252602082019290925260409081016000908120549151631aad4e3560e21b81526004810183905260ff88166024820152919350917f00000000000000000000000000000000000000000000000000000000000000001690636ab538d490604401602060405180830381865afa158015610ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecd9190614927565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636ab538d48a600081518110610f1357610f13614782565b6020026020010151886040518363ffffffff1660e01b8152600401610f4592919091825260ff16602082015260400190565b602060405180830381865afa158015610f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f869190614927565b602086015190915061271090610fa09061ffff1684614966565b610faa9190614995565b6001600160601b0316816001600160601b03161161106a5760405162461bcd60e51b815260206004820152607d6024820152600080516020614e7083398151915260448201527f732e72656769737465724f70657261746f7257697468436f6f7264696e61746f60648201527f723a207265676973746572696e67206f70657261746f7220686173206c65737360848201527f207468616e206b69636b424950734f664f70657261746f725374616b6500000060a482015260c40161087c565b6040850151612710906110819061ffff1686614966565b61108b9190614995565b6001600160601b0316826001600160601b0316106111445760405162461bcd60e51b81526020600482015260766024820152600080516020614e7083398151915260448201527f732e72656769737465724f70657261746f7257697468436f6f7264696e61746f60648201527f723a206f70657261746f7220746f206b69636b20686173206d6f7265207468616084820152756e206b69636b424950534f66546f74616c5374616b6560501b60a482015260c40161087c565b8761114e816149c9565b9850505050505050506111cf88888381811061116c5761116c614782565b90506080020160200160208101906111849190613f5a565b8e838f6111928260016149e4565b9261119f939291906149fc565b8b8b868181106111b1576111b1614782565b9050608002016040018036038101906111ca9190614a26565b612c25565b806111d9816149c9565b915050610bf7565b50505050505050505050505050565b6040516308f6629d60e31b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906347b314e890602401602060405180830381865afa158015611258573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca9190614803565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe9190614803565b6001600160a01b0316336001600160a01b03161461132e5760405162461bcd60e51b815260040161087c90614a42565b610981816131d2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b99190614803565b6001600160a01b0316336001600160a01b0316146113e95760405162461bcd60e51b815260040161087c90614a42565b6109818161323b565b600083815260336020526040812080548291908490811061141557611415614782565b600091825260209182902060408051606081018252929091015463ffffffff808216808552600160201b8304821695850195909552600160401b9091046001600160c01b031691830191909152909250851610156115155760405162461bcd60e51b815260206004820152607f6024820152600080516020614e7083398151915260448201527f732e67657451756f72756d4269746d617042794f70657261746f72496441744260648201527f6c6f636b4e756d6265724279496e6465783a2071756f72756d4269746d61705560848201527f70646174652069732066726f6d20616674657220626c6f636b4e756d6265720060a482015260c40161087c565b8363ffffffff16816020015163ffffffff16118061153b5750602081015163ffffffff16155b6115e75760405162461bcd60e51b81526020600482015260806024820152600080516020614e7083398151915260448201527f732e67657451756f72756d4269746d617042794f70657261746f72496441744260648201527f6c6f636b4e756d6265724279496e6465783a2071756f72756d4269746d61705560848201527f70646174652069732066726f6d206265666f726520626c6f636b4e756d62657260a482015260c40161087c565b60400151949350505050565b60008181526033602052604081205480158061164f57506000838152603360205260409020611623600183614abe565b8154811061163357611633614782565b600091825260209091200154600160201b900463ffffffff1615155b1561165d5750600092915050565b6000838152603360205260409020611676600183614abe565b8154811061168657611686614782565b600091825260209091200154600160401b90046001600160c01b03169392505050565b60018054600290811614156116d05760405162461bcd60e51b815260040161087c906148d4565b6116dc33858585612c25565b50505050565b600054610100900460ff16158080156117025750600054600160ff909116105b8061171c5750303b15801561171c575060005460ff166001145b61177f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161087c565b6000805460ff1916600117905580156117a2576000805461ff0019166101001790555b6117ac83836132a4565b6117b5866131d2565b6117be8561323b565b603680546001808201835560008390527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b891820180546001600160a01b03199081167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116918217909355855480850187558501805483167f0000000000000000000000000000000000000000000000000000000000000000851617905585549384019095559190920180549091167f0000000000000000000000000000000000000000000000000000000000000000909216919091179055845160408051639aa1653d60e01b81529051919291639aa1653d916004808201926020929091908290030181865afa1580156118e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119049190614ad5565b61ffff16146119785760405162461bcd60e51b81526020600482015260466024820152600080516020614e7083398151915260448201527f733a206f70657261746f722073657420706172616d73206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a40161087c565b60005b84518160ff1610156119bf576119ad81868360ff16815181106119a0576119a0614782565b6020026020010151613390565b806119b781614af2565b91505061197b565b508015611a06576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b600180546000919081161415611a365760405162461bcd60e51b815260040161087c906148d4565b600080611a4584860186614b12565b91509150611a56338888858561343d565b50505050505050565b60408051808201909152600080825260208201526001600160a01b0382166000908152603460209081526040918290208251808401909352805483526001810154909183019060ff166002811115611ab957611ab96143e5565b6002811115611aca57611aca6143e5565b90525092915050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b44919061486a565b611b605760405162461bcd60e51b815260040161087c9061488c565b600019600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c219190614803565b6001600160a01b0316336001600160a01b031614611c515760405162461bcd60e51b815260040161087c90614a42565b611c5b8282613390565b5050565b60368181548110611c6f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600082516001600160401b03811115611ca657611ca6613e15565b604051908082528060200260200182016040528015611ccf578160200160208202803683370190505b50905060005b8351811015611fbc57600060336000868481518110611cf657611cf6614782565b6020026020010151815260200190815260200160002080549050905060005b8163ffffffff168163ffffffff161015611fa7578663ffffffff1660336000888681518110611d4657611d46614782565b6020026020010151815260200190815260200160002060018385611d6a9190614b60565b611d749190614b60565b63ffffffff1681548110611d8a57611d8a614782565b60009182526020909120015463ffffffff1611611f955760336000878581518110611db757611db7614782565b6020026020010151815260200190815260200160002060018284611ddb9190614b60565b611de59190614b60565b63ffffffff1681548110611dfb57611dfb614782565b600091825260209091200154600160201b900463ffffffff161580611e9757508663ffffffff1660336000888681518110611e3857611e38614782565b6020026020010151815260200190815260200160002060018385611e5c9190614b60565b611e669190614b60565b63ffffffff1681548110611e7c57611e7c614782565b600091825260209091200154600160201b900463ffffffff16115b611f4e5760405162461bcd60e51b81526020600482015260826024820152600080516020614e7083398151915260448201527f732e67657451756f72756d4269746d6170496e646963657342794f706572617460648201527f6f724964734174426c6f636b4e756d6265723a206f70657261746f724964206860848201527f6173206e6f2071756f72756d4269746d61707320617420626c6f636b4e756d6260a48201526132b960f11b60c482015260e40161087c565b6001611f5a8284614b60565b611f649190614b60565b848481518110611f7657611f76614782565b602002602001019063ffffffff16908163ffffffff1681525050611fa7565b80611f9f81614b85565b915050611d15565b50508080611fb4906149c9565b915050611cd5565b509392505050565b600061201d7fae63aa1318751f64ef850e045417f86811eaecee1cebc226904d237b80704d9286868686604051602001612002959493929190614ba9565b60405160208183030381529060405280519060200120613554565b90505b949350505050565b6038546001600160a01b031633146120a75760405162461bcd60e51b81526020600482015260486024820152600080516020614e7083398151915260448201527f732e6f6e6c79456a6563746f723a2063616c6c6572206973206e6f74207468656064820152671032b532b1ba37b960c11b608482015260a40161087c565b6116dc84848484612c25565b6001805460009190811614156120db5760405162461bcd60e51b815260040161087c906148d4565b611a063387878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061343d92505050565b60018054600290811614156121455760405162461bcd60e51b815260040161087c906148d4565b600061215383850185614a26565b9050611a0633878784612c25565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d89190614803565b6001600160a01b0316336001600160a01b0316146122085760405162461bcd60e51b815260040161087c90614820565b6001541981196001541916146122865760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c6974790000000000000000606482015260840161087c565b600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c906020016108c6565b6001600160a01b03811661234b5760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a40161087c565b600054604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6060600061240586868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506135a292505050565b90506001600160c01b0381111561249a5760405162461bcd60e51b815260206004820152606b6024820152600080516020614e708339815191526044820152600080516020614e5083398151915260648201527f6f723a2071756f72756d4269746d61702065786365656473206f66206d61782060848201526a6269746d61702073697a6560a81b60a482015260c40161087c565b8061250f5760405162461bcd60e51b815260206004820152605c6024820152600080516020614e708339815191526044820152600080516020614e5083398151915260648201527f6f723a2071756f72756d4269746d61702063616e6e6f74206265203000000000608482015260a40161087c565b6040516303ce4bad60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906303ce4bad90612564908b908b908b908b90600401614c66565b6020604051808303816000875af1158015612583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a79190614ca3565b604051632550477760e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906325504777906125fc908b9085908c908c90600401614cbc565b600060405180830381600087803b15801561261657600080fd5b505af115801561262a573d6000803e3d6000fd5b505060405162bff04d60e01b8152600092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915062bff04d9061267f9085908c908c90600401614cee565b6000604051808303816000875af115801561269e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126c69190810190614d08565b6000838152603360205260409020549091508015801590612726575060008381526033602052604090206126fb600183614abe565b8154811061270b5761270b614782565b600091825260209091200154600160201b900463ffffffff16155b1561287d576000838152603360205260408120612744600184614abe565b8154811061275457612754614782565b6000918252602090912001546001600160c01b03600160401b9091048181169250861616156128215760405162461bcd60e51b81526020600482015260856024820152600080516020614e708339815191526044820152600080516020614e5083398151915260648201527f6f723a206f70657261746f7220616c726561647920726567697374657265642060848201527f666f7220736f6d652071756f72756d73206265696e672072656769737465726560a48201526432103337b960d91b60c482015260e40161087c565b6000848152603360205260409020948117944390612840600185614abe565b8154811061285057612850614782565b9060005260206000200160000160046101000a81548163ffffffff021916908363ffffffff160217905550505b6000838152603360209081526040808320815160608101835263ffffffff43811682528185018681526001600160c01b038b8116848701908152855460018082018855968a52888a2095519501805493519151909216600160401b026001600160401b03918516600160201b0267ffffffffffffffff19909416959094169490941791909117929092161790556001600160a01b038e168452603490925290912081015460ff166002811115612935576129356143e5565b146129ce57604080518082018252848152600160208083018281526001600160a01b038f166000908152603490925293902082518155925183820180549394939192909160ff191690836002811115612990576129906143e5565b0217905550506040518491506001600160a01b038c16907fe8e68cef1c3a761ed7be7e8463a375f27f7bc335e51824223cacce636ec5c3fe90600090a35b827fec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa876040516129fe91906147f0565b60405180910390a250925050505b95945050505050565b600081600001518260200151604051602001612a3b929190918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b60208082015160009081526035909152604090205460ff1615612b1d5760405162461bcd60e51b81526020600482015260776024820152600080516020614e7083398151915260448201527f732e5f766572696679436875726e417070726f7665725369676e61747572654f60648201527f6e4f70657261746f72436875726e417070726f76616c3a20636875726e41707060848201527f726f7665722073616c7420616c7265616479207573656400000000000000000060a482015260c40161087c565b4281604001511015612bd15760405162461bcd60e51b81526020600482015260776024820152600080516020614e7083398151915260448201527f732e5f766572696679436875726e417070726f7665725369676e61747572654f60648201527f6e4f70657261746f72436875726e417070726f76616c3a20636875726e41707060848201527f726f766572207369676e6174757265206578706972656400000000000000000060a482015260c40161087c565b6020808201805160009081526035909252604091829020805460ff19166001179055603754905191830151612c20926001600160a01b0390921691612c199187918791611fc4565b835161372f565b505050565b60016001600160a01b03851660009081526034602052604090206001015460ff166002811115612c5757612c576143e5565b14612cde5760405162461bcd60e51b81526020600482015260606024820152600080516020614e7083398151915260448201527f732e5f646572656769737465724f70657261746f7257697468436f6f7264696e60648201527f61746f723a206f70657261746f72206973206e6f742072656769737465726564608482015260a40161087c565b6001600160a01b038416600090815260346020526040902054612d0082612a15565b8114612d9c5760405162461bcd60e51b815260206004820152606b6024820152600080516020614e7083398151915260448201527f732e5f646572656769737465724f70657261746f7257697468436f6f7264696e60648201527f61746f723a206f70657261746f72496420646f6573206e6f74206d617463682060848201526a0e0eac4d6caf240d0c2e6d60ab1b60a482015260c40161087c565b6000612ddd85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506135a292505050565b60008381526033602052604081205491925090612dfc90600190614abe565b60008481526033602052604081208054929350909183908110612e2157612e21614782565b6000918252602082200154600160401b90049384166001600160c01b0390811694169150612e4e846138e9565b9050805160001415612f025760405162461bcd60e51b81526020600482015260806024820152600080516020614e7083398151915260448201527f732e5f646572656769737465724f70657261746f7257697468436f6f7264696e60648201527f61746f723a206f70657261746f72206973206e6f74207265676973746572656460848201527f20666f7220616e79206f66207468652070726f76696465642071756f72756d7360a482015260c40161087c565b60405163121b4d9560e11b81526001600160c01b0383168514906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906324369b2a90612f5f908d9086908c90600401614da1565b600060405180830381600087803b158015612f7957600080fd5b505af1158015612f8d573d6000803e3d6000fd5b505060405163bd29b8cd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063bd29b8cd9150612fdf9089908690600401614ddd565b600060405180830381600087803b158015612ff957600080fd5b505af115801561300d573d6000803e3d6000fd5b505060405163bd29b8cd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063bd29b8cd915061305f9089908690600401614ddd565b600060405180830381600087803b15801561307957600080fd5b505af115801561308d573d6000803e3d6000fd5b50505060008781526033602052604090208054439250869081106130b3576130b3614782565b9060005260206000200160000160046101000a81548163ffffffff021916908363ffffffff16021790555080613177576000868152603360209081526040808320815160608101835263ffffffff43811682528185018681526001600160c01b038c198b168116958401958652845460018101865594885295909620915191909201805495519351909416600160401b026001600160401b03938316600160201b0267ffffffffffffffff19909616919092161793909317169190911790556131c6565b6001600160a01b038a16600081815260346020526040808220600101805460ff19166002179055518892917f396fdcb180cb0fea26928113fb0fd1c3549863f9cd563e6a184f1d578116c8e491a35b50505050505050505050565b603754604080516001600160a01b03928316815291831660208301527f315457d8a8fe60f04af17c16e2f5a5e1db612b31648e58030360759ef8f3528c910160405180910390a1603780546001600160a01b0319166001600160a01b0392909216919091179055565b603854604080516001600160a01b03928316815291831660208301527f8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9910160405180910390a1603880546001600160a01b0319166001600160a01b0392909216919091179055565b6000546201000090046001600160a01b03161580156132cb57506001600160a01b03821615155b61334d5760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a40161087c565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2611c5b826122bd565b60ff8216600081815260326020908152604091829020845181548684018051888701805163ffffffff90951665ffffffffffff199094168417600160201b61ffff938416021767ffff0000000000001916600160301b95831695909502949094179094558551918252518316938101939093525116918101919091527f3ee6fe8d54610244c3e9d3c066ae4aee997884aa28f10616ae821925401318ac9060600160405180910390a25050565b600061344c86868686866123c2565b905060005b8151811015611a56576032600087878481811061347057613470614782565b919091013560f81c825250602081019190915260400160002054825163ffffffff909116908390839081106134a7576134a7614782565b602002602001015163ffffffff1611156135425760405162461bcd60e51b815260206004820152606e6024820152600080516020614e708339815191526044820152600080516020614e5083398151915260648201527f6f72416e644e6f4f76657266696c6c656451756f72756d733a2071756f72756d60848201526d081a5cc81bdd995c999a5b1b195960921b60a482015260c40161087c565b8061354c816149c9565b915050613451565b60006107ca613561613946565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60006101008251111561362b5760405162461bcd60e51b8152602060048201526044602482018190527f4269746d61705574696c732e6f72646572656442797465734172726179546f42908201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b608482015260a40161087c565b815161363957506000919050565b6000808360008151811061364f5761364f614782565b0160200151600160f89190911c81901b92505b84518110156137265784818151811061367d5761367d614782565b0160200151600160f89190911c1b91508282116137125760405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a40161087c565b9181179161371f816149c9565b9050613662565b50909392505050565b6001600160a01b0383163b1561384957604051630b135d3f60e11b808252906001600160a01b03851690631626ba7e9061376f9086908690600401614ddd565b602060405180830381865afa15801561378c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b09190614df6565b6001600160e01b03191614612c205760405162461bcd60e51b815260206004820152605360248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a2045524331323731207369676e6174757265206064820152721d995c9a599a58d85d1a5bdb8819985a5b1959606a1b608482015260a40161087c565b826001600160a01b031661385d8383613a6d565b6001600160a01b031614612c205760405162461bcd60e51b815260206004820152604760248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a207369676e6174757265206e6f742066726f6d6064820152661039b4b3b732b960c91b608482015260a40161087c565b60606000805b61010081101561393f576001811b91508382161561392f57828160f81b60405160200161391d929190614e20565b60405160208183030381529060405292505b613938816149c9565b90506138ef565b5050919050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561399f57507f000000000000000000000000000000000000000000000000000000000000000046145b156139c957507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000806000613a7c8585613a89565b91509150611fbc81613af9565b600080825160411415613ac05760208301516040840151606085015160001a613ab487828585613cb4565b94509450505050613af2565b825160401415613aea5760208301516040840151613adf868383613da1565b935093505050613af2565b506000905060025b9250929050565b6000816004811115613b0d57613b0d6143e5565b1415613b165750565b6001816004811115613b2a57613b2a6143e5565b1415613b785760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161087c565b6002816004811115613b8c57613b8c6143e5565b1415613bda5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161087c565b6003816004811115613bee57613bee6143e5565b1415613c475760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161087c565b6004816004811115613c5b57613c5b6143e5565b14156109815760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161087c565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613ceb5750600090506003613d98565b8460ff16601b14158015613d0357508460ff16601c14155b15613d145750600090506004613d98565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613d68573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613d9157600060019250925050613d98565b9150600090505b94509492505050565b6000806001600160ff1b03831681613dbe60ff86901c601b6149e4565b9050613dcc87828885613cb4565b935093505050935093915050565b60008060408385031215613ded57600080fd5b50508035926020909101359150565b600060208284031215613e0e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715613e4d57613e4d613e15565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613e7b57613e7b613e15565b604052919050565b60006001600160401b03831115613e9c57613e9c613e15565b613eaf601f8401601f1916602001613e53565b9050828152838383011115613ec357600080fd5b828260208301376000602084830101529392505050565b600082601f830112613eeb57600080fd5b613efa83833560208501613e83565b9392505050565b600060208284031215613f1357600080fd5b81356001600160401b03811115613f2957600080fd5b61202084828501613eda565b6001600160a01b038116811461098157600080fd5b8035613f5581613f35565b919050565b600060208284031215613f6c57600080fd5b8135613efa81613f35565b60008083601f840112613f8957600080fd5b5081356001600160401b03811115613fa057600080fd5b602083019150836020828501011115613af257600080fd5b600060408284031215613fca57600080fd5b604051604081018181106001600160401b0382111715613fec57613fec613e15565b604052823581526020928301359281019290925250919050565b60006060828403121561401857600080fd5b614020613e2b565b905081356001600160401b0381111561403857600080fd5b8201601f8101841361404957600080fd5b61405884823560208401613e83565b825250602082013560208201526040820135604082015292915050565b60008060008060008060008060c0898b03121561409157600080fd5b88356001600160401b03808211156140a857600080fd5b6140b48c838d01613f77565b909a5098508891506140c98c60208d01613fb8565b975060608b01359150808211156140df57600080fd5b6140eb8c838d01613f77565b909750955060808b013591508082111561410457600080fd5b818b0191508b601f83011261411857600080fd5b81358181111561412757600080fd5b8c60208260071b850101111561413c57600080fd5b6020830195508094505060a08b013591508082111561415a57600080fd5b506141678b828c01614006565b9150509295985092959890939650565b63ffffffff8116811461098157600080fd5b60008060006060848603121561419e57600080fd5b8335925060208401356141b081614177565b929592945050506040919091013590565b6000806000606084860312156141d657600080fd5b83356001600160401b038111156141ec57600080fd5b6141f886828701613f77565b909450925061420c90508560208601613fb8565b90509250925092565b60006001600160401b0382111561422e5761422e613e15565b5060051b60200190565b61ffff8116811461098157600080fd5b60006060828403121561425a57600080fd5b614262613e2b565b9050813561426f81614177565b8152602082013561427f81614238565b6020820152604082013561429281614238565b604082015292915050565b600080600080600060a086880312156142b557600080fd5b85356142c081613f35565b94506020868101356142d181613f35565b945060408701356001600160401b038111156142ec57600080fd5b8701601f810189136142fd57600080fd5b803561431061430b82614215565b613e53565b8181526060918202830184019184820191908c84111561432f57600080fd5b938501935b83851015614355576143468d86614248565b83529384019391850191614334565b819850614363818d01613f4a565b9a9d999c50979a6080013598975050505050505050565b6000806000806040858703121561439057600080fd5b84356001600160401b03808211156143a757600080fd5b6143b388838901613f77565b909650945060208701359150808211156143cc57600080fd5b506143d987828801613f77565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b6003811061441957634e487b7160e01b600052602160045260246000fd5b9052565b815181526020808301516040830191614438908401826143fb565b5092915050565b803560ff81168114613f5557600080fd5b60006020828403121561446257600080fd5b613efa8261443f565b6000806080838503121561447e57600080fd5b6144878361443f565b91506144968460208501614248565b90509250929050565b600080604083850312156144b257600080fd5b82356144bd81614177565b91506020838101356001600160401b038111156144d957600080fd5b8401601f810186136144ea57600080fd5b80356144f861430b82614215565b81815260059190911b8201830190838101908883111561451757600080fd5b928401925b828410156145355783358252928401929084019061451c565b80955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561458257835163ffffffff1683529284019291840191600101614560565b50909695505050505050565b6000608082840312156145a057600080fd5b6145a8613e2b565b90506145b38261443f565b815260208201356145c381613f35565b60208201526142928360408401613fb8565b60008060008060808086880312156145ec57600080fd5b853594506020808701356001600160401b0381111561460a57600080fd5b8701601f8101891361461b57600080fd5b803561462961430b82614215565b81815260079190911b8201830190838101908b83111561464857600080fd5b928401925b8284101561466e5761465f8c8561458e565b8252928501929084019061464d565b989b989a505050506040870135966060013595945050505050565b6000806000806080858703121561469f57600080fd5b84356146aa81613f35565b935060208501356001600160401b038111156146c557600080fd5b6146d187828801613f77565b90945092506146e590508660408701613fb8565b905092959194509250565b60008060008060006080868803121561470857600080fd5b85356001600160401b038082111561471f57600080fd5b61472b89838a01613f77565b90975095508591506147408960208a01613fb8565b9450606088013591508082111561475657600080fd5b5061476388828901613f77565b969995985093965092949392505050565b602081016107ca82846143fb565b634e487b7160e01b600052603260045260246000fd5b60005b838110156147b357818101518382015260200161479b565b838111156116dc5750506000910152565b600081518084526147dc816020860160208601614798565b601f01601f19169290920160200192915050565b602081526000613efa60208301846147c4565b60006020828403121561481557600080fd5b8151613efa81613f35565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561487c57600080fd5b81518015158114613efa57600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b60208082526019908201527f5061757361626c653a20696e6465782069732070617573656400000000000000604082015260600190565b60006080828403121561491d57600080fd5b613efa838361458e565b60006020828403121561493957600080fd5b81516001600160601b0381168114613efa57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b038083168185168183048111821515161561498c5761498c614950565b02949350505050565b60006001600160601b03808416806149bd57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60006000198214156149dd576149dd614950565b5060010190565b600082198211156149f7576149f7614950565b500190565b60008085851115614a0c57600080fd5b83861115614a1957600080fd5b5050820193919092039150565b600060408284031215614a3857600080fd5b613efa8383613fb8565b6020808252606290820152600080516020614e7083398151915260408201527f732e6f6e6c79536572766963654d616e616765724f776e65723a2063616c6c6560608201527f72206973206e6f74207468652073657276696365206d616e61676572206f776e60808201526132b960f11b60a082015260c00190565b600082821015614ad057614ad0614950565b500390565b600060208284031215614ae757600080fd5b8151613efa81614238565b600060ff821660ff811415614b0957614b09614950565b60010192915050565b60008060608385031215614b2557600080fd5b614b2f8484613fb8565b915060408301356001600160401b03811115614b4a57600080fd5b614b5685828601613eda565b9150509250929050565b600063ffffffff83811690831681811015614b7d57614b7d614950565b039392505050565b600063ffffffff80831681811415614b9f57614b9f614950565b6001019392505050565b600060a0820187835260208781850152604060a08186015282885180855260c087019150838a01945060005b81811015614c24578551805160ff168452858101516001600160a01b031686850152840151614c108585018280518252602090810151910152565b509484019460809290920191600101614bd5565b5050606086019790975250505050608001529392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0385168152608060208201819052600090614c8b9083018587614c3d565b83516040840152602084015160608401529050612a0c565b600060208284031215614cb557600080fd5b5051919050565b60018060a01b0385168152836020820152606060408201526000614ce4606083018486614c3d565b9695505050505050565b83815260406020820152600061201d604083018486614c3d565b60006020808385031215614d1b57600080fd5b82516001600160401b03811115614d3157600080fd5b8301601f81018513614d4257600080fd5b8051614d5061430b82614215565b81815260059190911b82018301908381019087831115614d6f57600080fd5b928401925b82841015614d96578351614d8781614177565b82529284019290840190614d74565b979650505050505050565b6001600160a01b0384168152608060208201819052600090614dc5908301856147c4565b83516040840152602084015160608401529050612020565b82815260406020820152600061202060408301846147c4565b600060208284031215614e0857600080fd5b81516001600160e01b031981168114613efa57600080fd5b60008351614e32818460208801614798565b6001600160f81b031993909316919092019081526001019291505056fe732e5f72656769737465724f70657261746f7257697468436f6f7264696e6174424c535265676973747279436f6f7264696e61746f7257697468496e64696365a2646970667358221220dac06bf6cf041be7705070ab0d9d580cc67c938cea5884160143fd213eec13e364736f6c634300080c0033",
}

// ContractBLSRegistryCoordinatorWithIndicesABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractBLSRegistryCoordinatorWithIndicesMetaData.ABI instead.
var ContractBLSRegistryCoordinatorWithIndicesABI = ContractBLSRegistryCoordinatorWithIndicesMetaData.ABI

// ContractBLSRegistryCoordinatorWithIndicesBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractBLSRegistryCoordinatorWithIndicesMetaData.Bin instead.
var ContractBLSRegistryCoordinatorWithIndicesBin = ContractBLSRegistryCoordinatorWithIndicesMetaData.Bin

// DeployContractBLSRegistryCoordinatorWithIndices deploys a new Ethereum contract, binding an instance of ContractBLSRegistryCoordinatorWithIndices to it.
func DeployContractBLSRegistryCoordinatorWithIndices(auth *bind.TransactOpts, backend bind.ContractBackend, _slasher common.Address, _serviceManager common.Address, _stakeRegistry common.Address, _blsPubkeyRegistry common.Address, _indexRegistry common.Address) (common.Address, *types.Transaction, *ContractBLSRegistryCoordinatorWithIndices, error) {
	parsed, err := ContractBLSRegistryCoordinatorWithIndicesMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBLSRegistryCoordinatorWithIndicesBin), backend, _slasher, _serviceManager, _stakeRegistry, _blsPubkeyRegistry, _indexRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractBLSRegistryCoordinatorWithIndices{ContractBLSRegistryCoordinatorWithIndicesCaller: ContractBLSRegistryCoordinatorWithIndicesCaller{contract: contract}, ContractBLSRegistryCoordinatorWithIndicesTransactor: ContractBLSRegistryCoordinatorWithIndicesTransactor{contract: contract}, ContractBLSRegistryCoordinatorWithIndicesFilterer: ContractBLSRegistryCoordinatorWithIndicesFilterer{contract: contract}}, nil
}

// ContractBLSRegistryCoordinatorWithIndices is an auto generated Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndices struct {
	ContractBLSRegistryCoordinatorWithIndicesCaller     // Read-only binding to the contract
	ContractBLSRegistryCoordinatorWithIndicesTransactor // Write-only binding to the contract
	ContractBLSRegistryCoordinatorWithIndicesFilterer   // Log filterer for contract events
}

// ContractBLSRegistryCoordinatorWithIndicesCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBLSRegistryCoordinatorWithIndicesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBLSRegistryCoordinatorWithIndicesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractBLSRegistryCoordinatorWithIndicesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBLSRegistryCoordinatorWithIndicesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractBLSRegistryCoordinatorWithIndicesSession struct {
	Contract     *ContractBLSRegistryCoordinatorWithIndices // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                              // Call options to use throughout this session
	TransactOpts bind.TransactOpts                          // Transaction auth options to use throughout this session
}

// ContractBLSRegistryCoordinatorWithIndicesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractBLSRegistryCoordinatorWithIndicesCallerSession struct {
	Contract *ContractBLSRegistryCoordinatorWithIndicesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                    // Call options to use throughout this session
}

// ContractBLSRegistryCoordinatorWithIndicesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractBLSRegistryCoordinatorWithIndicesTransactorSession struct {
	Contract     *ContractBLSRegistryCoordinatorWithIndicesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                    // Transaction auth options to use throughout this session
}

// ContractBLSRegistryCoordinatorWithIndicesRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesRaw struct {
	Contract *ContractBLSRegistryCoordinatorWithIndices // Generic contract binding to access the raw methods on
}

// ContractBLSRegistryCoordinatorWithIndicesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesCallerRaw struct {
	Contract *ContractBLSRegistryCoordinatorWithIndicesCaller // Generic read-only contract binding to access the raw methods on
}

// ContractBLSRegistryCoordinatorWithIndicesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesTransactorRaw struct {
	Contract *ContractBLSRegistryCoordinatorWithIndicesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractBLSRegistryCoordinatorWithIndices creates a new instance of ContractBLSRegistryCoordinatorWithIndices, bound to a specific deployed contract.
func NewContractBLSRegistryCoordinatorWithIndices(address common.Address, backend bind.ContractBackend) (*ContractBLSRegistryCoordinatorWithIndices, error) {
	contract, err := bindContractBLSRegistryCoordinatorWithIndices(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndices{ContractBLSRegistryCoordinatorWithIndicesCaller: ContractBLSRegistryCoordinatorWithIndicesCaller{contract: contract}, ContractBLSRegistryCoordinatorWithIndicesTransactor: ContractBLSRegistryCoordinatorWithIndicesTransactor{contract: contract}, ContractBLSRegistryCoordinatorWithIndicesFilterer: ContractBLSRegistryCoordinatorWithIndicesFilterer{contract: contract}}, nil
}

// NewContractBLSRegistryCoordinatorWithIndicesCaller creates a new read-only instance of ContractBLSRegistryCoordinatorWithIndices, bound to a specific deployed contract.
func NewContractBLSRegistryCoordinatorWithIndicesCaller(address common.Address, caller bind.ContractCaller) (*ContractBLSRegistryCoordinatorWithIndicesCaller, error) {
	contract, err := bindContractBLSRegistryCoordinatorWithIndices(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesCaller{contract: contract}, nil
}

// NewContractBLSRegistryCoordinatorWithIndicesTransactor creates a new write-only instance of ContractBLSRegistryCoordinatorWithIndices, bound to a specific deployed contract.
func NewContractBLSRegistryCoordinatorWithIndicesTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractBLSRegistryCoordinatorWithIndicesTransactor, error) {
	contract, err := bindContractBLSRegistryCoordinatorWithIndices(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesTransactor{contract: contract}, nil
}

// NewContractBLSRegistryCoordinatorWithIndicesFilterer creates a new log filterer instance of ContractBLSRegistryCoordinatorWithIndices, bound to a specific deployed contract.
func NewContractBLSRegistryCoordinatorWithIndicesFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractBLSRegistryCoordinatorWithIndicesFilterer, error) {
	contract, err := bindContractBLSRegistryCoordinatorWithIndices(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesFilterer{contract: contract}, nil
}

// bindContractBLSRegistryCoordinatorWithIndices binds a generic wrapper to an already deployed contract.
func bindContractBLSRegistryCoordinatorWithIndices(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractBLSRegistryCoordinatorWithIndicesMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ContractBLSRegistryCoordinatorWithIndicesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ContractBLSRegistryCoordinatorWithIndicesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ContractBLSRegistryCoordinatorWithIndicesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.contract.Transact(opts, method, params...)
}

// OPERATORCHURNAPPROVALTYPEHASH is a free data retrieval call binding the contract method 0xca0de882.
//
// Solidity: function OPERATOR_CHURN_APPROVAL_TYPEHASH() view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) OPERATORCHURNAPPROVALTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "OPERATOR_CHURN_APPROVAL_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OPERATORCHURNAPPROVALTYPEHASH is a free data retrieval call binding the contract method 0xca0de882.
//
// Solidity: function OPERATOR_CHURN_APPROVAL_TYPEHASH() view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) OPERATORCHURNAPPROVALTYPEHASH() ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.OPERATORCHURNAPPROVALTYPEHASH(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// OPERATORCHURNAPPROVALTYPEHASH is a free data retrieval call binding the contract method 0xca0de882.
//
// Solidity: function OPERATOR_CHURN_APPROVAL_TYPEHASH() view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) OPERATORCHURNAPPROVALTYPEHASH() ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.OPERATORCHURNAPPROVALTYPEHASH(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) BlsPubkeyRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "blsPubkeyRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) BlsPubkeyRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.BlsPubkeyRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) BlsPubkeyRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.BlsPubkeyRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// CalculateOperatorChurnApprovalDigestHash is a free data retrieval call binding the contract method 0xab269b2d.
//
// Solidity: function calculateOperatorChurnApprovalDigestHash(bytes32 registeringOperatorId, (uint8,address,(uint256,uint256))[] operatorKickParams, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) CalculateOperatorChurnApprovalDigestHash(opts *bind.CallOpts, registeringOperatorId [32]byte, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "calculateOperatorChurnApprovalDigestHash", registeringOperatorId, operatorKickParams, salt, expiry)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CalculateOperatorChurnApprovalDigestHash is a free data retrieval call binding the contract method 0xab269b2d.
//
// Solidity: function calculateOperatorChurnApprovalDigestHash(bytes32 registeringOperatorId, (uint8,address,(uint256,uint256))[] operatorKickParams, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) CalculateOperatorChurnApprovalDigestHash(registeringOperatorId [32]byte, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.CalculateOperatorChurnApprovalDigestHash(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, registeringOperatorId, operatorKickParams, salt, expiry)
}

// CalculateOperatorChurnApprovalDigestHash is a free data retrieval call binding the contract method 0xab269b2d.
//
// Solidity: function calculateOperatorChurnApprovalDigestHash(bytes32 registeringOperatorId, (uint8,address,(uint256,uint256))[] operatorKickParams, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) CalculateOperatorChurnApprovalDigestHash(registeringOperatorId [32]byte, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.CalculateOperatorChurnApprovalDigestHash(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, registeringOperatorId, operatorKickParams, salt, expiry)
}

// ChurnApprover is a free data retrieval call binding the contract method 0x054310e6.
//
// Solidity: function churnApprover() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) ChurnApprover(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "churnApprover")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChurnApprover is a free data retrieval call binding the contract method 0x054310e6.
//
// Solidity: function churnApprover() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) ChurnApprover() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ChurnApprover(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// ChurnApprover is a free data retrieval call binding the contract method 0x054310e6.
//
// Solidity: function churnApprover() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) ChurnApprover() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ChurnApprover(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Ejector(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "ejector")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Ejector() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Ejector(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Ejector() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Ejector(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// GetCurrentQuorumBitmapByOperatorId is a free data retrieval call binding the contract method 0x3431af25.
//
// Solidity: function getCurrentQuorumBitmapByOperatorId(bytes32 operatorId) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetCurrentQuorumBitmapByOperatorId(opts *bind.CallOpts, operatorId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getCurrentQuorumBitmapByOperatorId", operatorId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentQuorumBitmapByOperatorId is a free data retrieval call binding the contract method 0x3431af25.
//
// Solidity: function getCurrentQuorumBitmapByOperatorId(bytes32 operatorId) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetCurrentQuorumBitmapByOperatorId(operatorId [32]byte) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetCurrentQuorumBitmapByOperatorId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// GetCurrentQuorumBitmapByOperatorId is a free data retrieval call binding the contract method 0x3431af25.
//
// Solidity: function getCurrentQuorumBitmapByOperatorId(bytes32 operatorId) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetCurrentQuorumBitmapByOperatorId(operatorId [32]byte) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetCurrentQuorumBitmapByOperatorId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((bytes32,uint8))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperator(opts *bind.CallOpts, operator common.Address) (IRegistryCoordinatorOperator, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperator", operator)

	if err != nil {
		return *new(IRegistryCoordinatorOperator), err
	}

	out0 := *abi.ConvertType(out[0], new(IRegistryCoordinatorOperator)).(*IRegistryCoordinatorOperator)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((bytes32,uint8))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperator(operator common.Address) (IRegistryCoordinatorOperator, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperator(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((bytes32,uint8))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperator(operator common.Address) (IRegistryCoordinatorOperator, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperator(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperatorFromId is a free data retrieval call binding the contract method 0x296bb064.
//
// Solidity: function getOperatorFromId(bytes32 operatorId) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperatorFromId(opts *bind.CallOpts, operatorId [32]byte) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperatorFromId", operatorId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperatorFromId is a free data retrieval call binding the contract method 0x296bb064.
//
// Solidity: function getOperatorFromId(bytes32 operatorId) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperatorFromId(operatorId [32]byte) (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorFromId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// GetOperatorFromId is a free data retrieval call binding the contract method 0x296bb064.
//
// Solidity: function getOperatorFromId(bytes32 operatorId) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperatorFromId(operatorId [32]byte) (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorFromId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperatorId(opts *bind.CallOpts, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperatorId", operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperatorId(operator common.Address) ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperatorId(operator common.Address) ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperatorSetParams is a free data retrieval call binding the contract method 0xe65797ad.
//
// Solidity: function getOperatorSetParams(uint8 quorumNumber) view returns((uint32,uint16,uint16))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperatorSetParams(opts *bind.CallOpts, quorumNumber uint8) (IBLSRegistryCoordinatorWithIndicesOperatorSetParam, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperatorSetParams", quorumNumber)

	if err != nil {
		return *new(IBLSRegistryCoordinatorWithIndicesOperatorSetParam), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSRegistryCoordinatorWithIndicesOperatorSetParam)).(*IBLSRegistryCoordinatorWithIndicesOperatorSetParam)

	return out0, err

}

// GetOperatorSetParams is a free data retrieval call binding the contract method 0xe65797ad.
//
// Solidity: function getOperatorSetParams(uint8 quorumNumber) view returns((uint32,uint16,uint16))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperatorSetParams(quorumNumber uint8) (IBLSRegistryCoordinatorWithIndicesOperatorSetParam, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorSetParams(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, quorumNumber)
}

// GetOperatorSetParams is a free data retrieval call binding the contract method 0xe65797ad.
//
// Solidity: function getOperatorSetParams(uint8 quorumNumber) view returns((uint32,uint16,uint16))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperatorSetParams(quorumNumber uint8) (IBLSRegistryCoordinatorWithIndicesOperatorSetParam, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorSetParams(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, quorumNumber)
}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperatorStatus(opts *bind.CallOpts, operator common.Address) (uint8, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperatorStatus", operator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperatorStatus(operator common.Address) (uint8, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorStatus(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperatorStatus(operator common.Address) (uint8, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorStatus(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetQuorumBitmapByOperatorIdAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x3064620d.
//
// Solidity: function getQuorumBitmapByOperatorIdAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(opts *bind.CallOpts, operatorId [32]byte, blockNumber uint32, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getQuorumBitmapByOperatorIdAtBlockNumberByIndex", operatorId, blockNumber, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetQuorumBitmapByOperatorIdAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x3064620d.
//
// Solidity: function getQuorumBitmapByOperatorIdAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(operatorId [32]byte, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId, blockNumber, index)
}

// GetQuorumBitmapByOperatorIdAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x3064620d.
//
// Solidity: function getQuorumBitmapByOperatorIdAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(operatorId [32]byte, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId, blockNumber, index)
}

// GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber is a free data retrieval call binding the contract method 0x85020d49.
//
// Solidity: function getQuorumBitmapIndicesByOperatorIdsAtBlockNumber(uint32 blockNumber, bytes32[] operatorIds) view returns(uint32[])
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, operatorIds [][32]byte) ([]uint32, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getQuorumBitmapIndicesByOperatorIdsAtBlockNumber", blockNumber, operatorIds)

	if err != nil {
		return *new([]uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint32)).(*[]uint32)

	return out0, err

}

// GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber is a free data retrieval call binding the contract method 0x85020d49.
//
// Solidity: function getQuorumBitmapIndicesByOperatorIdsAtBlockNumber(uint32 blockNumber, bytes32[] operatorIds) view returns(uint32[])
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(blockNumber uint32, operatorIds [][32]byte) ([]uint32, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, blockNumber, operatorIds)
}

// GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber is a free data retrieval call binding the contract method 0x85020d49.
//
// Solidity: function getQuorumBitmapIndicesByOperatorIdsAtBlockNumber(uint32 blockNumber, bytes32[] operatorIds) view returns(uint32[])
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(blockNumber uint32, operatorIds [][32]byte) ([]uint32, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, blockNumber, operatorIds)
}

// GetQuorumBitmapUpdateByOperatorIdByIndex is a free data retrieval call binding the contract method 0x0159f1ce.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdByIndex(bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetQuorumBitmapUpdateByOperatorIdByIndex(opts *bind.CallOpts, operatorId [32]byte, index *big.Int) (IRegistryCoordinatorQuorumBitmapUpdate, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getQuorumBitmapUpdateByOperatorIdByIndex", operatorId, index)

	if err != nil {
		return *new(IRegistryCoordinatorQuorumBitmapUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IRegistryCoordinatorQuorumBitmapUpdate)).(*IRegistryCoordinatorQuorumBitmapUpdate)

	return out0, err

}

// GetQuorumBitmapUpdateByOperatorIdByIndex is a free data retrieval call binding the contract method 0x0159f1ce.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdByIndex(bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetQuorumBitmapUpdateByOperatorIdByIndex(operatorId [32]byte, index *big.Int) (IRegistryCoordinatorQuorumBitmapUpdate, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapUpdateByOperatorIdByIndex(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId, index)
}

// GetQuorumBitmapUpdateByOperatorIdByIndex is a free data retrieval call binding the contract method 0x0159f1ce.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdByIndex(bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetQuorumBitmapUpdateByOperatorIdByIndex(operatorId [32]byte, index *big.Int) (IRegistryCoordinatorQuorumBitmapUpdate, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapUpdateByOperatorIdByIndex(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId, index)
}

// GetQuorumBitmapUpdateByOperatorIdLength is a free data retrieval call binding the contract method 0x055a62b6.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdLength(bytes32 operatorId) view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetQuorumBitmapUpdateByOperatorIdLength(opts *bind.CallOpts, operatorId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getQuorumBitmapUpdateByOperatorIdLength", operatorId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetQuorumBitmapUpdateByOperatorIdLength is a free data retrieval call binding the contract method 0x055a62b6.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdLength(bytes32 operatorId) view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetQuorumBitmapUpdateByOperatorIdLength(operatorId [32]byte) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapUpdateByOperatorIdLength(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// GetQuorumBitmapUpdateByOperatorIdLength is a free data retrieval call binding the contract method 0x055a62b6.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdLength(bytes32 operatorId) view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetQuorumBitmapUpdateByOperatorIdLength(operatorId [32]byte) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapUpdateByOperatorIdLength(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) IndexRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "indexRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) IndexRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.IndexRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) IndexRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.IndexRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// IsChurnApproverSaltUsed is a free data retrieval call binding the contract method 0x1478851f.
//
// Solidity: function isChurnApproverSaltUsed(bytes32 ) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) IsChurnApproverSaltUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "isChurnApproverSaltUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChurnApproverSaltUsed is a free data retrieval call binding the contract method 0x1478851f.
//
// Solidity: function isChurnApproverSaltUsed(bytes32 ) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) IsChurnApproverSaltUsed(arg0 [32]byte) (bool, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.IsChurnApproverSaltUsed(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, arg0)
}

// IsChurnApproverSaltUsed is a free data retrieval call binding the contract method 0x1478851f.
//
// Solidity: function isChurnApproverSaltUsed(bytes32 ) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) IsChurnApproverSaltUsed(arg0 [32]byte) (bool, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.IsChurnApproverSaltUsed(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, arg0)
}

// NumRegistries is a free data retrieval call binding the contract method 0xd72d8dd6.
//
// Solidity: function numRegistries() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) NumRegistries(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "numRegistries")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumRegistries is a free data retrieval call binding the contract method 0xd72d8dd6.
//
// Solidity: function numRegistries() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) NumRegistries() (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.NumRegistries(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// NumRegistries is a free data retrieval call binding the contract method 0xd72d8dd6.
//
// Solidity: function numRegistries() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) NumRegistries() (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.NumRegistries(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Paused(index uint8) (bool, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Paused(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Paused(index uint8) (bool, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Paused(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Paused0() (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Paused0(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Paused0() (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Paused0(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) PauserRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.PauserRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.PauserRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Registries is a free data retrieval call binding the contract method 0x6347c900.
//
// Solidity: function registries(uint256 ) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Registries(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "registries", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registries is a free data retrieval call binding the contract method 0x6347c900.
//
// Solidity: function registries(uint256 ) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Registries(arg0 *big.Int) (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Registries(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, arg0)
}

// Registries is a free data retrieval call binding the contract method 0x6347c900.
//
// Solidity: function registries(uint256 ) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Registries(arg0 *big.Int) (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Registries(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, arg0)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) ServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "serviceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) ServiceManager() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ServiceManager(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) ServiceManager() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ServiceManager(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Slasher() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Slasher(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Slasher() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Slasher(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) StakeRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.StakeRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.StakeRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// DeregisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x455a43fc.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) DeregisterOperatorWithCoordinator(opts *bind.TransactOpts, quorumNumbers []byte, pubkey BN254G1Point) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "deregisterOperatorWithCoordinator", quorumNumbers, pubkey)
}

// DeregisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x455a43fc.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) DeregisterOperatorWithCoordinator(quorumNumbers []byte, pubkey BN254G1Point) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.DeregisterOperatorWithCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey)
}

// DeregisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x455a43fc.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) DeregisterOperatorWithCoordinator(quorumNumbers []byte, pubkey BN254G1Point) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.DeregisterOperatorWithCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey)
}

// DeregisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0xc81b1ff4.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, bytes deregistrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) DeregisterOperatorWithCoordinator0(opts *bind.TransactOpts, quorumNumbers []byte, deregistrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "deregisterOperatorWithCoordinator0", quorumNumbers, deregistrationData)
}

// DeregisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0xc81b1ff4.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, bytes deregistrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) DeregisterOperatorWithCoordinator0(quorumNumbers []byte, deregistrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.DeregisterOperatorWithCoordinator0(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, deregistrationData)
}

// DeregisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0xc81b1ff4.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, bytes deregistrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) DeregisterOperatorWithCoordinator0(quorumNumbers []byte, deregistrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.DeregisterOperatorWithCoordinator0(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, deregistrationData)
}

// EjectOperatorFromCoordinator is a paid mutator transaction binding the contract method 0xb8347acc.
//
// Solidity: function ejectOperatorFromCoordinator(address operator, bytes quorumNumbers, (uint256,uint256) pubkey) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) EjectOperatorFromCoordinator(opts *bind.TransactOpts, operator common.Address, quorumNumbers []byte, pubkey BN254G1Point) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "ejectOperatorFromCoordinator", operator, quorumNumbers, pubkey)
}

// EjectOperatorFromCoordinator is a paid mutator transaction binding the contract method 0xb8347acc.
//
// Solidity: function ejectOperatorFromCoordinator(address operator, bytes quorumNumbers, (uint256,uint256) pubkey) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) EjectOperatorFromCoordinator(operator common.Address, quorumNumbers []byte, pubkey BN254G1Point) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.EjectOperatorFromCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, operator, quorumNumbers, pubkey)
}

// EjectOperatorFromCoordinator is a paid mutator transaction binding the contract method 0xb8347acc.
//
// Solidity: function ejectOperatorFromCoordinator(address operator, bytes quorumNumbers, (uint256,uint256) pubkey) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) EjectOperatorFromCoordinator(operator common.Address, quorumNumbers []byte, pubkey BN254G1Point) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.EjectOperatorFromCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, operator, quorumNumbers, pubkey)
}

// Initialize is a paid mutator transaction binding the contract method 0x4b76b9d5.
//
// Solidity: function initialize(address _churnApprover, address _ejector, (uint32,uint16,uint16)[] _operatorSetParams, address _pauserRegistry, uint256 _initialPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) Initialize(opts *bind.TransactOpts, _churnApprover common.Address, _ejector common.Address, _operatorSetParams []IBLSRegistryCoordinatorWithIndicesOperatorSetParam, _pauserRegistry common.Address, _initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "initialize", _churnApprover, _ejector, _operatorSetParams, _pauserRegistry, _initialPausedStatus)
}

// Initialize is a paid mutator transaction binding the contract method 0x4b76b9d5.
//
// Solidity: function initialize(address _churnApprover, address _ejector, (uint32,uint16,uint16)[] _operatorSetParams, address _pauserRegistry, uint256 _initialPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Initialize(_churnApprover common.Address, _ejector common.Address, _operatorSetParams []IBLSRegistryCoordinatorWithIndicesOperatorSetParam, _pauserRegistry common.Address, _initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Initialize(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _churnApprover, _ejector, _operatorSetParams, _pauserRegistry, _initialPausedStatus)
}

// Initialize is a paid mutator transaction binding the contract method 0x4b76b9d5.
//
// Solidity: function initialize(address _churnApprover, address _ejector, (uint32,uint16,uint16)[] _operatorSetParams, address _pauserRegistry, uint256 _initialPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) Initialize(_churnApprover common.Address, _ejector common.Address, _operatorSetParams []IBLSRegistryCoordinatorWithIndicesOperatorSetParam, _pauserRegistry common.Address, _initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Initialize(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _churnApprover, _ejector, _operatorSetParams, _pauserRegistry, _initialPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Pause(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Pause(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) PauseAll() (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.PauseAll(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.PauseAll(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts)
}

// RegisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x25007576.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket, (uint8,address,(uint256,uint256))[] operatorKickParams, (bytes,bytes32,uint256) signatureWithSaltAndExpiry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) RegisterOperatorWithCoordinator(opts *bind.TransactOpts, quorumNumbers []byte, pubkey BN254G1Point, socket string, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, signatureWithSaltAndExpiry ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "registerOperatorWithCoordinator", quorumNumbers, pubkey, socket, operatorKickParams, signatureWithSaltAndExpiry)
}

// RegisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x25007576.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket, (uint8,address,(uint256,uint256))[] operatorKickParams, (bytes,bytes32,uint256) signatureWithSaltAndExpiry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) RegisterOperatorWithCoordinator(quorumNumbers []byte, pubkey BN254G1Point, socket string, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, signatureWithSaltAndExpiry ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, socket, operatorKickParams, signatureWithSaltAndExpiry)
}

// RegisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x25007576.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket, (uint8,address,(uint256,uint256))[] operatorKickParams, (bytes,bytes32,uint256) signatureWithSaltAndExpiry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) RegisterOperatorWithCoordinator(quorumNumbers []byte, pubkey BN254G1Point, socket string, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, signatureWithSaltAndExpiry ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, socket, operatorKickParams, signatureWithSaltAndExpiry)
}

// RegisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0x526ea94e.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, bytes registrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) RegisterOperatorWithCoordinator0(opts *bind.TransactOpts, quorumNumbers []byte, registrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "registerOperatorWithCoordinator0", quorumNumbers, registrationData)
}

// RegisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0x526ea94e.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, bytes registrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) RegisterOperatorWithCoordinator0(quorumNumbers []byte, registrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator0(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, registrationData)
}

// RegisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0x526ea94e.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, bytes registrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) RegisterOperatorWithCoordinator0(quorumNumbers []byte, registrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator0(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, registrationData)
}

// RegisterOperatorWithCoordinator1 is a paid mutator transaction binding the contract method 0xc66ab9ca.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) RegisterOperatorWithCoordinator1(opts *bind.TransactOpts, quorumNumbers []byte, pubkey BN254G1Point, socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "registerOperatorWithCoordinator1", quorumNumbers, pubkey, socket)
}

// RegisterOperatorWithCoordinator1 is a paid mutator transaction binding the contract method 0xc66ab9ca.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) RegisterOperatorWithCoordinator1(quorumNumbers []byte, pubkey BN254G1Point, socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator1(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, socket)
}

// RegisterOperatorWithCoordinator1 is a paid mutator transaction binding the contract method 0xc66ab9ca.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) RegisterOperatorWithCoordinator1(quorumNumbers []byte, pubkey BN254G1Point, socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator1(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, socket)
}

// SetChurnApprover is a paid mutator transaction binding the contract method 0x29d1e0c3.
//
// Solidity: function setChurnApprover(address _churnApprover) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) SetChurnApprover(opts *bind.TransactOpts, _churnApprover common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "setChurnApprover", _churnApprover)
}

// SetChurnApprover is a paid mutator transaction binding the contract method 0x29d1e0c3.
//
// Solidity: function setChurnApprover(address _churnApprover) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) SetChurnApprover(_churnApprover common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetChurnApprover(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _churnApprover)
}

// SetChurnApprover is a paid mutator transaction binding the contract method 0x29d1e0c3.
//
// Solidity: function setChurnApprover(address _churnApprover) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) SetChurnApprover(_churnApprover common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetChurnApprover(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _churnApprover)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) SetEjector(opts *bind.TransactOpts, _ejector common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "setEjector", _ejector)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) SetEjector(_ejector common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetEjector(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _ejector)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) SetEjector(_ejector common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetEjector(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _ejector)
}

// SetOperatorSetParams is a paid mutator transaction binding the contract method 0x5b0b829f.
//
// Solidity: function setOperatorSetParams(uint8 quorumNumber, (uint32,uint16,uint16) operatorSetParam) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) SetOperatorSetParams(opts *bind.TransactOpts, quorumNumber uint8, operatorSetParam IBLSRegistryCoordinatorWithIndicesOperatorSetParam) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "setOperatorSetParams", quorumNumber, operatorSetParam)
}

// SetOperatorSetParams is a paid mutator transaction binding the contract method 0x5b0b829f.
//
// Solidity: function setOperatorSetParams(uint8 quorumNumber, (uint32,uint16,uint16) operatorSetParam) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) SetOperatorSetParams(quorumNumber uint8, operatorSetParam IBLSRegistryCoordinatorWithIndicesOperatorSetParam) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetOperatorSetParams(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumber, operatorSetParam)
}

// SetOperatorSetParams is a paid mutator transaction binding the contract method 0x5b0b829f.
//
// Solidity: function setOperatorSetParams(uint8 quorumNumber, (uint32,uint16,uint16) operatorSetParam) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) SetOperatorSetParams(quorumNumber uint8, operatorSetParam IBLSRegistryCoordinatorWithIndicesOperatorSetParam) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetOperatorSetParams(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumber, operatorSetParam)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetPauserRegistry(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetPauserRegistry(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPauserRegistry)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Unpause(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Unpause(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPausedStatus)
}

// UpdateSocket is a paid mutator transaction binding the contract method 0x0cf4b767.
//
// Solidity: function updateSocket(string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) UpdateSocket(opts *bind.TransactOpts, socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "updateSocket", socket)
}

// UpdateSocket is a paid mutator transaction binding the contract method 0x0cf4b767.
//
// Solidity: function updateSocket(string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) UpdateSocket(socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.UpdateSocket(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, socket)
}

// UpdateSocket is a paid mutator transaction binding the contract method 0x0cf4b767.
//
// Solidity: function updateSocket(string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) UpdateSocket(socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.UpdateSocket(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, socket)
}

// ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator is returned from FilterChurnApproverUpdated and is used to iterate over the raw logs and unpacked data for ChurnApproverUpdated events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated represents a ChurnApproverUpdated event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated struct {
	PrevChurnApprover common.Address
	NewChurnApprover  common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterChurnApproverUpdated is a free log retrieval operation binding the contract event 0x315457d8a8fe60f04af17c16e2f5a5e1db612b31648e58030360759ef8f3528c.
//
// Solidity: event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterChurnApproverUpdated(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "ChurnApproverUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "ChurnApproverUpdated", logs: logs, sub: sub}, nil
}

// WatchChurnApproverUpdated is a free log subscription operation binding the contract event 0x315457d8a8fe60f04af17c16e2f5a5e1db612b31648e58030360759ef8f3528c.
//
// Solidity: event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchChurnApproverUpdated(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "ChurnApproverUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "ChurnApproverUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChurnApproverUpdated is a log parse operation binding the contract event 0x315457d8a8fe60f04af17c16e2f5a5e1db612b31648e58030360759ef8f3528c.
//
// Solidity: event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseChurnApproverUpdated(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "ChurnApproverUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator is returned from FilterEjectorUpdated and is used to iterate over the raw logs and unpacked data for EjectorUpdated events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated represents a EjectorUpdated event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated struct {
	PrevEjector common.Address
	NewEjector  common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterEjectorUpdated is a free log retrieval operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterEjectorUpdated(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "EjectorUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "EjectorUpdated", logs: logs, sub: sub}, nil
}

// WatchEjectorUpdated is a free log subscription operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchEjectorUpdated(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "EjectorUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "EjectorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEjectorUpdated is a log parse operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseEjectorUpdated(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "EjectorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesInitializedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesInitialized represents a Initialized event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesInitializedIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesInitializedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesInitialized)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseInitialized(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesInitialized, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesInitialized)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator is returned from FilterOperatorDeregistered and is used to iterate over the raw logs and unpacked data for OperatorDeregistered events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered represents a OperatorDeregistered event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered struct {
	Operator   common.Address
	OperatorId [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorDeregistered is a free log retrieval operation binding the contract event 0x396fdcb180cb0fea26928113fb0fd1c3549863f9cd563e6a184f1d578116c8e4.
//
// Solidity: event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterOperatorDeregistered(opts *bind.FilterOpts, operator []common.Address, operatorId [][32]byte) (*ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "OperatorDeregistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "OperatorDeregistered", logs: logs, sub: sub}, nil
}

// WatchOperatorDeregistered is a free log subscription operation binding the contract event 0x396fdcb180cb0fea26928113fb0fd1c3549863f9cd563e6a184f1d578116c8e4.
//
// Solidity: event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchOperatorDeregistered(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered, operator []common.Address, operatorId [][32]byte) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "OperatorDeregistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorDeregistered is a log parse operation binding the contract event 0x396fdcb180cb0fea26928113fb0fd1c3549863f9cd563e6a184f1d578116c8e4.
//
// Solidity: event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseOperatorDeregistered(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator is returned from FilterOperatorRegistered and is used to iterate over the raw logs and unpacked data for OperatorRegistered events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered represents a OperatorRegistered event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered struct {
	Operator   common.Address
	OperatorId [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorRegistered is a free log retrieval operation binding the contract event 0xe8e68cef1c3a761ed7be7e8463a375f27f7bc335e51824223cacce636ec5c3fe.
//
// Solidity: event OperatorRegistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterOperatorRegistered(opts *bind.FilterOpts, operator []common.Address, operatorId [][32]byte) (*ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "OperatorRegistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "OperatorRegistered", logs: logs, sub: sub}, nil
}

// WatchOperatorRegistered is a free log subscription operation binding the contract event 0xe8e68cef1c3a761ed7be7e8463a375f27f7bc335e51824223cacce636ec5c3fe.
//
// Solidity: event OperatorRegistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchOperatorRegistered(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered, operator []common.Address, operatorId [][32]byte) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "OperatorRegistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRegistered is a log parse operation binding the contract event 0xe8e68cef1c3a761ed7be7e8463a375f27f7bc335e51824223cacce636ec5c3fe.
//
// Solidity: event OperatorRegistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseOperatorRegistered(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator is returned from FilterOperatorSetParamsUpdated and is used to iterate over the raw logs and unpacked data for OperatorSetParamsUpdated events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated represents a OperatorSetParamsUpdated event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated struct {
	QuorumNumber      uint8
	OperatorSetParams IBLSRegistryCoordinatorWithIndicesOperatorSetParam
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOperatorSetParamsUpdated is a free log retrieval operation binding the contract event 0x3ee6fe8d54610244c3e9d3c066ae4aee997884aa28f10616ae821925401318ac.
//
// Solidity: event OperatorSetParamsUpdated(uint8 indexed quorumNumber, (uint32,uint16,uint16) operatorSetParams)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterOperatorSetParamsUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "OperatorSetParamsUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "OperatorSetParamsUpdated", logs: logs, sub: sub}, nil
}

// WatchOperatorSetParamsUpdated is a free log subscription operation binding the contract event 0x3ee6fe8d54610244c3e9d3c066ae4aee997884aa28f10616ae821925401318ac.
//
// Solidity: event OperatorSetParamsUpdated(uint8 indexed quorumNumber, (uint32,uint16,uint16) operatorSetParams)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchOperatorSetParamsUpdated(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "OperatorSetParamsUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorSetParamsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorSetParamsUpdated is a log parse operation binding the contract event 0x3ee6fe8d54610244c3e9d3c066ae4aee997884aa28f10616ae821925401318ac.
//
// Solidity: event OperatorSetParamsUpdated(uint8 indexed quorumNumber, (uint32,uint16,uint16) operatorSetParams)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseOperatorSetParamsUpdated(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorSetParamsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator is returned from FilterOperatorSocketUpdate and is used to iterate over the raw logs and unpacked data for OperatorSocketUpdate events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate represents a OperatorSocketUpdate event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate struct {
	OperatorId [32]byte
	Socket     string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorSocketUpdate is a free log retrieval operation binding the contract event 0xec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa.
//
// Solidity: event OperatorSocketUpdate(bytes32 indexed operatorId, string socket)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterOperatorSocketUpdate(opts *bind.FilterOpts, operatorId [][32]byte) (*ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "OperatorSocketUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "OperatorSocketUpdate", logs: logs, sub: sub}, nil
}

// WatchOperatorSocketUpdate is a free log subscription operation binding the contract event 0xec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa.
//
// Solidity: event OperatorSocketUpdate(bytes32 indexed operatorId, string socket)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchOperatorSocketUpdate(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate, operatorId [][32]byte) (event.Subscription, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "OperatorSocketUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorSocketUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorSocketUpdate is a log parse operation binding the contract event 0xec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa.
//
// Solidity: event OperatorSocketUpdate(bytes32 indexed operatorId, string socket)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseOperatorSocketUpdate(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorSocketUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesPausedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesPaused represents a Paused event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractBLSRegistryCoordinatorWithIndicesPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesPausedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesPaused)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParsePaused(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesPaused, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesPaused)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet represents a PauserRegistrySet event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParsePauserRegistrySet(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesUnpaused represents a Unpaused event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesUnpaused)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseUnpaused(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesUnpaused, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesUnpaused)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
